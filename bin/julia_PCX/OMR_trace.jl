precompile(Tuple{typeof(Base.atreplinit), Function})
precompile(Tuple{typeof(JuliaInterpreter.set_compiled_methods)})
precompile(Tuple{typeof(JuliaInterpreter.__init__)})
precompile(Tuple{typeof(Base.which), Any, Any})
precompile(Tuple{typeof(Base.getproperty), Core.TypeMapEntry, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Method, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Method, Nothing}, Method})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Method, Nothing}, Nothing, Method})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Module, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Module, Nothing}, Module})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Module, Nothing}, Nothing, Module})
precompile(Tuple{typeof(Revise.steal_repl_backend), REPL.REPLBackend})
precompile(Tuple{typeof(Revise.setup_atom), Module})
precompile(Tuple{Type{Revise.PkgData}, Base.PkgId})
precompile(Tuple{typeof(Revise.filter_valid_cachefiles), Nothing, Array{String, 1}})
precompile(Tuple{typeof(Revise.parse_cache_header), Base.IOStream})
precompile(Tuple{typeof(Revise.parse_cache_header), String})
precompile(Tuple{typeof(Revise.filter_valid_cachefiles), String, Array{String, 1}})
precompile(Tuple{typeof(Revise.pkg_fileinfo), Base.PkgId})
precompile(Tuple{typeof(Revise.relpath_safe), String, String})
precompile(Tuple{typeof(Base.Filesystem.relpath), String, Revise.PkgData})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}}, Module})
precompile(Tuple{typeof(Revise.first_bad_position), String})
precompile(Tuple{typeof(Revise.unwrap), Expr})
precompile(Tuple{typeof(Revise.parse_source!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, String, String, Module})
precompile(Tuple{typeof(Revise.parse_source!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, String, Module})
precompile(Tuple{Type{Revise.CodeTrackingMethodInfo}, Expr})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#kw##replace_coretypes_list!")), NamedTuple{(:rev,), Tuple{Bool}}, typeof(JuliaInterpreter.replace_coretypes_list!), Array{Any, 1}})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##replace_coretypes_list!#62")), Bool, typeof(JuliaInterpreter.replace_coretypes_list!), Array{Any, 1}})
precompile(Tuple{typeof(JuliaInterpreter.compute_ssa_mapping_delete_statements!), Core.CodeInfo, Array{Int64, 1}})
precompile(Tuple{typeof(JuliaInterpreter.lookup_global_refs!), Expr})
precompile(Tuple{typeof(JuliaInterpreter.optimize!), Core.CodeInfo, Module})
precompile(Tuple{typeof(JuliaInterpreter.scan_ssa_use!), Base.BitSet, Any})
precompile(Tuple{typeof(JuliaInterpreter.find_used), Core.CodeInfo})
precompile(Tuple{typeof(JuliaInterpreter.codelocation), Core.CodeInfo, Int64})
precompile(Tuple{typeof(JuliaInterpreter.getfile), JuliaInterpreter.Frame})
precompile(Tuple{typeof(JuliaInterpreter.getfile), JuliaInterpreter.FrameCode, Int64})
precompile(Tuple{typeof(JuliaInterpreter.getfile), JuliaInterpreter.Frame, Int64})
precompile(Tuple{typeof(CodeTracking.whereis), JuliaInterpreter.FrameCode, Int64})
precompile(Tuple{typeof(JuliaInterpreter.toplevel_code_contains_line), JuliaInterpreter.FrameCode, Int64})
precompile(Tuple{typeof(JuliaInterpreter.framecode_matches_breakpoint), JuliaInterpreter.FrameCode, JuliaInterpreter.BreakpointFileLocation})
precompile(Tuple{typeof(JuliaInterpreter.statementnumber), JuliaInterpreter.FrameCode, Int64})
precompile(Tuple{typeof(JuliaInterpreter.add_breakpoint_if_match!), JuliaInterpreter.FrameCode, JuliaInterpreter.BreakpointFileLocation})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##FrameCode#1")), Bool, Bool, Type{JuliaInterpreter.FrameCode}, Module, Core.CodeInfo})
precompile(Tuple{typeof(JuliaInterpreter.prepare_framedata), JuliaInterpreter.FrameCode, Array{Any, 1}, Core.SimpleVector, Bool})
precompile(Tuple{Type{JuliaInterpreter.Frame}, JuliaInterpreter.FrameCode, JuliaInterpreter.FrameData, Int64, Nothing})
precompile(Tuple{typeof(JuliaInterpreter.prepare_thunk), Module, Expr, Bool})
precompile(Tuple{typeof(Revise.toplevel_blocks), Core.Compiler.CFG})
precompile(Tuple{getfield(Revise, Symbol("#errorder#10")), Int64, Int64})
precompile(Tuple{typeof(Revise.add_block_dependents!), Revise.BackEdges, Core.Compiler.CFG, Base.BitArray{1}, Int64, Int64})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, Expr})
precompile(Tuple{Type{Revise.BackEdges}, Core.CodeInfo})
precompile(Tuple{typeof(Revise.toplevel_chunks), Revise.BackEdges})
precompile(Tuple{getfield(Revise, Symbol("#kw##hastrackedexpr")), NamedTuple{(:heads,), Tuple{Tuple{Symbol, Symbol, Symbol, Symbol}}}, typeof(Revise.hastrackedexpr), Core.CodeInfo})
precompile(Tuple{getfield(Revise, Symbol("##hastrackedexpr#11")), Tuple{Symbol, Symbol, Symbol, Symbol}, typeof(Revise.hastrackedexpr), Core.CodeInfo, Base.OneTo{Int64}})
precompile(Tuple{getfield(Revise, Symbol("#kw##hastrackedexpr")), NamedTuple{(:heads,), Tuple{Tuple{Symbol, Symbol, Symbol, Symbol}}}, typeof(Revise.hastrackedexpr), Core.CodeInfo, Base.OneTo{Int64}})
precompile(Tuple{getfield(Revise, Symbol("##hastrackedexpr#11")), Tuple{Symbol, Symbol, Symbol, Symbol}, typeof(Revise.hastrackedexpr), Core.CodeInfo, Base.UnitRange{Int64}})
precompile(Tuple{typeof(JuliaInterpreter.hasarg), Base.Fix2{typeof(Base.isequal), Symbol}, Array{Any, 1}})
precompile(Tuple{typeof(Revise.add_dependencies!), Revise.CodeTrackingMethodInfo, Revise.BackEdges, Core.CodeInfo, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Revise.minimal_evaluation!), Revise.CodeTrackingMethodInfo, JuliaInterpreter.Frame})
precompile(Tuple{typeof(Revise.trim_toplevel!), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(JuliaInterpreter.sparam_syms), Method})
precompile(Tuple{typeof(JuliaInterpreter.lookup_expr), JuliaInterpreter.Frame, Expr})
precompile(Tuple{typeof(JuliaInterpreter.get_return), JuliaInterpreter.Frame})
precompile(Tuple{typeof(LoweredCodeUtils.isanonymous_typedef), Core.CodeInfo})
precompile(Tuple{typeof(Revise.add_docexpr!), Base.Dict{Module, Array{Expr, 1}}, Module, Expr})
precompile(Tuple{typeof(LoweredCodeUtils.ismethod3), JuliaInterpreter.Frame})
precompile(Tuple{typeof(LoweredCodeUtils.identify_framemethod_calls), JuliaInterpreter.Frame})
precompile(Tuple{typeof(LoweredCodeUtils.callchain), Array{NamedTuple{(:linetop, :linebody, :callee, :caller), Tuple{Int64, Int64, Symbol, Union{Bool, Symbol}}}, 1}})
precompile(Tuple{typeof(LoweredCodeUtils.replacename!), Array{Any, 1}, Base.Pair{Symbol, Nothing}})
precompile(Tuple{typeof(LoweredCodeUtils.replacename!), Array{Any, 1}, Base.Pair{Symbol, Symbol}})
precompile(Tuple{typeof(LoweredCodeUtils.rename_framemethods!), Any, JuliaInterpreter.Frame, Base.Dict{Symbol, LoweredCodeUtils.MethodInfo}, Array{NamedTuple{(:linetop, :linebody, :callee, :caller), Tuple{Int64, Int64, Symbol, Union{Bool, Symbol}}}, 1}, Base.Dict{Symbol, Union{Bool, Symbol}}})
precompile(Tuple{typeof(JuliaInterpreter.resolvefc), JuliaInterpreter.Frame, Any})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##collect_args#44")), Bool, typeof(JuliaInterpreter.collect_args), JuliaInterpreter.Frame, Expr})
precompile(Tuple{getfield(Revise, Symbol("##methods_by_execution!#20")), Bool, Bool, typeof(Revise.methods_by_execution!), Any, Revise.CodeTrackingMethodInfo, Base.Dict{Module, Array{Expr, 1}}, JuliaInterpreter.Frame, Base.BitArray{1}})
precompile(Tuple{getfield(Revise, Symbol("##methods_by_execution!#15")), Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.methods_by_execution!), Any, Revise.CodeTrackingMethodInfo, Base.Dict{Module, Array{Expr, 1}}, Module, Expr})
precompile(Tuple{typeof(Revise.storedeps), Base.Set{Union{GlobalRef, Symbol}}, Nothing, Module})
precompile(Tuple{typeof(Revise.storedeps), Base.Set{Union{GlobalRef, Symbol}}, Array{Any, 1}, Module})
precompile(Tuple{typeof(Revise.storedeps), Base.Set{Union{GlobalRef, Symbol}}, Revise.RelocatableExpr, Module})
precompile(Tuple{getfield(Revise, Symbol("##instantiate_sigs!#71")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.instantiate_sigs!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{typeof(Revise.queue_includes!), Revise.PkgData, Base.PkgId})
precompile(Tuple{typeof(Revise.parse_pkg_files), Base.PkgId})
precompile(Tuple{Type{Revise.WatchList}})
precompile(Tuple{typeof(Revise.init_watching), Revise.PkgData, Array{String, 1}})
precompile(Tuple{typeof(Revise.__init__)})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Revise.PkgData}, Base.PkgId})
precompile(Tuple{typeof(CodeTracking.basepath), Base.PkgId})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Base.PkgId, Revise.PkgData}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Base.PkgId, Revise.PkgData}, Base.PkgId})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.PkgId, Revise.PkgData}, Revise.PkgData, Base.PkgId})
precompile(Tuple{typeof(Base.push!), Array{Tuple{Module, String, Float64}, 1}, Tuple{Module, String, Float64}})
precompile(Tuple{typeof(Base.seek), Base.IOStream, UInt64})
precompile(Tuple{typeof(Base._deleteat!), Array{Tuple{Module, String, Float64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{Tuple{Module, String, Float64}, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{Tuple{Module, String, Float64}, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.fill!), Array{Int32, 1}, Int64})
precompile(Tuple{typeof(OrderedCollections.rehash!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, Int64})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex2), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, Module})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Module, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Module})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Base.PkgId, CodeTracking.PkgFiles}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Base.PkgId, CodeTracking.PkgFiles}, Base.PkgId})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.PkgId, CodeTracking.PkgFiles}, CodeTracking.PkgFiles, Base.PkgId})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Revise.WatchList}, String})
precompile(Tuple{Type{Base.Dict{String, Base.PkgId}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Revise.WatchList}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Revise.WatchList}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Revise.WatchList}, Revise.WatchList, String})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Base.PkgId}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Base.PkgId}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.PkgId}, Base.PkgId, String})
precompile(Tuple{typeof(Revise.watch_package), Base.PkgId})
precompile(Tuple{typeof(Revise.wait_changed), String})
precompile(Tuple{typeof(Revise.watch_files_via_dir), String})
precompile(Tuple{typeof(Revise.hasfile), Revise.PkgData, String})
precompile(Tuple{typeof(Revise.revise_dir_queued), String})
precompile(Tuple{Revise.Rescheduler{typeof(Revise.revise_dir_queued), Tuple{String}}})
precompile(Tuple{Type{FileWatching.FileMonitor}, String})
precompile(Tuple{typeof(Base.preserve_handle), FileWatching.FileMonitor})
precompile(Tuple{typeof(FileWatching.start_watching), FileWatching.FileMonitor})
precompile(Tuple{typeof(Base.unpreserve_handle), FileWatching.FileMonitor})
precompile(Tuple{typeof(FileWatching.stop_watching), FileWatching.FileMonitor})
precompile(Tuple{typeof(Base.wait), FileWatching.FileMonitor})
precompile(Tuple{typeof(FileWatching.watch_file), String, Int64})
precompile(Tuple{typeof(Revise.watch_manifest), String})
precompile(Tuple{Revise.Rescheduler{typeof(Revise.watch_manifest), Tuple{String}}})
precompile(Tuple{typeof(Revise.remove_from_included_files), Symbol})
precompile(Tuple{typeof(Revise.has_writable_paths), Revise.PkgData})
precompile(Tuple{typeof(Revise._watch_package), Base.PkgId})
precompile(Tuple{getfield(Revise, Symbol("#34#35")){Base.PkgId}})
precompile(Tuple{getfield(Base, Symbol("#689#690")){Base.UUID, String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#689#690")){Base.UUID, String}, String})
precompile(Tuple{typeof(Base.manifest_deps_get), String, Base.PkgId, String})
precompile(Tuple{typeof(Base.identify_package), Base.PkgId, String})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base.sort!), Array{String, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.ReverseOrdering{Base.Order.By{getfield(Revise, Symbol("#23#24"))}}})
precompile(Tuple{typeof(Base.sort!), Array{String, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.ReverseOrdering{Base.Order.By{getfield(Revise, Symbol("#23#24"))}}, Array{String, 1}})
precompile(Tuple{typeof(Base.Printf.fix_dec), Base.TTY, Float64, String, Int64, Int64, Char, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.register_root_module), Module})
precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(OhMyREPL.Prompt.insert_keybindings), Any})
precompile(Tuple{typeof(OhMyREPL.__init__)})
precompile(Tuple{getfield(Revise, Symbol("#92#93")), Module, String})
precompile(Tuple{typeof(OhMyREPL.BracketInserter.enable_autocomplete_brackets), Bool})
precompile(Tuple{typeof(UnitfulAtomic.__init__)})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Tuple{Float64, Base.Rational{Int64}}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Tuple{Float64, Base.Rational{Int64}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Float64, Base.Rational{Int64}}}, Tuple{Float64, Base.Rational{Int64}}, Symbol})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Tuple{Float64, Base.Rational{Int64}}}, Base.Dict{Symbol, Tuple{Float64, Base.Rational{Int64}}}})
precompile(Tuple{typeof(Unitful._basefactors), Module})
precompile(Tuple{typeof(Unitful.register), Module})
precompile(Tuple{typeof(Constants.__init__)})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:define,), Tuple{Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Core.Compiler.fieldtype_tfunc), Any, Any, Any})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:filename,), Tuple{String}}}, Type{NamedTuple{(:extract_docexprs,), Tuple{Bool}}}})
precompile(Tuple{typeof(Revise.skip_to_nonline), Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.hash), Revise.LineSkippingIterator, UInt64})
precompile(Tuple{typeof(Base.hash), Revise.RelocatableExpr, UInt64})
precompile(Tuple{typeof(OrderedCollections.hashindex), Revise.RelocatableExpr, Int64})
precompile(Tuple{typeof(OrderedCollections.rehash!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Int64})
precompile(Tuple{Type{Base.Dict{Module, Array{Expr, 1}}}})
precompile(Tuple{typeof(Base.getproperty), Array{Any, 1}, Symbol})
precompile(Tuple{getfield(Revise, Symbol("##instantiate_sigs!#71")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.instantiate_sigs!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{typeof(Base._deleteat!), Array{Tuple{Module, String}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Revise.queue_includes!), Revise.PkgData, Base.PkgId})
precompile(Tuple{typeof(Revise.parse_pkg_files), Base.PkgId})
precompile(Tuple{typeof(Revise._watch_package), Base.PkgId})
precompile(Tuple{getfield(Revise, Symbol("#34#35")){Base.PkgId}})
precompile(Tuple{typeof(MacroTools.__init__)})
precompile(Tuple{typeof(Base.nextpow), Int64, Int64})
precompile(Tuple{typeof(Random.shuffle!), Random.MersenneTwister, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.Printf.decode_dec), Float64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.to_index), Float64})
precompile(Tuple{typeof(Base.to_index), Array{String, 1}, Float64})
precompile(Tuple{typeof(Base.format_bytes), Int64})
precompile(Tuple{typeof(Base.time_print), UInt64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.string), String, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.throw_domerr_powbysq), Int64, Int64})
precompile(Tuple{typeof(Base.power_by_squaring), Int64, Int64})
precompile(Tuple{typeof(Base.:(^)), Int64, Int64})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{17}})
precompile(Tuple{typeof(Base.Grisu.fastfixedtoa), Float64, Int64, Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Grisu.grisu), Float64, Int64, Int64, Array{UInt8, 1}, Array{Base.Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.Grisu.grisu), Float64, Int64, Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.sort!), Array{String, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.By{getfield(Revise, Symbol("#23#24"))}})
precompile(Tuple{typeof(Base.sort!), Array{String, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{getfield(Revise, Symbol("#23#24"))}, Array{String, 1}})
precompile(Tuple{getfield(Base, Symbol("#689#690")){Base.UUID, String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#689#690")){Base.UUID, String}, String})
precompile(Tuple{typeof(Base.manifest_deps_get), String, Base.PkgId, String})
precompile(Tuple{typeof(Base.identify_package), Base.PkgId, String})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Revise.filter_valid_cachefiles), String, Array{String, 1}})
precompile(Tuple{typeof(Revise.pkg_fileinfo), Base.PkgId})
precompile(Tuple{typeof(OrderedCollections.rehash!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Int64})
precompile(Tuple{typeof(Base.isequal), Revise.LineSkippingIterator, Revise.LineSkippingIterator})
precompile(Tuple{typeof(Base.:(==)), Revise.RelocatableExpr, Revise.RelocatableExpr})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex2), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Revise.RelocatableExpr})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Array{Any, 1}, Revise.RelocatableExpr})
precompile(Tuple{getfield(Revise, Symbol("##instantiate_sigs!#71")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.instantiate_sigs!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{typeof(Revise.queue_includes!), Revise.PkgData, Base.PkgId})
precompile(Tuple{typeof(Revise.parse_pkg_files), Base.PkgId})
precompile(Tuple{typeof(Revise._watch_package), Base.PkgId})
precompile(Tuple{getfield(Revise, Symbol("#34#35")){Base.PkgId}})
precompile(Tuple{getfield(Base, Symbol("#Timer#505#506")), Float64, Type{Base.Timer}, Float64})
precompile(Tuple{getfield(Revise, Symbol("#72#73")){String}})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(Revise, Symbol("#72#73")){String}, Base.CoreLogging.LogState})
precompile(Tuple{typeof(Revise.watch_files_via_dir), String})
precompile(Tuple{typeof(Base.hash), Tuple{Revise.PkgData, String}, UInt64})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Tuple{Revise.PkgData, String}, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Tuple{Revise.PkgData, String}, Nothing}, Tuple{Revise.PkgData, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{Revise.PkgData, String}, Nothing}, Nothing, Tuple{Revise.PkgData, String}})
precompile(Tuple{typeof(Revise.revise_dir_queued), String})
precompile(Tuple{Revise.Rescheduler{typeof(Revise.revise_dir_queued), Tuple{String}}})
precompile(Tuple{typeof(Base.Printf.fix_dec), Base.TTY, Float64, String, Int64, Int64, Char, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.register_root_module), Module})
precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.success), typeof(Base.:(&)), Array{Base.Process, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.success), typeof(Base.:(&)), Base.IndexLinear, Array{Base.Process, 1}})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(DocStringExtensions.__init__)})
precompile(Tuple{typeof(Debugger.__init__)})
precompile(Tuple{typeof(GR.init), Bool})
precompile(Tuple{typeof(GR.__init__)})
precompile(Tuple{typeof(GR.isijulia)})
precompile(Tuple{typeof(GR.isatom)})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.GMP.MPZ.set), Base.GMP.BigInt})
precompile(Tuple{typeof(Base.deepcopy), Base.GMP.BigInt})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.GMP.BigInt, 1}, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#33#38")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#34#39")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#35#40")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#36#41")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#37#42")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Base.UUID})
precompile(Tuple{Type{NamedTuple{(:stderr,), T} where T<:Tuple}, Tuple{Base.TTY}})
precompile(Tuple{getfield(Base, Symbol("##pipeline#553")), Nothing, Nothing, Base.TTY, Bool, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{getfield(Base, Symbol("#kw##pipeline")), NamedTuple{(:stderr,), Tuple{Base.TTY}}, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{typeof(Base._spawn_primitive), String, Base.Cmd, Array{Any, 1}})
precompile(Tuple{typeof(Base.setup_stdios), getfield(Base, Symbol("#554#555")){Base.Cmd}, Array{Any, 1}})
precompile(Tuple{typeof(Base._spawn), Base.CmdRedirect, Array{Any, 1}})
precompile(Tuple{getfield(Base, Symbol("##open#563")), Bool, Bool, typeof(Base.open), Base.CmdRedirect, Base.TTY})
precompile(Tuple{typeof(Base.open), Base.CmdRedirect, String, Base.TTY})
precompile(Tuple{typeof(Base.convert), Type{IO}, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.getproperty), Base.Process, Symbol})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.write), Base.PipeEndpoint, String})
precompile(Tuple{typeof(Base.stat), Base.Libc.RawFD})
precompile(Tuple{typeof(Base.isvalid_file_crc), Base.IOStream})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Revise.filter_valid_cachefiles), String, Array{String, 1}})
precompile(Tuple{typeof(Revise.pkg_fileinfo), Base.PkgId})
precompile(Tuple{typeof(Base.read), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#280#281")){String}, String})
precompile(Tuple{typeof(Base.count), Base.Fix2{typeof(Base.isequal), Char}, Base.SubString{String}})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#kw##split_expressions!")), NamedTuple{(:filename, :extract_docexprs), Tuple{String, Bool}}, typeof(JuliaInterpreter.split_expressions!), Array{Tuple{Module, Expr}, 1}, Base.Dict{Module, Array{Expr, 1}}, Expr, Module, Expr})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##split_expressions!#31")), String, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:extract_docexprs,), Tuple{Bool}}}, typeof(JuliaInterpreter.split_expressions!), Array{Tuple{Module, Expr}, 1}, Base.Dict{Module, Array{Expr, 1}}, Expr, Module, Array{Any, 1}})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#kw##split_expressions!")), NamedTuple{(:extract_docexprs, :filename), Tuple{Bool, String}}, typeof(JuliaInterpreter.split_expressions!), Array{Tuple{Module, Expr}, 1}, Base.Dict{Module, Array{Expr, 1}}, Expr, Module, Array{Any, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Module}, Nothing})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Module, Array{Expr, 1}}, Module})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Module, Array{Expr, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Module, Array{Expr, 1}}, Module})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Module, Array{Expr, 1}}, Array{Expr, 1}, Module})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##split_expressions!#28")), Bool, String, typeof(JuliaInterpreter.split_expressions!), Array{Tuple{Module, Expr}, 1}, Base.Dict{Module, Array{Expr, 1}}, Expr, Module, Expr})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, Module, Bool})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Nothing, Revise.RelocatableExpr})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Nothing, Nothing})
precompile(Tuple{typeof(Revise.parse_source!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, String, String, Module})
precompile(Tuple{typeof(Revise.parse_source!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, String, Module})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Array{Any, 1}, Revise.RelocatableExpr})
precompile(Tuple{getfield(Revise, Symbol("##instantiate_sigs!#71")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.instantiate_sigs!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{typeof(Revise.queue_includes!), Revise.PkgData, Base.PkgId})
precompile(Tuple{typeof(Revise.parse_pkg_files), Base.PkgId})
precompile(Tuple{typeof(Revise._watch_package), Base.PkgId})
precompile(Tuple{getfield(Revise, Symbol("#34#35")){Base.PkgId}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UUID})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, UInt64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt64})
precompile(Tuple{typeof(Base.write), Base.Process, String})
precompile(Tuple{typeof(Base.show_delim_array), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64, UInt64}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64, UInt64}})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#698#700")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(LAME_jll.__init__)})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{Symbol, Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}}, Base.Pair{Symbol, Base.Dict{Base.SHA1, Union{Base.SHA1, String}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}}, Base.Pair{Symbol, Base.Dict{Base.SHA1, Union{Base.SHA1, String}}}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##load_overrides#3")), Bool, typeof(Pkg.Artifacts.load_overrides)})
precompile(Tuple{typeof(Pkg.Artifacts.process_overrides), Base.Dict{String, Any}, Base.UUID})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}}, Tuple{Base.Pair{Symbol, Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}}, Base.Pair{Symbol, Base.Dict{Base.SHA1, Union{Base.SHA1, String}}}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}}, Base.Pair{Symbol, Base.Dict{Base.SHA1, Union{Base.SHA1, String}}}}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}, Base.UUID})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_meta#20")), Pkg.BinaryPlatforms.Platform, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##artifact_meta")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#nosym#16")), String})
precompile(Tuple{Type{NamedTuple{(:libc, :compiler_abi), T} where T<:Tuple}, Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.MacOS}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.MacOS, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{Type{NamedTuple{(:libc, :compiler_abi), T} where T<:Tuple}, Tuple{Symbol, Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Symbol, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.Linux}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.Linux, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#FreeBSD#19#20")), Nothing, Nothing, Pkg.BinaryPlatforms.CompilerABI, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.FreeBSD, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#Windows#17#18")), Nothing, Nothing, Pkg.BinaryPlatforms.CompilerABI, Type{Pkg.BinaryPlatforms.Windows}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.Windows}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.Windows, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Windows})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.Windows})
precompile(Tuple{typeof(Base.filter), Function, Base.KeySet{Pkg.BinaryPlatforms.Platform, Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, typeof(Base.push!), Base.KeySet{Pkg.BinaryPlatforms.Platform, Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Set{Pkg.BinaryPlatforms.Platform}})
precompile(Tuple{typeof(Base.:(==)), Base.VersionNumber, Base.VersionNumber})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.Windows})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Nothing}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Nothing}, Nothing, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.push!), Base.Set{Pkg.BinaryPlatforms.Platform}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##ensure_artifact_installed")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_paths#9")), Bool, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_exists#11")), Bool, typeof(Pkg.Artifacts.artifact_exists), Base.SHA1})
precompile(Tuple{typeof(Base.pipeline_error), Base.ProcessChain})
precompile(Tuple{typeof(Base.read), Base.OrCmds})
precompile(Tuple{typeof(Base.read), Base.OrCmds, Type{String}})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("#28#53")){String, Base.Cmd}})
precompile(Tuple{typeof(Base.Filesystem.cd), getfield(Pkg.PlatformEngines, Symbol("#28#53")){String, Base.Cmd}, String})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Tuple, 1}, getfield(Pkg.PlatformEngines, Symbol("#36#61"))}})
precompile(Tuple{typeof(Base.success), Base.Cmd})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##probe_cmd#14")), Bool, typeof(Pkg.PlatformEngines.probe_cmd), Base.Cmd})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Tuple, 1}, getfield(Pkg.PlatformEngines, Symbol("#40#65"))}})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##probe_platform_engines!#15")), Bool, typeof(Pkg.PlatformEngines.probe_platform_engines!)})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##verify#98")), Bool, Bool, String, typeof(Pkg.PlatformEngines.verify), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download#82")), Bool, typeof(Pkg.PlatformEngines.download), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify#83")), Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify), String, String, String})
precompile(Tuple{getfield(Base, Symbol("##run#565")), Bool, typeof(Base.run), Base.CmdRedirect})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##get_tarball_contents#84")), Bool, typeof(Pkg.PlatformEngines.get_tarball_contents), String})
precompile(Tuple{typeof(Base.convert), Type{Nothing}, Base.SubString{String}})
precompile(Tuple{typeof(Base.convert), Type{Base.Pair{Nothing, String}}, Base.Pair{Base.SubString{String}, String}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{Nothing, String}, 1}, Base.Pair{Base.SubString{String}, String}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Nothing, String}, 1}, Base.Pair{Base.SubString{String}, String}, Base.Generator{Array{Array{Union{Nothing, Base.SubString{String}}, 1}, 1}, getfield(Pkg.PlatformEngines, Symbol("#88#90"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Array{Union{Nothing, Base.SubString{String}}, 1}, 1}, getfield(Pkg.PlatformEngines, Symbol("#88#90"))}})
precompile(Tuple{typeof(Pkg.PlatformEngines.list_tarball_symlinks), String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("#kw##cptree")), NamedTuple{(:force, :follow_symlinks), Tuple{Bool, Bool}}, typeof(Base.Filesystem.cptree), String, String})
precompile(Tuple{typeof(Base.Filesystem.sendfile), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##cptree#11")), Bool, Bool, typeof(Base.Filesystem.cptree), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##cp#12")), Bool, Bool, typeof(Base.Filesystem.cp), String, String})
precompile(Tuple{typeof(Base.write), Base.IOStream, Nothing})
precompile(Tuple{typeof(Pkg.PlatformEngines.probe_symlink_creation), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##unpack#91")), Bool, typeof(Pkg.PlatformEngines.unpack), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify_unpack#96")), Nothing, Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify_unpack), String, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##artifact_paths")), NamedTuple{(:honor_overrides,), Tuple{Bool}}, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_path#10")), Bool, typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{typeof(Base.Filesystem.rename), String, String})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Pkg.Artifacts, Symbol("#39#40")){Bool, String, String}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##download_artifact#38")), Bool, typeof(Pkg.Artifacts.download_artifact), Base.SHA1, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(Libdl.dlopen), String})
precompile(Tuple{typeof(Zlib_jll.__init__)})
precompile(Tuple{typeof(Bzip2_jll.__init__)})
precompile(Tuple{typeof(FreeType2_jll.__init__)})
precompile(Tuple{typeof(FriBidi_jll.__init__)})
precompile(Tuple{typeof(LibVPX_jll.__init__)})
precompile(Tuple{typeof(x265_jll.__init__)})
precompile(Tuple{typeof(x264_jll.__init__)})
precompile(Tuple{typeof(OpenSSL_jll.__init__)})
precompile(Tuple{typeof(Ogg_jll.__init__)})
precompile(Tuple{typeof(Opus_jll.__init__)})
precompile(Tuple{typeof(libfdk_aac_jll.__init__)})
precompile(Tuple{typeof(libvorbis_jll.__init__)})
precompile(Tuple{typeof(libass_jll.__init__)})
precompile(Tuple{typeof(FFMPEG_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(FFMPEG_jll, Symbol("#13#15")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(FFMPEG_jll, Symbol("#14#16")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(PlotUtils.__init__)})
precompile(Tuple{typeof(Requires.__init__)})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(PlotThemes.add_theme), Symbol, PlotThemes.PlotTheme})
precompile(Tuple{typeof(Requires.listenpkg), Any, Base.PkgId})
precompile(Tuple{typeof(PlotThemes.__init__)})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, PlotUtils.ColorLibrary}, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Array{ColorTypes.RGBA{Float64}, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Array{ColorTypes.RGBA{Float64}, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Array{ColorTypes.RGBA{Float64}, 1}}, Array{ColorTypes.RGBA{Float64}, 1}, Symbol})
precompile(Tuple{typeof(PlotUtils.register_gradient_colors), Symbol, Array{ColorTypes.RGBA{Float64}, 1}, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, PlotThemes.PlotTheme}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, PlotThemes.PlotTheme}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, PlotThemes.PlotTheme}, PlotThemes.PlotTheme, Symbol})
precompile(Tuple{typeof(Base.eltype), Type{C}} where C<:(ColorTypes.Colorant{T, N} where N where T))
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Colorant{T, N}}} where N where T)
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.ColorAlpha{ColorTypes.RGB{Float64}, Float64, 4}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGBA{Float64}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.AbstractRGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Core.Compiler._typename), TypeVar})
precompile(Tuple{typeof(ColorTypes.basetype), Type{T} where T})
precompile(Tuple{typeof(Base.typename), DataType})
precompile(Tuple{typeof(ColorTypes.color_type), Type{ColorTypes.ColorAlpha{ColorTypes.RGB{Float64}, Float64, 4}}})
precompile(Tuple{typeof(ColorTypes.color_type), Type{ColorTypes.RGBA{Float64}}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{ColorTypes.RGBA{Float64}, 1}, Base.IndexLinear, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Array{ColorTypes.RGBA{Float64}, 1}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Symbol})
precompile(Tuple{typeof(PlotUtils.register_gradient_colors), Symbol, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Base.PkgId, Array{Function, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Function, 1}, Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{typeof(Base.get!), getfield(Requires, Symbol("#1#2")), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.push!), Array{Function, 1}, Function})
precompile(Tuple{typeof(Plots._plots_defaults)})
precompile(Tuple{typeof(Plots._get_defaults), Symbol})
precompile(Tuple{getfield(Plots, Symbol("##default#122")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.default)})
precompile(Tuple{getfield(Plots, Symbol("##_theme#131")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots._theme), Symbol, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.__init__)})
precompile(Tuple{typeof(Revise.filter_valid_cachefiles), String, Array{String, 1}})
precompile(Tuple{typeof(Revise.pkg_fileinfo), Base.PkgId})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Nothing, Revise.RelocatableExpr})
precompile(Tuple{typeof(Revise.parse_source!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, String, String, Module})
precompile(Tuple{typeof(Revise.parse_source!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, String, Module})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Array{Any, 1}, Revise.RelocatableExpr})
precompile(Tuple{getfield(Revise, Symbol("##instantiate_sigs!#71")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.instantiate_sigs!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{typeof(Revise.queue_includes!), Revise.PkgData, Base.PkgId})
precompile(Tuple{typeof(Revise.parse_pkg_files), Base.PkgId})
precompile(Tuple{typeof(Revise._watch_package), Base.PkgId})
precompile(Tuple{getfield(Revise, Symbol("#34#35")){Base.PkgId}})
precompile(Tuple{getfield(Base, Symbol("#770#772")){Bool, Bool, Bool, Bool}, Module})
precompile(Tuple{typeof(REPL.Terminals.hascolor), REPL.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.banner), REPL.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.VersionNumber})
precompile(Tuple{typeof(Base.Multimedia.popdisplay), Plots.PlotsDisplay})
precompile(Tuple{getfield(Plots, Symbol("#302#329")), REPL.LineEditREPL})
precompile(Tuple{typeof(OhMyREPL.Prompt.insert_keybindings), Any})
precompile(Tuple{typeof(OhMyREPL.update_interface), REPL.LineEdit.ModalInterface})
precompile(Tuple{getfield(OhMyREPL, Symbol("#1#4")), REPL.LineEditREPL})
precompile(Tuple{typeof(REPL.LineEdit.normalize_keys), Base.Dict{K, V} where V where K})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Dict{Any, Any}, 1}, Base.Dict{Any, Any}, Base.Generator{Array{Base.Dict{Any, Any}, 1}, typeof(REPL.LineEdit.normalize_keys)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Base.Dict{Any, Any}, 1}, Base.Generator{Array{Base.Dict{Any, Any}, 1}, typeof(REPL.LineEdit.normalize_keys)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(REPL.LineEdit.keymap_unify), Any})
precompile(Tuple{typeof(REPL.setup_interface), REPL.LineEditREPL, Bool, Any})
precompile(Tuple{getfield(REPL, Symbol("##setup_interface#45")), Bool, Any, typeof(REPL.setup_interface), REPL.LineEditREPL})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, REPL.LineEdit.Prompt}, Vararg{Base.Pair{Symbol, REPL.LineEdit.Prompt}, N} where N})
precompile(Tuple{Type{REPL.REPLHistoryProvider}, Any})
precompile(Tuple{Type{REPL.REPLHistoryProvider}, Any, Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(REPL.hist_getline), Any})
precompile(Tuple{typeof(REPL.hist_from_file), Any, Any, Any})
precompile(Tuple{typeof(Base.peek), Base.IOStream})
precompile(Tuple{Type{Char}, Int32})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#44#75"))}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.normalize_key), AbstractString})
precompile(Tuple{typeof(REPL.LineEdit.normalize_key), Integer})
precompile(Tuple{typeof(REPL.LineEdit.keymap_merge), Any, Any})
precompile(Tuple{typeof(Base.filter), getfield(REPL.LineEdit, Symbol("#29#30")), Base.Dict{Any, Any}})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##add_nested_key!#22")), Any, typeof(REPL.LineEdit.add_nested_key!), Base.Dict{K, V} where V where K, Any, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#kw##add_nested_key!")), Any, typeof(REPL.LineEdit.add_nested_key!), Base.Dict{K, V} where V where K, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.fixup_keymaps!), Base.Dict{K, V} where V where K, Any, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.getEntry), Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.validate_keymap), Any})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#73#104")){REPL.LineEdit.HistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, getfield(REPL, Symbol("#49#58")){REPL.LineEdit.Prompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#248#252")){REPL.LineEdit.PrefixHistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, getfield(REPL, Symbol("#39#42")){REPL.LineEdit.Prompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.getindex), Array{REPL.LineEdit.TextInterface, 1}, Int64})
precompile(Tuple{typeof(Base.vect), Base.Dict{Any, Any}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Dict{Any, Any}, Base.Dict{Char, Any}})
precompile(Tuple{Type{Array{Base.Dict{K, Any} where K, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Dict{K, Any} where K, 1}, Tuple{Base.Dict{Any, Any}, Base.Dict{Char, Any}}})
precompile(Tuple{typeof(REPL.LineEdit.keymap), Array{#s627, N} where N where #s627<:(Base.Dict{K, V} where V where K)})
precompile(Tuple{typeof(Base.reverse), Array{Base.Dict{K, Any} where K, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.reverse), Array{Base.Dict{K, Any} where K, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{Base.Dict{K, Any} where K, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(REPL.LineEdit.normalize_keys), Array{Base.Dict{K, Any} where K, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Dict{Any, Any}, 1}, Base.Dict{Any, Any}, Base.Generator{Array{Base.Dict{K, Any} where K, 1}, typeof(REPL.LineEdit.normalize_keys)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Base.Dict{K, Any} where K, 1}, Base.Generator{Array{Base.Dict{K, Any} where K, 1}, typeof(REPL.LineEdit.normalize_keys)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.Dict{K, Any} where K, 1}, Base.Generator{Array{Base.Dict{K, Any} where K, 1}, typeof(REPL.LineEdit.normalize_keys)}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{Char, Any}, String})
precompile(Tuple{Type{Base.Pair{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}}, Any, Any})
precompile(Tuple{Type{Base.Pair{String, getfield(OhMyREPL, Symbol("#3#6")){REPL.LineEdit.PrefixHistoryPrompt}}}, Any, Any})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}, Base.Pair{String, getfield(OhMyREPL, Symbol("#3#6")){REPL.LineEdit.PrefixHistoryPrompt}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}, Base.Pair{String, getfield(OhMyREPL, Symbol("#3#6")){REPL.LineEdit.PrefixHistoryPrompt}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}, Base.Pair{String, getfield(OhMyREPL, Symbol("#3#6")){REPL.LineEdit.PrefixHistoryPrompt}}}})
precompile(Tuple{Type{Base.Dict{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}, Function, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}, Tuple{Base.Pair{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}, Base.Pair{String, getfield(OhMyREPL, Symbol("#3#6")){REPL.LineEdit.PrefixHistoryPrompt}}}, Int64})
precompile(Tuple{Type{Base.Dict{String, Function}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}, Type{String}, Type{Function}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Function}, Base.Dict{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Function}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Function}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Function}, Function, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Function}, Tuple{Base.Pair{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}, Base.Pair{String, getfield(OhMyREPL, Symbol("#3#6")){REPL.LineEdit.PrefixHistoryPrompt}}}, Int64})
precompile(Tuple{typeof(Base.vect), Base.Dict{String, Function}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Dict{String, Function}, Base.Dict{Char, Any}})
precompile(Tuple{Type{Array{Base.Dict{K, V} where V where K, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Dict{K, V} where V where K, 1}, Tuple{Base.Dict{String, Function}, Base.Dict{Char, Any}}})
precompile(Tuple{typeof(Base.reverse), Array{Base.Dict{K, V} where V where K, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.reverse), Array{Base.Dict{K, V} where V where K, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{Base.Dict{K, V} where V where K, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(REPL.LineEdit.normalize_keys), Array{Base.Dict{K, V} where V where K, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Dict{Any, Any}, 1}, Base.Dict{Any, Any}, Base.Generator{Array{Base.Dict{K, V} where V where K, 1}, typeof(REPL.LineEdit.normalize_keys)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Base.Dict{K, V} where V where K, 1}, Base.Generator{Array{Base.Dict{K, V} where V where K, 1}, typeof(REPL.LineEdit.normalize_keys)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.Dict{K, V} where V where K, 1}, Base.Generator{Array{Base.Dict{K, V} where V where K, 1}, typeof(REPL.LineEdit.normalize_keys)}})
precompile(Tuple{typeof(Base._iterate), Base.Dict{String, Function}, Int64})
precompile(Tuple{getfield(Main, Symbol("#3#5")), REPL.LineEditREPL})
precompile(Tuple{typeof(Pkg.REPLMode.repl_init), REPL.LineEditREPL})
precompile(Tuple{getfield(Pkg, Symbol("#1#2")), REPL.LineEditREPL})
precompile(Tuple{typeof(Pkg.REPLMode.create_mode), REPL.LineEditREPL, REPL.LineEdit.Prompt})
precompile(Tuple{typeof(REPL.run_frontend), REPL.StreamREPL, REPL.REPLBackendRef})
precompile(Tuple{typeof(REPL.run_frontend), REPL.LineEditREPL, REPL.REPLBackendRef})
precompile(Tuple{typeof(REPL.run_frontend), REPL.BasicREPL, REPL.REPLBackendRef})
precompile(Tuple{typeof(REPL.run_repl), REPL.AbstractREPL, Any})
precompile(Tuple{typeof(REPL.Terminals.raw!), REPL.Terminals.TTYTerminal, Bool})
precompile(Tuple{typeof(REPL.LineEdit.prompt!), REPL.Terminals.TextTerminal, REPL.LineEdit.ModalInterface, REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.run_interface), REPL.Terminals.TextTerminal, REPL.LineEdit.ModalInterface, REPL.LineEdit.MIState})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Nothing}}, Ptr{Nothing}})
precompile(Tuple{typeof(Revise.wait_steal_repl_backend)})
precompile(Tuple{getfield(Main, Symbol("#4#6"))})
precompile(Tuple{getfield(Revise, Symbol("#84#86")){REPL.REPLBackend}})
precompile(Tuple{typeof(REPL.LineEdit.activate), REPL.LineEdit.TextInterface, REPL.LineEdit.ModeState, Any, REPL.Terminals.TextTerminal})
precompile(Tuple{typeof(REPL.LineEdit.refresh_line), Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#17")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Union{REPL.LineEdit.PrefixSearchState, REPL.LineEdit.PromptState}})
precompile(Tuple{typeof(REPL.LineEdit.cancel_beep), REPL.LineEdit.PromptState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#37")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Union{REPL.LineEdit.PrefixSearchState, REPL.LineEdit.PromptState}})
precompile(Tuple{typeof(REPL.LineEdit.match_input), Base.Dict{K, V} where V where K, Any})
precompile(Tuple{typeof(Base.read), Base.Filesystem.File, Type{Char}})
precompile(Tuple{typeof(REPL.LineEdit.match_input), Base.Dict{K, V} where V where K, Any, Any, Any, Any})
precompile(Tuple{typeof(Revise.add_definitions_from_repl), String})
precompile(Tuple{typeof(Revise.read_from_cache), Revise.PkgData, String})
precompile(Tuple{typeof(Revise.maybe_parse_from_cache!), Revise.PkgData, String})
precompile(Tuple{typeof(Revise.delete_missing!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{typeof(Revise.handle_deletions), Revise.PkgData, String})
precompile(Tuple{typeof(Base.push!), Array{OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, 1}, Nothing})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Tuple{Revise.PkgData, String}, Tuple{Exception, Any}}, Tuple{Revise.PkgData, String}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Tuple{Exception, Any}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Tuple{Revise.PkgData, String}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Tuple{Revise.PkgData, String}, Tuple{Exception, Any}}, Int64})
precompile(Tuple{typeof(Revise.init_watching), Revise.PkgData, Tuple{String}})
precompile(Tuple{typeof(Revise.maybe_add_includes_to_pkgdata!), Revise.PkgData, String, Array{Base.Pair{Module, Array{String, 1}}, 1}})
precompile(Tuple{typeof(Revise.errors), Array{Any, 1}})
precompile(Tuple{typeof(Revise.queue_includes), Module})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Tuple{Revise.PkgData, String}, Nothing}, Tuple{Revise.PkgData, String}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Tuple{Revise.PkgData, String}, Nothing}})
precompile(Tuple{typeof(Base.to_index), Array{Revise.FileInfo, 1}, Nothing})
precompile(Tuple{typeof(Revise.revise)})
precompile(Tuple{typeof(Revise.run_backend), REPL.REPLBackend})
precompile(Tuple{getfield(Revise, Symbol("#85#87")){REPL.REPLBackend}})
precompile(Tuple{typeof(Base.uv_alloc_buf), Ptr{Nothing}, UInt64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.uv_readcb), Ptr{Nothing}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.read), REPL.Terminals.TTYTerminal, Type{Char}})
precompile(Tuple{typeof(Base.:(==)), Array{Char, 1}, WeakRef})
precompile(Tuple{typeof(REPL.LineEdit.update_key_repeats), REPL.LineEdit.MIState, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#27#28")){getfield(OhMyREPL.Prompt, Symbol("#2#27")), String}, Any, Any})
precompile(Tuple{Type{Base.Val{3}}})
precompile(Tuple{typeof(OhMyREPL.Prompt.get_prompt), Any})
precompile(Tuple{typeof(Base.fill!), Array{Crayons.Crayon, 1}, Crayons.Crayon})
precompile(Tuple{typeof(OhMyREPL.apply_passes!), OhMyREPL.PassHandler, Array{Tokenize.Tokens.Token, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.map), getfield(Crayons, Symbol("#4#6")), Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.map), getfield(Crayons, Symbol("#5#7")), Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Crayons.to_256_colors), Crayons.ANSIColor})
precompile(Tuple{typeof(Crayons._print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Crayons.Crayon})
precompile(Tuple{typeof(Crayons.to_system_colors), Crayons.ANSIColor})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Crayons.Crayon})
precompile(Tuple{typeof(Tokenize.Tokens.untokenize), Tokenize.Tokens.Token})
precompile(Tuple{typeof(OhMyREPL.untokenize_with_ANSI), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(OhMyREPL.Prompt.rewrite_with_ANSI), Any, Bool})
precompile(Tuple{getfield(OhMyREPL.Prompt, Symbol("#2#27")), Any, Any, Any})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.TTY})
precompile(Tuple{typeof(Base.write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.getindex), Array{UInt8, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.unsafe_write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.seekstart), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{Tokenize.Lexers.Lexer{IO_t, T} where T<:Tokenize.Tokens.AbstractToken where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Type{Tokenize.Tokens.Token}})
precompile(Tuple{Type{Tokenize.Lexers.Lexer{IO_t, T} where T<:Tokenize.Tokens.AbstractToken where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Tokenize.Lexers.readchar), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Lexers.emit), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tokenize.Tokens.Kind, Tokenize.Tokens.TokenError})
precompile(Tuple{typeof(Tokenize.Lexers.lex_comment), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Bool})
precompile(Tuple{typeof(Tokenize.Lexers.lex_prime), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Lexers.dotop2), Char, Char})
precompile(Tuple{typeof(Tokenize.Lexers.is_cat_id_start), Char, Int32})
precompile(Tuple{typeof(Tokenize.Lexers.is_identifier_start_char), Char})
precompile(Tuple{typeof(Tokenize.Lexers.is_operator_start_char), UInt32})
precompile(Tuple{typeof(Tokenize.Lexers.accept_number), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, typeof(Tokenize.Lexers.ishex)})
precompile(Tuple{typeof(Tokenize.Lexers.lex_digit), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Tokenize.Lexers.lex_dot), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Lexers.is_identifier_char), Char})
precompile(Tuple{typeof(Tokenize.Lexers.readrest), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char, Char, Char, Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char, Char, Char, Char, Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Char, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char, Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char, Char, Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.lex_identifier), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Char})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Char, Tokenize.Tokens.Kind}, Char})
precompile(Tuple{typeof(Tokenize.Lexers.next_token), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Bool})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.collect), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{OhMyREPL.Passes.SyntaxHighlighter.SyntaxHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(Base.to_index), Array{Int64, 1}, Nothing})
precompile(Tuple{typeof(Base.to_index), Array{Tokenize.Tokens.Kind, 1}, Nothing})
precompile(Tuple{typeof(OhMyREPL.Passes.BracketHighlighter.bracket_match), Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{OhMyREPL.Passes.BracketHighlighter.BracketHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(OhMyREPL.Passes.RainbowBrackets.get_color), OhMyREPL.Passes.RainbowBrackets.RainbowBracketsSettings, Tokenize.Tokens.Kind, Int64})
precompile(Tuple{OhMyREPL.Passes.RainbowBrackets.RainbowBracketsSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(OhMyREPL.Prompt.refresh_multi_line), Any, Any, Any, Any, Any})
precompile(Tuple{getfield(Base, Symbol("#kw##readline")), NamedTuple{(:keep,), Tuple{Bool}}, typeof(Base.readline), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.flush), REPL.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.print_to_string), Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64, String, Vararg{Any, N} where N})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#27#28")){getfield(OhMyREPL.BracketInserter, Symbol("#6#13")){Array{Char, 1}, Array{Char, 1}}, String}, Any, Any})
precompile(Tuple{typeof(OhMyREPL.BracketInserter.peek), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(REPL.LineEdit.edit_move_right), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(REPL.LineEdit.edit_backspace), REPL.LineEdit.PromptState})
precompile(Tuple{typeof(Base.to_index), Array{Char, 1}, Nothing})
precompile(Tuple{getfield(OhMyREPL.BracketInserter, Symbol("#6#13")){Array{Char, 1}, Array{Char, 1}}, REPL.LineEdit.MIState, REPL.LineEditREPL, String})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##edit_splice!#18")), Bool, typeof(REPL.LineEdit.edit_splice!), Any, Base.Pair{#s627, #s626} where #s626<:Integer where #s627<:Integer, AbstractString})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#27#28")){getfield(OhMyREPL.BracketInserter, Symbol("#1#8")){Array{Char, 1}, Char, Char}, String}, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.setmark), REPL.LineEdit.MIState, Bool})
precompile(Tuple{typeof(REPL.LineEdit.set_action!), REPL.LineEdit.MIState, Symbol})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert), REPL.LineEdit.MIState, Any})
precompile(Tuple{typeof(REPL.LineEdit.edit_move_left), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert), REPL.LineEdit.PromptState, Any})
precompile(Tuple{getfield(OhMyREPL.BracketInserter, Symbol("#1#8")){Array{Char, 1}, Char, Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any, N} where N})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#27#28")){getfield(OhMyREPL.BracketInserter, Symbol("#5#12")){Char}, String}, Any, Any})
precompile(Tuple{getfield(OhMyREPL.BracketInserter, Symbol("#5#12")){Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any, N} where N})
precompile(Tuple{typeof(Tokenize.Lexers.string_terminated), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Tokenize.Lexers.read_string), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Tokenize.Lexers.lex_quote), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Bool})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#27#28")){getfield(OhMyREPL.BracketInserter, Symbol("#2#9")){Char}, String}, Any, Any})
precompile(Tuple{getfield(OhMyREPL.BracketInserter, Symbol("#2#9")){Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any, N} where N})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#27#28")){getfield(OhMyREPL.Prompt, Symbol("#22#47")), String}, Any, Any})
precompile(Tuple{typeof(OhMyREPL._check_pass_name), OhMyREPL.PassHandler, String, Bool})
precompile(Tuple{typeof(OhMyREPL.enable_pass!), OhMyREPL.PassHandler, String, Bool})
precompile(Tuple{typeof(REPL.LineEdit.add_history), REPL.LineEdit.PromptState})
precompile(Tuple{typeof(REPL.LineEdit.add_history), REPL.LineEdit.MIState})
precompile(Tuple{typeof(OhMyREPL.Prompt._commit_line), Any, Any, Any})
precompile(Tuple{getfield(OhMyREPL.Prompt, Symbol("#22#47")), Any, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.add_history), REPL.REPLHistoryProvider, Any})
precompile(Tuple{typeof(REPL.reset), REPL.LineEditREPL})
precompile(Tuple{getfield(REPL, Symbol("#do_respond#38")){Bool, getfield(REPL, Symbol("#48#57")){REPL.LineEditREPL, REPL.REPLHistoryProvider}, REPL.LineEditREPL, REPL.LineEdit.Prompt}, Any, Any, Any})
precompile(Tuple{typeof(Base.println), Base.TTY, String})
precompile(Tuple{typeof(REPL.ends_with_semicolon), AbstractString})
precompile(Tuple{typeof(REPL.print_response), REPL.AbstractREPL, Any, Bool, Bool})
precompile(Tuple{typeof(REPL.LineEdit.cancel_beep), REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.transition), Function, REPL.LineEdit.MIState, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#14")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Tokenize.Tokens.Kind, Symbol}, Tokenize.Tokens.Kind})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#27#28")){getfield(OhMyREPL.Prompt, Symbol("#25#50")), String}, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.complete_line), REPL.LineEdit.MIState})
precompile(Tuple{getfield(OhMyREPL.Prompt, Symbol("#25#50")), Any, Any, Any})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), Expr, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{typeof(REPL.LineEdit.show_completions), REPL.LineEdit.PromptState, Any})
precompile(Tuple{typeof(REPL.LineEdit.common_prefix), Any})
precompile(Tuple{typeof(REPL.LineEdit.complete_line), REPL.LineEdit.PromptState, Any})
precompile(Tuple{typeof(REPL.REPLCompletions.completions), String, Int64})
precompile(Tuple{typeof(Base._collect), Array{REPL.REPLCompletions.Completion, 1}, Base.Generator{Array{REPL.REPLCompletions.Completion, 1}, typeof(REPL.REPLCompletions.completion_text)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(REPL.LineEdit.complete_line), REPL.REPLCompletionProvider, Any})
precompile(Tuple{typeof(Base.incomplete_tag), Expr})
precompile(Tuple{typeof(REPL.REPLCompletions.complete_methods), Expr, Module})
precompile(Tuple{typeof(REPL.REPLCompletions.complete_symbol), String, getfield(REPL.REPLCompletions, Symbol("#21#25")), Module})
precompile(Tuple{typeof(Base.unique), Array{REPL.REPLCompletions.Completion, 1}})
precompile(Tuple{typeof(REPL.REPLCompletions.complete_symbol), String, getfield(REPL.REPLCompletions, Symbol("#22#26")), Module})
precompile(Tuple{typeof(REPL.REPLCompletions.completions), String, Int64, Module})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Array{REPL.REPLCompletions.Completion, 1}, typeof(REPL.REPLCompletions.completion_text)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{REPL.REPLCompletions.Completion, 1}, typeof(REPL.REPLCompletions.completion_text)}, Int64})
precompile(Tuple{typeof(REPL.LineEdit.edit_splice!), Any, Base.Pair{#s627, #s626} where #s626<:Integer where #s627<:Integer, AbstractString})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.ModeState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#13")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.ModeState})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{Unitful.FreeUnits{(Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}, Bool}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{Unitful.FreeUnits{(Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}, Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Unitful.FreeUnits{(Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Unitful.FreeUnits{(Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Unitful.FreeUnits{(Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, Any})
precompile(Tuple{typeof(Base.allocatedinline), Type{Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}}})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Unitful.FreeUnits{(Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, REPL.Terminals.TTYTerminal, Base.Pair{Symbol, Bool}})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#145#149")), Tuple{Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}}}, getfield(Unitful, Symbol("#144#148"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#145#149")), Tuple{Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}}}, getfield(Unitful, Symbol("#144#148"))}})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#147#151")), Tuple{Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}}}, getfield(Unitful, Symbol("#146#150"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#147#151")), Tuple{Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}}}, getfield(Unitful, Symbol("#146#150"))}})
precompile(Tuple{typeof(Base.vcat), Array{Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}, 1}, Array{Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Int64, String}, Int64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.print_to_string), Base.Rational{Int64}})
precompile(Tuple{typeof(Unitful.superscript), Base.Rational{Int64}})
precompile(Tuple{typeof(Unitful.showrep), Base.IOContext{REPL.Terminals.TTYTerminal}, Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}})
precompile(Tuple{getfield(Unitful, Symbol("#142#143")){Base.IOContext{REPL.Terminals.TTYTerminal}, String}, Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Unitful.FreeUnits{(Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Multimedia.MIME{Symbol("text/plain")}, Unitful.FreeUnits{(Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_whitespace), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_colon), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{getfield(DanUtils, Symbol("#@AutoParm")), LineNumberNode, Module, Any})
precompile(Tuple{typeof(MacroTools.block), Expr})
precompile(Tuple{typeof(DanUtils.iterflatten), Expr})
precompile(Tuple{typeof(Base.map), Function, Array{Any, 1}})
precompile(Tuple{typeof(MacroTools.walk), Expr, Function, typeof(DanUtils.my_flatten1)})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}, Array{Any, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}})
precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}})
precompile(Tuple{getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}, Expr})
precompile(Tuple{getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}, Bool})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Bool}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Bool, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Int64})
precompile(Tuple{getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}, Symbol})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Bool, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Bool, 1}, Symbol, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Int64, Int64})
precompile(Tuple{getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}, LineNumberNode})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{LineNumberNode}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{LineNumberNode, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{LineNumberNode, 1}, LineNumberNode, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Symbol}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Int64})
precompile(Tuple{typeof(DanUtils.my_flatten1), Expr})
precompile(Tuple{typeof(MacroTools.isexpr), LineNumberNode, Symbol})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Expr}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DanUtils, Symbol("#91#98")), Array{Any, 1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Expr}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Array{Any, 1}, getfield(DanUtils, Symbol("#91#98"))}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(DanUtils, Symbol("#91#98"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(DanUtils, Symbol("#91#98"))}})
precompile(Tuple{typeof(Base.filter), getfield(MacroTools, Symbol("#15#17")), Array{Any, 1}})
precompile(Tuple{typeof(Base.filter), getfield(MacroTools, Symbol("#16#18")), Array{Any, 1}})
precompile(Tuple{typeof(MacroTools.rmlines), Expr})
precompile(Tuple{typeof(MacroTools.unblock), Expr})
precompile(Tuple{typeof(MacroTools.normalise), Expr})
precompile(Tuple{typeof(MacroTools.bname), Symbol})
precompile(Tuple{typeof(Base.:(==)), WeakRef, Expr})
precompile(Tuple{typeof(MacroTools.nomatch), Symbol, Expr})
precompile(Tuple{typeof(Base.isequal), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(MacroTools.store!), Base.Dict{Any, Any}, Symbol, Expr})
precompile(Tuple{typeof(MacroTools.isslurp), Symbol})
precompile(Tuple{typeof(Base.:(==)), WeakRef, Array{Any, 1}})
precompile(Tuple{typeof(MacroTools.nomatch), Symbol, Array{Any, 1}})
precompile(Tuple{typeof(MacroTools.store!), Base.Dict{Any, Any}, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(MacroTools.match), Expr, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.trymatch), Expr, Expr})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.esc), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Any, 1}, Array{Any, 1}}}, getfield(DanUtils, Symbol("#93#100"))}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Any, 1}, Array{Any, 1}}}, getfield(DanUtils, Symbol("#93#100"))}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Expr, 1}, Array{Any, 1}}}, getfield(DanUtils, Symbol("#94#101"))}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Expr, 1}, Array{Any, 1}}}, getfield(DanUtils, Symbol("#94#101"))}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.esc), Tuple{Base.Broadcast.Extruded{Array{Expr, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.findprev), getfield(DanUtils, Symbol("#95#102")), Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Any, 1}, Base.IndexLinear, Array{Expr, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(DanUtils, Symbol("#97#104")), Base.Iterators.Zip{Tuple{Array{Any, 1}, Array{Any, 1}}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(DanUtils, Symbol("#97#104")), Base.Iterators.Zip{Tuple{Array{Any, 1}, Array{Any, 1}}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.grow_to!), Array{Expr, 1}, Base.Generator{Base.Iterators.Filter{getfield(DanUtils, Symbol("#97#104")), Base.Iterators.Zip{Tuple{Array{Any, 1}, Array{Any, 1}}}}, getfield(DanUtils, Symbol("#96#103"))}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.grow_to!), Array{Expr, 1}, Base.Generator{Base.Iterators.Filter{getfield(DanUtils, Symbol("#97#104")), Base.Iterators.Zip{Tuple{Array{Any, 1}, Array{Any, 1}}}}, getfield(DanUtils, Symbol("#96#103"))}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Expr, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Expr, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(<)), Nothing, Int64})
precompile(Tuple{getfield(DanUtils, Symbol("#91#98")), Expr})
precompile(Tuple{typeof(Base.:(==)), Expr, Symbol})
precompile(Tuple{typeof(MacroTools.isbinding), Expr})
precompile(Tuple{typeof(MacroTools.blockunify), Expr, Expr})
precompile(Tuple{typeof(MacroTools.normalise), Symbol})
precompile(Tuple{typeof(MacroTools.nomatch), Symbol, Symbol})
precompile(Tuple{typeof(MacroTools.store!), Base.Dict{Any, Any}, Symbol, Symbol})
precompile(Tuple{typeof(MacroTools.match), Symbol, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.match_inner), Expr, Expr, Base.Dict{Any, Any}})
precompile(Tuple{getfield(MacroTools, Symbol("#16#18")), Bool})
precompile(Tuple{getfield(MacroTools, Symbol("#16#18")), Symbol})
precompile(Tuple{getfield(MacroTools, Symbol("#16#18")), Expr})
precompile(Tuple{typeof(Base.filter), typeof(MacroTools.isslurp), Array{Any, 1}})
precompile(Tuple{typeof(MacroTools.slurprange), Array{Any, 1}})
precompile(Tuple{typeof(MacroTools.isslurp), Bool})
precompile(Tuple{typeof(MacroTools.inrange), Int64, Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(MacroTools.normalise), Bool})
precompile(Tuple{typeof(MacroTools.blockunify), Bool, Bool})
precompile(Tuple{typeof(MacroTools.nomatch), Bool, Bool})
precompile(Tuple{typeof(MacroTools.match), Bool, Bool, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Symbol, Symbol})
precompile(Tuple{getfield(MacroTools, Symbol("#16#18")), LineNumberNode})
precompile(Tuple{typeof(MacroTools.unblock), Symbol})
precompile(Tuple{typeof(MacroTools.isexpr), Symbol, Symbol})
precompile(Tuple{typeof(Base.:(==)), Symbol, Symbol})
precompile(Tuple{typeof(MacroTools.blockunify), Symbol, Expr})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{Any, Any}, Nothing})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, Symbol, Nothing})
precompile(Tuple{typeof(MacroTools.trymatch), MacroTools.OrBind, Symbol})
precompile(Tuple{typeof(MacroTools.normalise), MacroTools.OrBind})
precompile(Tuple{typeof(MacroTools.match), MacroTools.OrBind, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.match_inner), MacroTools.OrBind, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.match), Expr, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.trymatch), Expr, Symbol})
precompile(Tuple{typeof(MacroTools.blockunify), Expr, Symbol})
precompile(Tuple{typeof(MacroTools.nomatch), Expr, Symbol})
precompile(Tuple{typeof(MacroTools.match_inner), Expr, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.map), Function, Base.Iterators.Enumerate{Array{Any, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DanUtils, Symbol("#92#99")){Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}}, Base.Iterators.Enumerate{Array{Any, 1}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, getfield(DanUtils, Symbol("#92#99")){Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, getfield(DanUtils, Symbol("#92#99")){Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}}}})
precompile(Tuple{typeof(MacroTools.trymatch), MacroTools.OrBind, Expr})
precompile(Tuple{typeof(Base.map), typeof(Base.Unicode.uppercase), String})
precompile(Tuple{getfield(DanUtils, Symbol("#92#99")){Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}}, Tuple{Int64, Expr}})
precompile(Tuple{typeof(MacroTools.match), MacroTools.OrBind, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.blockunify), MacroTools.OrBind, Expr})
precompile(Tuple{typeof(MacroTools.match_inner), MacroTools.OrBind, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Symbol}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Tuple{Symbol}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.esc), Tuple{Tuple{Symbol}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.esc), Tuple{Tuple{Symbol}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.esc), Tuple{Tuple{Symbol}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.esc), Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.esc), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.esc), Tuple{Array{Any, 1}}}})
precompile(Tuple{getfield(DanUtils, Symbol("#94#101")), Tuple{Expr, Nothing}})
precompile(Tuple{getfield(DanUtils, Symbol("#95#102")), Nothing})
precompile(Tuple{getfield(DanUtils, Symbol("#97#104")), Tuple{Symbol, Nothing}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Expr, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.esc), Tuple{Array{Expr, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.esc), Tuple{Array{Expr, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.esc), Tuple{Array{Expr, 1}}}})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{Base.Dict{Symbol, Any}, Bool}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{Base.Dict{Symbol, Any}, Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Base.Dict{Symbol, Any}, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Dict{Symbol, Any}, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Dict{Symbol, Any}, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Multimedia.MIME{Symbol("text/plain")}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.show_type_name), Base.IOContext{REPL.Terminals.TTYTerminal}, Core.TypeName})
precompile(Tuple{typeof(Base.show_datatype), Base.IOContext{REPL.Terminals.TTYTerminal}, DataType})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Type{T} where T})
precompile(Tuple{typeof(Base.print), Base.IOContext{REPL.Terminals.TTYTerminal}, String, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Tokenize.Lexers.lex_equal), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{getfield(AndExport, Symbol("#@AndExport")), LineNumberNode, Module, Expr})
precompile(Tuple{typeof(Base.getindex), Type{Expr}})
precompile(Tuple{typeof(AndExport.iterflatten), Expr})
precompile(Tuple{typeof(MacroTools.walk), Expr, Function, typeof(AndExport.my_flatten1)})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}, Array{Any, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}}})
precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}}})
precompile(Tuple{getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}, Expr})
precompile(Tuple{getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}, Symbol})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Symbol}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}}, Int64})
precompile(Tuple{typeof(AndExport.my_flatten1), Expr})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Expr}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}}, Int64})
precompile(Tuple{getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}, LineNumberNode})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{LineNumberNode}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{LineNumberNode, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{LineNumberNode, 1}, LineNumberNode, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}}, Int64})
precompile(Tuple{getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}}, Int64, Int64})
precompile(Tuple{typeof(Base.push!), Array{Expr, 1}, Expr})
precompile(Tuple{typeof(Base.isempty), Array{Expr, 1}})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{typeof(Main.a), Bool}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{typeof(Main.a), Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{typeof(Main.a), Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{typeof(Main.a), Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{typeof(Main.a), Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Function})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Multimedia.MIME{Symbol("text/plain")}, Function})
precompile(Tuple{typeof(Base.methods), Any})
precompile(Tuple{typeof(Base.methods), Any, Any})
precompile(Tuple{typeof(Main.a), Int64})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{Main.A{Int64}, Bool}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{Main.A{Int64}, Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Main.A{Int64}, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Main.A{Int64}, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Main.A{Int64}, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Main.A{Int64}})
precompile(Tuple{typeof(Base._show_default), Base.IOContext{REPL.Terminals.TTYTerminal}, Any})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Multimedia.MIME{Symbol("text/plain")}, Main.A{Int64}})
precompile(Tuple{typeof(Base.sizeof), Main.A{Int64}})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#27#28")){getfield(OhMyREPL.Prompt, Symbol("#21#46")), String}, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.edit_delete), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(OhMyREPL.Prompt, Symbol("#21#46")), Any, Any, Any})
precompile(Tuple{typeof(FileWatching.uvfinalize), FileWatching.FileMonitor})
