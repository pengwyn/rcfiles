precompile(Tuple{typeof(GR.js.send), Base.Cstring, Int32})
precompile(Tuple{typeof(GR.js.check_js)})
precompile(Tuple{typeof(GR.js.jsterm_send), String, String})
precompile(Tuple{typeof(GR.js.recv), Base.Cstring, Int32, Base.Cstring})
precompile(Tuple{typeof(GR.js.initjs)})
precompile(Tuple{typeof(GR.init), Bool})
precompile(Tuple{typeof(GR.__init__)})
precompile(Tuple{typeof(GR.isijulia)})
precompile(Tuple{typeof(GR.isatom)})
precompile(Tuple{typeof(Base.pathof), Module})
precompile(Tuple{typeof(Random.make_seed), Int64})
precompile(Tuple{Type{Random.MersenneTwister}, Int64})
precompile(Tuple{typeof(Zlib_jll.__init__)})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}, Base.UUID})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#FreeBSD#19#20")), Nothing, Nothing, Pkg.BinaryPlatforms.CompilerABI, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.FreeBSD, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Libdl.dlopen), String})
precompile(Tuple{typeof(Bzip2_jll.__init__)})
precompile(Tuple{typeof(FreeType2_jll.__init__)})
precompile(Tuple{typeof(FriBidi_jll.__init__)})
precompile(Tuple{typeof(libass_jll.__init__)})
precompile(Tuple{typeof(libfdk_aac_jll.__init__)})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.GMP.MPZ.set), Base.GMP.BigInt})
precompile(Tuple{typeof(Base.deepcopy), Base.GMP.BigInt})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.GMP.BigInt, 1}, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#33#38")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#34#39")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#35#40")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#36#41")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#37#42")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Ogg_jll.__init__)})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##load_overrides#3")), Bool, typeof(Pkg.Artifacts.load_overrides)})
precompile(Tuple{typeof(Pkg.Artifacts.process_overrides), Base.Dict{String, Any}, Base.UUID})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#artifact_meta##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, typeof(Base.push!), Base.KeySet{Pkg.BinaryPlatforms.Platform, Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Set{Pkg.BinaryPlatforms.Platform}})
precompile(Tuple{typeof(Base.:(==)), Base.VersionNumber, Base.VersionNumber})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_paths#9")), Bool, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_exists#11")), Bool, typeof(Pkg.Artifacts.artifact_exists), Base.SHA1})
precompile(Tuple{getfield(Base.Filesystem, Symbol("#cptree##kw")), NamedTuple{(:force, :follow_symlinks), Tuple{Bool, Bool}}, typeof(Base.Filesystem.cptree), String, String})
precompile(Tuple{typeof(Base.stat), Base.Libc.RawFD})
precompile(Tuple{typeof(Base.Filesystem.sendfile), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##cptree#11")), Bool, Bool, typeof(Base.Filesystem.cptree), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##cp#12")), Bool, Bool, typeof(Base.Filesystem.cp), String, String})
precompile(Tuple{typeof(Base.Filesystem.rename), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##get_auth_header#77")), Bool, typeof(Pkg.PlatformEngines.get_auth_header), String})
precompile(Tuple{typeof(Pkg.PlatformEngines.load_telemetry_file), String})
precompile(Tuple{typeof(Pkg.PlatformEngines.get_telemetry_headers), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download#87")), Bool, Nothing, typeof(Pkg.PlatformEngines.download), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify#88")), Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify), String, Nothing, String})
precompile(Tuple{typeof(Base.convert), Type{Nothing}, Base.SubString{String}})
precompile(Tuple{typeof(Base.convert), Type{Base.Pair{Nothing, String}}, Base.Pair{Base.SubString{String}, String}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{Nothing, String}, 1}, Base.Pair{Base.SubString{String}, String}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Nothing, String}, 1}, Base.Pair{Base.SubString{String}, String}, Base.Generator{Array{Array{Union{Nothing, Base.SubString{String}}, 1}, 1}, getfield(Pkg.PlatformEngines, Symbol("#93#95"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Array{Union{Nothing, Base.SubString{String}}, 1}, 1}, getfield(Pkg.PlatformEngines, Symbol("#93#95"))}})
precompile(Tuple{typeof(Pkg.PlatformEngines.list_tarball_symlinks), String})
precompile(Tuple{typeof(Base.write), Base.IOStream, Nothing})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##unpack#96")), Bool, typeof(Pkg.PlatformEngines.unpack), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify_unpack#101")), Nothing, Bool, Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify_unpack), String, Nothing, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#artifact_paths##kw")), NamedTuple{(:honor_overrides,), Tuple{Bool}}, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_path#10")), Bool, typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Pkg.Artifacts, Symbol("#39#40")){Bool, String, Nothing}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##download_artifact#38")), Bool, Bool, typeof(Pkg.Artifacts.download_artifact), Base.SHA1, String, Nothing})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}})
precompile(Tuple{typeof(Pkg.Artifacts.with_show_download_info), getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}, String, Bool})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(libvorbis_jll.__init__)})
precompile(Tuple{typeof(LAME_jll.__init__)})
precompile(Tuple{typeof(x264_jll.__init__)})
precompile(Tuple{typeof(OpenSSL_jll.__init__)})
precompile(Tuple{typeof(LibVPX_jll.__init__)})
precompile(Tuple{typeof(x265_jll.__init__)})
precompile(Tuple{typeof(Opus_jll.__init__)})
precompile(Tuple{typeof(FFMPEG_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(FFMPEG_jll, Symbol("#13#15")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(FFMPEG_jll, Symbol("#14#16")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Requires.__init__)})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Function, 1}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Base.PkgId, Array{Function, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Function, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Function, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.get!), getfield(Requires, Symbol("#1#2")), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Array{Function, 1}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Base.PkgId, Array{Function, 1}}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Function, 1}, Base.Generator{Array{Function, 1}, getfield(Requires, Symbol("#3#4"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(PlotUtils.__init__)})
precompile(Tuple{typeof(PlotThemes.add_theme), Symbol, PlotThemes.PlotTheme})
precompile(Tuple{typeof(PlotThemes.__init__)})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, PlotUtils.ColorLibrary}, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Array{ColorTypes.RGBA{Float64}, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Array{ColorTypes.RGBA{Float64}, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Array{ColorTypes.RGBA{Float64}, 1}}, Array{ColorTypes.RGBA{Float64}, 1}, Symbol})
precompile(Tuple{typeof(PlotUtils.register_gradient_colors), Symbol, Array{ColorTypes.RGBA{Float64}, 1}, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, PlotThemes.PlotTheme}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, PlotThemes.PlotTheme}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, PlotThemes.PlotTheme}, PlotThemes.PlotTheme, Symbol})
precompile(Tuple{typeof(Base.isabstracttype), Any})
precompile(Tuple{typeof(ColorTypes.basetype), Any})
precompile(Tuple{typeof(Base.typename), DataType})
precompile(Tuple{typeof(Base.throw_boundserror), Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{ColorTypes.RGBA{Float64}, 1}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Array{ColorTypes.RGBA{Float64}, 1}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Symbol})
precompile(Tuple{typeof(PlotUtils.register_gradient_colors), Symbol, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Symbol})
precompile(Tuple{typeof(Requires.listenpkg), getfield(PlotThemes, Symbol("#16#19")), Base.PkgId})
precompile(Tuple{typeof(Plots._plots_defaults)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Plots.reset_axis_defaults_byletter!)})
precompile(Tuple{typeof(Plots.replaceAlias!), Base.Dict{Symbol, Any}, Symbol, Base.Dict{Symbol, Symbol}})
precompile(Tuple{typeof(Plots.replaceAliases!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Symbol}})
precompile(Tuple{typeof(Plots.preprocessArgs!), Base.Dict{Symbol, Any}})
precompile(Tuple{getfield(Plots, Symbol("##default#118")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.default)})
precompile(Tuple{getfield(Plots, Symbol("##_theme#127")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots._theme), Symbol, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.__init__)})
precompile(Tuple{typeof(Requires.listenpkg), getfield(Plots, Symbol("#304#337")), Base.PkgId})
precompile(Tuple{typeof(Requires.listenpkg), getfield(Plots, Symbol("#307#340")), Base.PkgId})
precompile(Tuple{typeof(Requires.listenpkg), getfield(Plots, Symbol("#310#343")), Base.PkgId})
precompile(Tuple{typeof(Requires.listenpkg), getfield(Plots, Symbol("#313#346")), Base.PkgId})
precompile(Tuple{typeof(Requires.listenpkg), getfield(Plots, Symbol("#316#349")), Base.PkgId})
precompile(Tuple{typeof(Requires.listenpkg), getfield(Plots, Symbol("#319#352")), Base.PkgId})
precompile(Tuple{typeof(Requires.listenpkg), getfield(Plots, Symbol("#322#355")), Base.PkgId})
precompile(Tuple{typeof(Requires.listenpkg), getfield(Plots, Symbol("#325#358")), Base.PkgId})
precompile(Tuple{typeof(Requires.listenpkg), getfield(Plots, Symbol("#328#361")), Base.PkgId})
precompile(Tuple{typeof(Requires.listenpkg), getfield(Plots, Symbol("#331#364")), Base.PkgId})
precompile(Tuple{typeof(Base.:(/)), Base.Irrational{:π}, Int64})
precompile(Tuple{typeof(Base.:(*)), Int64, Base.Irrational{:π}})
precompile(Tuple{typeof(Base.rat), Float64})
precompile(Tuple{typeof(Base.lcm_unchecked), Int64, Int64})
precompile(Tuple{Type{Base.TwicePrecision{Float64}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.floatrange), Type{Float64}, Int64, Int64, Int64, Int64})
precompile(Tuple{Base.Colon, Float64, Float64, Float64})
precompile(Tuple{Base.Colon, Int64, Float64, Float64})
precompile(Tuple{typeof(Base.:(+)), Base.MPFR.BigFloat, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.:(*)), Base.MPFR.BigFloat, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.big), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.Math.sin_domain_error), Float64})
precompile(Tuple{typeof(Base.Math.paynehanek), Float64})
precompile(Tuple{typeof(Base.sin), Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.sin), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Core.Compiler._typename), TypeVar})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), Expr, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{typeof(GR.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(GR, Symbol("##plot#2")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(GR.jlgr.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Union{AbstractString, Function, AbstractArray{T, 1} where T, AbstractArray{T, 2} where T}, N} where N})
precompile(Tuple{Type{Base.Dict{Union{}, Union{}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.getindex), Array{Union{}, 1}, Int64})
precompile(Tuple{typeof(GR.jlgr.create_context), Base.Dict{Union{}, Union{}}})
precompile(Tuple{typeof(GR.jlgr.create_context), Symbol, Base.Dict{Union{}, Union{}}})
precompile(Tuple{typeof(GR.openmeta), Int64, String, Int64})
precompile(Tuple{typeof(GR.jlgr.send_meta), Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(-)), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Math.cos_domain_error), Float64})
precompile(Tuple{typeof(Base.cos), Float64})
precompile(Tuple{typeof(GR.wctondc), Float64, Float64})
precompile(Tuple{typeof(GR.latin1), String})
precompile(Tuple{typeof(GR.jlgr.draw_polar_axes)})
precompile(Tuple{typeof(GR.jlgr.legend_size)})
precompile(Tuple{typeof(GR.jlgr.draw_legend)})
precompile(Tuple{typeof(GR.isinline)})
precompile(Tuple{typeof(GR.jlgr.restore_context)})
precompile(Tuple{typeof(GR.osc_seq)})
precompile(Tuple{typeof(GR.st_seq)})
precompile(Tuple{typeof(GR.show)})
precompile(Tuple{typeof(GR.jlgr.colormap)})
precompile(Tuple{typeof(Base.fill!), Array{Int32, 2}, Int32})
precompile(Tuple{typeof(Base._linspace1), Type{Float64}, Float64, Float64, Int64})
precompile(Tuple{typeof(Base.steprangelen_hp), Type{Float64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.splitprec), Type{Float64}, Int128})
precompile(Tuple{typeof(Base.:(/)), Base.TwicePrecision{Float64}, Int128})
precompile(Tuple{typeof(Base.steprangelen_hp), Type{Float64}, Tuple{Int128, Int128}, Tuple{Int128, Int128}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._linspace), Type{Float64}, Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Int64, 1}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Int32, 2}, Array{Int64, 1}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Int32, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(GR.jlgr.colorbar), Int64, Int64})
precompile(Tuple{typeof(Base.filter), getfield(Base, Symbol("#66#67")){typeof(Base.isnan)}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.min), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.min), Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.max), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.max), Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{typeof(GR.GR3._check_error)})
precompile(Tuple{typeof(GR.jlgr.colorbar), Float64, Int64})
precompile(Tuple{typeof(GR.GR3.volume), Array{Float64, 3}, Int64})
precompile(Tuple{typeof(GR.jlgr.plot_data), Bool})
precompile(Tuple{getfield(GR.jlgr, Symbol("##plot#36")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.jlgr.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Union{AbstractString, Function, AbstractArray{T, 1} where T, AbstractArray{T, 2} where T}, N} where N})
precompile(Tuple{typeof(Base.getproperty), GR.jlgr.PlotObject, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Symbol, Symbol})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#239#241")), Base.Dict{Any, Any}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.copy), Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.setproperty!), GR.jlgr.PlotObject, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, Base.Dict{Union{}, Union{}}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, Symbol})
precompile(Tuple{getfield(GR.jlgr, Symbol("##plot_args#23")), Symbol, typeof(GR.jlgr.plot_args), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}})
precompile(Tuple{typeof(GR.jlgr.plot_args), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, DataType, DataType, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, DataType, DataType, String}, Int64, Int64})
precompile(Tuple{typeof(GR.jlgr.isvector), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.vec), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(GR.jlgr.isvector), Array{Float64, 1}})
precompile(Tuple{typeof(Base.vec), Array{Float64, 1}})
precompile(Tuple{typeof(GR.jlgr.given), Type{T} where T})
precompile(Tuple{typeof(Base.vect), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, DataType, DataType}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, DataType, DataType}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, DataType, DataType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, DataType, DataType}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, DataType, DataType}, 1}, Int64})
precompile(Tuple{typeof(Base.setproperty!), GR.jlgr.PlotObject, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Type{T} where T})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, Symbol, Symbol})
precompile(Tuple{typeof(GR.inqdspsize)})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(GR.jlgr.set_viewport), Symbol, Array{Int64, 1}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.float), Int64})
precompile(Tuple{typeof(Base.:(/)), Float64, Int64})
precompile(Tuple{typeof(Base.:(/)), Float64, Int32})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
precompile(Tuple{typeof(GR.setwsviewport), Int64, Float64, Int64, Float64})
precompile(Tuple{typeof(GR.setwswindow), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Float64, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Float64, Symbol})
precompile(Tuple{typeof(GR.jlgr.minmax)})
precompile(Tuple{typeof(GR.jlgr.set_window), Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, Symbol, Bool})
precompile(Tuple{typeof(GR.jlgr.given), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(GR.jlgr.Extrema64), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.max), Float64, Float64})
precompile(Tuple{typeof(GR.jlgr.given), Array{Float64, 1}})
precompile(Tuple{typeof(GR.jlgr.Extrema64), Array{Float64, 1}})
precompile(Tuple{typeof(GR.jlgr.fix_minmax), Float64, Float64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Tuple{Float64, Float64}, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.:(&)), Int64, Int64})
precompile(Tuple{typeof(GR.adjustlimits), Float64, Float64})
precompile(Tuple{typeof(GR.tick), Float64, Float64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Tuple{Float64, Tuple{Float64, Float64}, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Tuple{Float64, Float64, Float64, Float64}, Symbol})
precompile(Tuple{typeof(GR.setwindow), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(GR.jlgr.draw_axes), Symbol, Int64})
precompile(Tuple{typeof(GR.jlgr.draw_axes), Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Tuple{Float64, Float64}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Tuple{Float64, Float64}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Float64, Base.Val{2}})
precompile(Tuple{typeof(Base.sqrt), Float64})
precompile(Tuple{typeof(GR.setcharheight), Float64})
precompile(Tuple{typeof(GR.grid), Float64, Float64, Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(GR.axes), Float64, Float64, Float64, Float64, Int64, Int64, Float64})
precompile(Tuple{typeof(Base.:(==)), Symbol, Symbol})
precompile(Tuple{typeof(GR.uselinespec), String})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, 1}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(GR.polyline), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.in), Type{T} where T, Tuple{Core.TypeofBottom, String, String, String}})
precompile(Tuple{Type{Base.LinRange{T} where T}, Int64, Int64, Int64})
precompile(Tuple{Type{Ref{T} where T}, Function})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Function, Base.LinRange{Float64}, Base.Val{2}})
precompile(Tuple{Type{Base.RefValue{T} where T}, typeof(Base.:(^))})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Base.RefValue{typeof(Base.:(^))}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.LinRange{Float64}, Base.RefValue{Base.Val{2}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.LinRange{Float64}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.LinRange{Float64}, Base.RefValue{Base.Val{2}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Base.LinRange{Float64}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.LinRange{Float64}, Base.RefValue{Base.Val{2}}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.LinRange{Float64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Base.LinRange{Float64}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Base.LinRange{Float64}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Val{2}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Base.LinRange{Float64}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.LinRange{Float64}, Base.RefValue{Base.Val{2}}}}}}})
precompile(Tuple{typeof(GR.scatter), Base.LinRange{Float64}, Vararg{Any, N} where N})
precompile(Tuple{getfield(GR, Symbol("##scatter#8")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.scatter), Base.LinRange{Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(GR.jlgr.scatter), Base.LinRange{Float64}, Vararg{Any, N} where N})
precompile(Tuple{getfield(GR.jlgr, Symbol("##scatter#39")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.jlgr.scatter), Base.LinRange{Float64}, Vararg{Any, N} where N})
precompile(Tuple{getfield(GR.jlgr, Symbol("##plot_args#23")), Symbol, typeof(GR.jlgr.plot_args), Tuple{Base.LinRange{Float64}, Array{Float64, 1}}})
precompile(Tuple{getfield(GR.jlgr, Symbol("#plot_args##kw")), NamedTuple{(:fmt,), Tuple{Symbol}}, typeof(GR.jlgr.plot_args), Tuple{Base.LinRange{Float64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.LinRange{Float64}, Array{Float64, 1}, DataType, DataType, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.LinRange{Float64}, Array{Float64, 1}, DataType, DataType, String}, Int64, Int64})
precompile(Tuple{typeof(GR.jlgr.isvector), Base.LinRange{Float64}})
precompile(Tuple{typeof(Base.vec), Base.LinRange{Float64}})
precompile(Tuple{typeof(Base.vect), Tuple{Base.LinRange{Float64}, Array{Float64, 1}, DataType, DataType}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Base.LinRange{Float64}, Array{Float64, 1}, DataType, DataType}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.LinRange{Float64}, Array{Float64, 1}, DataType, DataType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.LinRange{Float64}, Array{Float64, 1}, DataType, DataType}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Base.LinRange{Float64}, Array{Float64, 1}, DataType, DataType}, 1}, Int64})
precompile(Tuple{typeof(GR.jlgr.given), Base.LinRange{Float64}})
precompile(Tuple{typeof(GR.jlgr.Extrema64), Base.LinRange{Float64}})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, 1}}, Base.LinRange{Float64}})
precompile(Tuple{typeof(GR.polymarker), Base.LinRange{Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.length), Base.LinRange{Float64}})
precompile(Tuple{getfield(GR.jlgr, Symbol("##plot_args#23")), Symbol, typeof(GR.jlgr.plot_args), Tuple{Base.LinRange{Float64}, Array{Float64, 1}, Base.LinRange{Float64}, Base.LinRange{Float64}}})
precompile(Tuple{getfield(GR.jlgr, Symbol("#plot_args##kw")), NamedTuple{(:fmt,), Tuple{Symbol}}, typeof(GR.jlgr.plot_args), Tuple{Base.LinRange{Float64}, Array{Float64, 1}, Base.LinRange{Float64}, Base.LinRange{Float64}}})
precompile(Tuple{typeof(Base.adjoint), Base.LinRange{Float64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.LinRange{Float64}, Array{Float64, 1}, LinearAlgebra.Adjoint{Float64, Base.LinRange{Float64}}, Base.LinRange{Float64}, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.LinRange{Float64}, Array{Float64, 1}, LinearAlgebra.Adjoint{Float64, Base.LinRange{Float64}}, Base.LinRange{Float64}, String}, Int64, Int64})
precompile(Tuple{typeof(GR.jlgr.given), LinearAlgebra.Adjoint{Float64, Base.LinRange{Float64}}})
precompile(Tuple{typeof(GR.jlgr.isvector), LinearAlgebra.Adjoint{Float64, Base.LinRange{Float64}}})
precompile(Tuple{typeof(Base._throw_dmrs), Int64, String, Tuple{Int64}})
precompile(Tuple{typeof(Base.vec), LinearAlgebra.Adjoint{Float64, Base.LinRange{Float64}}})
precompile(Tuple{typeof(GR.jlgr.given), Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Base.LinRange{Float64}}, Tuple{}}})
precompile(Tuple{typeof(Base.vect), Tuple{Base.LinRange{Float64}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Base.LinRange{Float64}}, Tuple{}}, Base.LinRange{Float64}}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Base.LinRange{Float64}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Base.LinRange{Float64}}, Tuple{}}, Base.LinRange{Float64}}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.LinRange{Float64}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Base.LinRange{Float64}}, Tuple{}}, Base.LinRange{Float64}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.LinRange{Float64}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Base.LinRange{Float64}}, Tuple{}}, Base.LinRange{Float64}}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Base.LinRange{Float64}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Base.LinRange{Float64}}, Tuple{}}, Base.LinRange{Float64}}, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.LinRange{Float64}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Base.LinRange{Float64}}, Tuple{}}, Base.LinRange{Float64}, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.LinRange{Float64}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Base.LinRange{Float64}}, Tuple{}}, Base.LinRange{Float64}, String}, Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Base.LinRange{Float64}}, Tuple{}}, Tuple{Int64}})
precompile(Tuple{typeof(GR.jlgr.Extrema64), Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Base.LinRange{Float64}}, Tuple{}}})
precompile(Tuple{typeof(Base.map), Function, Base.LinRange{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(GR.jlgr, Symbol("#13#18")), Base.LinRange{Float64}})
precompile(Tuple{getfield(GR.jlgr, Symbol("#13#18")), Float64})
precompile(Tuple{typeof(Base._collect), Base.LinRange{Float64}, Base.Generator{Base.LinRange{Float64}, getfield(GR.jlgr, Symbol("#13#18"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Base.LinRange{Float64}, Base.Generator{Base.LinRange{Float64}, getfield(GR.jlgr, Symbol("#13#18"))}})
precompile(Tuple{typeof(GR.jlgr.normalize_color), Float64, Float64, Float64})
precompile(Tuple{typeof(Base._similar_for), Base.LinRange{Float64}, Type{Float64}, Base.Generator{Base.LinRange{Float64}, getfield(GR.jlgr, Symbol("#13#18"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Base.LinRange{Float64}, getfield(GR.jlgr, Symbol("#13#18"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.LinRange{Float64}, getfield(GR.jlgr, Symbol("#13#18"))}, Int64})
precompile(Tuple{Type{Base.IteratorSize}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{Float64, 1}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(+)), Int64, Float64})
precompile(Tuple{typeof(Base.round), Type{Int64}, Float64})
precompile(Tuple{typeof(Base.iterate), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Base.LinRange{Float64}}, Tuple{}}, Int64})
precompile(Tuple{typeof(GR.setmarkersize), Float64})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.LinRange{Float64}, Int64})
precompile(Tuple{typeof(GR.polymarker), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(GR.stem), Base.LinRange{Float64}, Vararg{Any, N} where N})
precompile(Tuple{getfield(GR, Symbol("##stem#9")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.stem), Base.LinRange{Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(GR.jlgr.stem), Base.LinRange{Float64}, Vararg{Any, N} where N})
precompile(Tuple{getfield(GR.jlgr, Symbol("##stem#40")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.jlgr.stem), Base.LinRange{Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(GR.jlgr.plot_args), Tuple{Base.LinRange{Float64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.vcat), Float64, Float64})
precompile(Tuple{typeof(GR.polyline), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.length), Array{Float64, 1}})
precompile(Tuple{typeof(Base.hvcat_fill), Array{Float64, 1}, Tuple{Int64, Float64}})
precompile(Tuple{typeof(Base.vcat), Int64, Float64})
precompile(Tuple{typeof(GR.polyline), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.exp), Float64})
precompile(Tuple{typeof(Base.randn), Random.MersenneTwister})
precompile(Tuple{typeof(Random.randn_unlikely), Random.MersenneTwister, Int64, Int64, Float64})
precompile(Tuple{typeof(Base.randn), Random.MersenneTwister, Type{Float64}})
precompile(Tuple{typeof(Base.randn), Random.MersenneTwister, Type{Float64}, Int64})
precompile(Tuple{typeof(Base.randn), Random.MersenneTwister, Int64})
precompile(Tuple{getfield(GR.jlgr, Symbol("##histogram#44")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.jlgr.histogram), Array{Float64, 1}})
precompile(Tuple{typeof(GR.histogram), Array{Float64, 1}})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, Symbol, Int64})
precompile(Tuple{typeof(Base._extrema_itr), typeof(Base.identity), Array{Float64, 1}})
precompile(Tuple{typeof(Base._linspace), Float64, Float64, Int64})
precompile(Tuple{typeof(Base._range), Float64, Nothing, Float64, Int64})
precompile(Tuple{typeof(Base.Sort.searchsortedfirst), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.vcat), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(GR.jlgr.hist), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Array{Float64, 1}, Array{Float64, 1}, DataType, DataType, String}})
precompile(Tuple{typeof(Base.setproperty!), GR.jlgr.PlotObject, Symbol, Array{Tuple{Array{Float64, 1}, Array{Float64, 1}, DataType, DataType, String}, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Tuple{Array{Float64, 1}, Array{Float64, 1}, DataType, DataType, String}, 1}, Type{T} where T})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Array{Float64, 1}, Array{Float64, 1}, DataType, DataType, String}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}, DataType, DataType, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}, DataType, DataType, String}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Array{Float64, 1}, Array{Float64, 1}, DataType, DataType, String}, 1}, Int64})
precompile(Tuple{typeof(GR.adjustlimits), Int64, Float64})
precompile(Tuple{typeof(GR.fillrect), Float64, Float64, Float64, Float64})
precompile(Tuple{getfield(GR.jlgr, Symbol("##plot_args#23")), Symbol, typeof(GR.jlgr.plot_args), Tuple{Array{Float64, 1}}})
precompile(Tuple{getfield(GR.jlgr, Symbol("##plot#36")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.jlgr.plot), Array{Float64, 1}})
precompile(Tuple{typeof(GR.plot), Array{Float64, 1}})
precompile(Tuple{typeof(GR.jlgr.isrowvec), Array{Float64, 1}})
precompile(Tuple{typeof(Base.size), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(GR.jlgr.linspace), Int64, Int64, Int64})
precompile(Tuple{typeof(Base.randn), Random.MersenneTwister, Type{Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.randn), Random.MersenneTwister, Int64, Int64})
precompile(Tuple{getfield(GR.jlgr, Symbol("##plot_args#23")), Symbol, typeof(GR.jlgr.plot_args), Tuple{Array{Float64, 2}}})
precompile(Tuple{getfield(GR.jlgr, Symbol("##oplot#37")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.jlgr.oplot), Array{Float64, 2}})
precompile(Tuple{typeof(GR.oplot), Array{Float64, 2}})
precompile(Tuple{typeof(Base.eltype), Array{Float64, 2}})
precompile(Tuple{typeof(GR.jlgr.isrowvec), Array{Float64, 2}})
precompile(Tuple{typeof(Base.size), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}, DataType, DataType, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}, DataType, DataType, String}, Int64, Int64})
precompile(Tuple{typeof(GR.jlgr.isvector), Array{Float64, 2}})
precompile(Tuple{typeof(Base.length), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(GR.jlgr, Symbol("#25#31")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.OneTo{Int64}, 1}}})
precompile(Tuple{getfield(GR.jlgr, Symbol("#25#31")), Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(GR.jlgr, Symbol("#25#31"))}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}})
precompile(Tuple{typeof(Base.view), Array{Float64, 2}, Function, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, DataType, DataType}}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, DataType, DataType}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(GR.jlgr, Symbol("#25#31"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, DataType, DataType}, 1}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, DataType, DataType}, Base.Generator{Base.UnitRange{Int64}, getfield(GR.jlgr, Symbol("#25#31"))}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, DataType, DataType}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, DataType, DataType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, DataType, DataType}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, DataType, DataType}, 1}, Int64})
precompile(Tuple{typeof(Base.append!), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, DataType, DataType, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, DataType, DataType, String}, Int64, Int64})
precompile(Tuple{typeof(GR.jlgr.given), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(GR.jlgr.Extrema64), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Float64, 2}, Base.IndexLinear, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}})
precompile(Tuple{typeof(GR.polyline), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}})
precompile(Tuple{typeof(Base.:(-)), Base.MPFR.BigFloat, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.:(==)), Base.MPFR.BigFloat, Base.MPFR.BigFloat})
precompile(Tuple{Type{Base.LinRange{T} where T}, Base.MPFR.BigFloat, Base.MPFR.BigFloat, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.LinRange{Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Base.LinRange{Float64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.cos), Tuple{Base.LinRange{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.LinRange{Float64}}}, Base.LinRange{Float64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.LinRange{Float64}}}, Base.LinRange{Float64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.Broadcast.Extruded{Base.LinRange{Float64}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Extruded{Base.LinRange{Float64}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.LinRange{Float64}}}, Base.LinRange{Float64}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.sin), Tuple{Base.LinRange{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.LinRange{Float64}}}, Base.LinRange{Float64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.LinRange{Float64}}}, Base.LinRange{Float64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Extruded{Base.LinRange{Float64}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Extruded{Base.LinRange{Float64}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.LinRange{Float64}}}, Base.LinRange{Float64}}}})
precompile(Tuple{typeof(GR.plot3), Base.LinRange{Float64}, Vararg{Any, N} where N})
precompile(Tuple{getfield(GR, Symbol("##plot3#22")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.plot3), Base.LinRange{Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(GR.jlgr.plot3), Base.LinRange{Float64}, Vararg{Any, N} where N})
precompile(Tuple{getfield(GR.jlgr, Symbol("##plot3#55")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.jlgr.plot3), Base.LinRange{Float64}, Vararg{Any, N} where N})
precompile(Tuple{getfield(GR.jlgr, Symbol("##plot_args#23")), Symbol, typeof(GR.jlgr.plot_args), Tuple{Base.LinRange{Float64}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{getfield(GR.jlgr, Symbol("#plot_args##kw")), NamedTuple{(:fmt,), Tuple{Symbol}}, typeof(GR.jlgr.plot_args), Tuple{Base.LinRange{Float64}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.adjoint), Array{Float64, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.LinRange{Float64}, Array{Float64, 1}, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, DataType, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.LinRange{Float64}, Array{Float64, 1}, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, DataType, String}, Int64, Int64})
precompile(Tuple{typeof(GR.jlgr.given), LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}})
precompile(Tuple{typeof(GR.jlgr.isvector), LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.vec), LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}})
precompile(Tuple{typeof(GR.jlgr.given), Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}})
precompile(Tuple{typeof(Base.vect), Tuple{Base.LinRange{Float64}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}, DataType}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Base.LinRange{Float64}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}, DataType}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.LinRange{Float64}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}, DataType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.LinRange{Float64}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}, DataType}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Base.LinRange{Float64}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}, DataType}, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.LinRange{Float64}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}, DataType, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.LinRange{Float64}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}, DataType, String}, Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}, Tuple{Int64}})
precompile(Tuple{typeof(GR.jlgr.Extrema64), Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}})
precompile(Tuple{typeof(GR.setspace), Float64, Float64, Int64, Int64})
precompile(Tuple{typeof(GR.grid3d), Float64, Int64, Float64, Float64, Float64, Float64, Int64, Int64, Int64})
precompile(Tuple{typeof(GR.grid3d), Int64, Float64, Int64, Float64, Float64, Float64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, Symbol, String})
precompile(Tuple{typeof(GR.titles3d), String, String, String})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}})
precompile(Tuple{typeof(GR.polyline3d), Base.LinRange{Float64}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}})
precompile(Tuple{typeof(GR.axes3d), Float64, Int64, Float64, Float64, Float64, Float64, Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(GR.axes3d), Int64, Float64, Int64, Float64, Float64, Float64, Int64, Int64, Int64, Float64})
precompile(Tuple{Type{Base.LinRange{T} where T}, Int64, Float64, Int64})
precompile(Tuple{typeof(GR.polar), Base.LinRange{Float64}, Vararg{Base.LinRange{Float64}, N} where N})
precompile(Tuple{getfield(GR, Symbol("##polar#30")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.polar), Base.LinRange{Float64}, Vararg{Base.LinRange{Float64}, N} where N})
precompile(Tuple{typeof(GR.jlgr.polar), Base.LinRange{Float64}, Vararg{Base.LinRange{Float64}, N} where N})
precompile(Tuple{getfield(GR.jlgr, Symbol("##polar#72")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.jlgr.polar), Base.LinRange{Float64}, Vararg{Base.LinRange{Float64}, N} where N})
precompile(Tuple{getfield(GR.jlgr, Symbol("##plot_args#23")), Symbol, typeof(GR.jlgr.plot_args), Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}}})
precompile(Tuple{typeof(GR.jlgr.plot_args), Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}, DataType, DataType, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}, DataType, DataType, String}, Int64, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}, DataType, DataType}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}, DataType, DataType}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}, DataType, DataType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}, DataType, DataType}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}, DataType, DataType}, 1}, Int64})
precompile(Tuple{typeof(Base.rem), Int64, Int64})
precompile(Tuple{typeof(Base.:(*)), Int64, Float64})
precompile(Tuple{typeof(Base.hidigit), Float64, Int64})
precompile(Tuple{typeof(Base._round_digits), Float64, Base.Rounding.RoundingMode{:Nearest}, Int64, Int64})
precompile(Tuple{typeof(GR.jlgr.signif), Float64, Int64})
precompile(Tuple{typeof(Base.string), Float64})
precompile(Tuple{typeof(GR.text), Float64, Float64, String})
precompile(Tuple{typeof(GR.drawarc), Float64, Float64, Float64, Float64, Int64, Int64})
precompile(Tuple{typeof(Base.vect), Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(GR.jlgr.plot_polar), Base.LinRange{Float64}, Base.LinRange{Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.LinRange{Float64}, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.:(/)), Base.LinRange{Float64}, Float64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.LinRange{Float64}})
precompile(Tuple{typeof(Base.zeros), Int64})
precompile(Tuple{typeof(Random._rand_max383!), Random.MersenneTwister, Random.UnsafeView{Float64}, Random.CloseOpen01{Float64}})
precompile(Tuple{typeof(Random.DSFMT.dsfmt_fill_array_close_open!), Random.DSFMT.DSFMT_state, Ptr{Float64}, Int64})
precompile(Tuple{typeof(Random.rand!), Random.MersenneTwister, Random.UnsafeView{Float64}, Random.SamplerTrivial{Random.CloseOpen01{Float64}, Float64}})
precompile(Tuple{typeof(Base.rand), Random.MersenneTwister, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Int64, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Int64, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Int64, Array{Float64, 1}}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Int64, Array{Float64, 1}}}, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Int64, Array{Float64, 1}}}, Int64}}})
precompile(Tuple{typeof(GR.scatter3), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(GR, Symbol("##scatter3#23")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.scatter3), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(GR.jlgr.scatter3), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(GR.jlgr, Symbol("##scatter3#56")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.jlgr.scatter3), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(GR.jlgr, Symbol("##plot_args#23")), Symbol, typeof(GR.jlgr.plot_args), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{getfield(GR.jlgr, Symbol("#plot_args##kw")), NamedTuple{(:fmt,), Tuple{Symbol}}, typeof(GR.jlgr.plot_args), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, DataType, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, DataType, String}, Int64, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}, DataType}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}, DataType}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}, DataType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}, DataType}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}, DataType}, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}, DataType, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}, DataType, String}, Int64, Int64})
precompile(Tuple{typeof(GR.polymarker3d), Array{Float64, 1}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Int64, Array{Float64, 1}}}, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Int64, Array{Float64, 1}}}, Int64}}})
precompile(Tuple{getfield(GR.jlgr, Symbol("##plot_args#23")), Symbol, typeof(GR.jlgr.plot_args), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{getfield(GR.jlgr, Symbol("#plot_args##kw")), NamedTuple{(:fmt,), Tuple{Symbol}}, typeof(GR.jlgr.plot_args), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Array{Float64, 1}, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Array{Float64, 1}, String}, Int64, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}, Array{Float64, 1}}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}, Array{Float64, 1}}, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}, Array{Float64, 1}, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}, Array{Float64, 1}, String}, Int64, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(GR.jlgr, Symbol("#17#22")), Array{Float64, 1}})
precompile(Tuple{getfield(GR.jlgr, Symbol("#17#22")), Float64})
precompile(Tuple{typeof(Base._collect), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(GR.jlgr, Symbol("#17#22"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(GR.jlgr, Symbol("#17#22"))}})
precompile(Tuple{typeof(Base._similar_for), Array{Float64, 1}, Type{Float64}, Base.Generator{Array{Float64, 1}, getfield(GR.jlgr, Symbol("#17#22"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(GR.jlgr, Symbol("#17#22"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, getfield(GR.jlgr, Symbol("#17#22"))}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}, Int64})
precompile(Tuple{typeof(GR.polymarker3d), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(GR.hexbin), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(GR.jlgr, Symbol("##hexbin#48")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.jlgr.hexbin), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(GR.jlgr, Symbol("##plot_args#23")), Symbol, typeof(GR.jlgr.plot_args), Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(GR.jlgr.plot_args), Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.vect), Tuple{Array{Float64, 1}, Array{Float64, 1}, DataType, DataType}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Array{Float64, 1}, Array{Float64, 1}, DataType, DataType}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}, DataType, DataType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}, DataType, DataType}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Array{Float64, 1}, Array{Float64, 1}, DataType, DataType}, 1}, Int64})
precompile(Tuple{typeof(GR.hexbin), Array{Float64, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Tuple{Int64, Int32}, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int32}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int32}, Int64, Int64})
precompile(Tuple{typeof(Base.:(&)), Int32, Int64})
precompile(Tuple{typeof(Base.:(-)), Int32, Int64})
precompile(Tuple{typeof(GR.setwindow), Int64, Int64, Int64, Int32})
precompile(Tuple{typeof(GR.setviewport), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.:(+)), Int32, Float64})
precompile(Tuple{typeof(Base.:(-)), Int64, Float64})
precompile(Tuple{typeof(GR.cellarray), Int64, Int64, Float64, Float64, Int64, Int64, Array{Int32, 2}})
precompile(Tuple{typeof(GR.tick), Int64, Int32})
precompile(Tuple{typeof(GR.axes), Int64, Float64, Int64, Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.sin), Tuple{Array{Float64, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.cos), Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Array{Float64, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Array{Float64, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Array{Float64, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Array{Float64, 1}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Array{Float64, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Array{Float64, 1}}}}}})
precompile(Tuple{typeof(GR.contour), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(GR.jlgr, Symbol("##contour#46")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.jlgr.contour), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(Base.length), Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Base.UnitRange{Int64}, Tuple{Int64}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Float64}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(GR.gridit), Array{Float64, 1}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}, Int64, Int64})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, Symbol, Tuple{Float64, Float64}})
precompile(Tuple{typeof(GR.adjustrange), Float64, Float64})
precompile(Tuple{typeof(GR.jlgr.linspace), Float64, Float64, Int64})
precompile(Tuple{typeof(GR.contour), Array{Float64, 1}, Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(GR.setwindow), Int64, Int64, Float64, Float64})
precompile(Tuple{typeof(GR.axes), Int64, Float64, Int64, Float64, Int64, Int64, Float64})
precompile(Tuple{Type{Base.LinRange{T} where T}, Int64, Base.Irrational{:π}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, LinearAlgebra.Adjoint{Float64, Base.LinRange{Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.sin), Tuple{LinearAlgebra.Adjoint{Float64, Base.LinRange{Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.sin), Tuple{LinearAlgebra.Adjoint{Float64, Base.LinRange{Float64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.LinRange{Float64}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.sin), Tuple{LinearAlgebra.Adjoint{Float64, Base.LinRange{Float64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.LinRange{Float64}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), LinearAlgebra.Adjoint{Float64, Base.LinRange{Float64}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Extruded{LinearAlgebra.Adjoint{Float64, Base.LinRange{Float64}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.Broadcast.Extruded{Base.LinRange{Float64}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.Broadcast.throwdm), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.sin), Tuple{LinearAlgebra.Adjoint{Float64, Base.LinRange{Float64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.LinRange{Float64}}}}}})
precompile(Tuple{typeof(GR.contour), Base.LinRange{Float64}, Base.LinRange{Float64}, Array{Float64, 2}})
precompile(Tuple{getfield(GR.jlgr, Symbol("##contour#46")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.jlgr.contour), Base.LinRange{Float64}, Vararg{Any, N} where N})
precompile(Tuple{getfield(GR.jlgr, Symbol("##plot_args#23")), Symbol, typeof(GR.jlgr.plot_args), Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}, Array{Float64, 2}}})
precompile(Tuple{getfield(GR.jlgr, Symbol("#plot_args##kw")), NamedTuple{(:fmt,), Tuple{Symbol}}, typeof(GR.jlgr.plot_args), Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.adjoint), Array{Float64, 2}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, DataType, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, DataType, String}, Int64, Int64})
precompile(Tuple{typeof(GR.jlgr.given), LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}})
precompile(Tuple{typeof(GR.jlgr.isvector), LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.float), Base.LinRange{Float64}})
precompile(Tuple{typeof(Base.float), LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}})
precompile(Tuple{Type{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}, Int64})
precompile(Tuple{typeof(Base.vec), LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.vect), Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, DataType}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, DataType}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, DataType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, DataType}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, DataType}, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, DataType, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, DataType, String}, Int64, Int64})
precompile(Tuple{typeof(GR.jlgr.given), Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Int64}})
precompile(Tuple{typeof(GR.jlgr.Extrema64), Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}})
precompile(Tuple{typeof(GR.contour), Base.LinRange{Float64}, Base.LinRange{Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Int64})
precompile(Tuple{typeof(GR.contourf), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(GR.jlgr, Symbol("##contourf#47")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.jlgr.contourf), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(GR.contourf), Array{Float64, 1}, Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(GR.contourf), Base.LinRange{Float64}, Base.LinRange{Float64}, Array{Float64, 2}})
precompile(Tuple{getfield(GR.jlgr, Symbol("##contourf#47")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.jlgr.contourf), Base.LinRange{Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(GR.contourf), Base.LinRange{Float64}, Base.LinRange{Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.sin), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.cos), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(+)), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(GR.tricont), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(GR, Symbol("##tricont#32")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.tricont), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(GR.jlgr.tricont), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(GR.jlgr, Symbol("##tricont#74")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.jlgr.tricont), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(GR.tricontour), Array{Float64, 1}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(GR.surface), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(GR.jlgr, Symbol("##surface#53")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.jlgr.surface), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float32, 1}, Float32, Base.Generator{Array{Float64, 1}, Type{Float32}}, Int64})
precompile(Tuple{typeof(GR.GR3.surface), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(GR.surface), Base.LinRange{Float64}, Base.LinRange{Float64}, Array{Float64, 2}})
precompile(Tuple{getfield(GR.jlgr, Symbol("##surface#53")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.jlgr.surface), Base.LinRange{Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float32, 1}, Float32, Base.Generator{Base.LinRange{Float64}, Type{Float32}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.LinRange{Float64}, Type{Float32}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float32, 1}, Base.Generator{Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Type{Float32}}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Type{Float32}}})
precompile(Tuple{typeof(GR.GR3.surface), Base.LinRange{Float64}, Base.LinRange{Float64}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Int64})
precompile(Tuple{typeof(GR.trisurf), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(GR, Symbol("##trisurf#31")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.trisurf), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(GR.jlgr.trisurf), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(GR.jlgr, Symbol("##trisurf#73")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.jlgr.trisurf), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(GR.trisurface), Array{Float64, 1}, Array{Float64, 1}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(-)), Tuple{Int64, Base.Broadcast.Extruded{LinearAlgebra.Adjoint{Float64, Base.LinRange{Float64}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.RefValue{Base.Val{2}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.:(*)), Int64, Array{Float64, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{LinearAlgebra.Adjoint{Float64, Base.LinRange{Float64}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.RefValue{Base.Val{2}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.:(-)), Array{Float64, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, getfield(LinearAlgebra, Symbol("#9#10")){typeof(Base.:(/))}, Tuple{Base.Broadcast.Extruded{Base.LinRange{Float64}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcast), getfield(LinearAlgebra, Symbol("#9#10")){typeof(Base.:(/))}, Base.LinRange{Float64}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{LinearAlgebra.Adjoint{Float64, Base.LinRange{Float64}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.RefValue{Base.Val{3}}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Base.LinRange{Float64}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Val{5}}}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{LinearAlgebra.Adjoint{Float64, Base.LinRange{Float64}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Int64}}, Base.RefValue{Base.Val{2}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.exp), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Base.LinRange{Float64}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Val{2}}}}}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.:(*)), Float64, Array{Float64, 2}})
precompile(Tuple{typeof(Base.Broadcast.combine_axes), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.exp), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.LinRange{Float64}, Base.RefValue{Base.Val{2}}}}}}}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.exp), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Base.LinRange{Float64}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Val{2}}}}}}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.exp), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Base.LinRange{Float64}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Val{2}}}}}}}}}}}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(GR.jlgr.peaks), Int64})
precompile(Tuple{typeof(GR.peaks)})
precompile(Tuple{getfield(GR.jlgr, Symbol("##surface#53")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.jlgr.surface), Array{Float64, 2}})
precompile(Tuple{typeof(GR.surface), Array{Float64, 2}})
precompile(Tuple{typeof(Base.size), LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, DataType, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, DataType, String}, Int64, Int64})
precompile(Tuple{typeof(Base.float), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.vect), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, DataType}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, DataType}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, DataType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, DataType}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, DataType}, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, DataType, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, DataType, String}, Int64, Int64})
precompile(Tuple{typeof(Base.length), Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float32, 1}, Float32, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Type{Float32}}, Int64})
precompile(Tuple{typeof(GR.GR3.surface), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Int64})
precompile(Tuple{typeof(GR.wireframe), Base.LinRange{Float64}, Vararg{Any, N} where N})
precompile(Tuple{getfield(GR, Symbol("##wireframe#19")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.wireframe), Base.LinRange{Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(GR.jlgr.wireframe), Base.LinRange{Float64}, Vararg{Any, N} where N})
precompile(Tuple{getfield(GR.jlgr, Symbol("##wireframe#52")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.jlgr.wireframe), Base.LinRange{Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(GR.surface), Base.LinRange{Float64}, Base.LinRange{Float64}, Base.ReshapedArray{Float64, 1, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Int64})
precompile(Tuple{getfield(GR.jlgr, Symbol("##heatmap#49")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.jlgr.heatmap), Array{Float64, 2}})
precompile(Tuple{typeof(GR.heatmap), Array{Float64, 2}})
precompile(Tuple{typeof(Base.setproperty!), GR.jlgr.PlotObject, Symbol, Array{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, DataType, String}, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, DataType, String}, 1}, Type{T} where T})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, DataType, String}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, DataType, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, DataType, String}, Int64, Int64})
precompile(Tuple{typeof(GR.jlgr.given), Base.UnitRange{Int64}})
precompile(Tuple{typeof(GR.jlgr.Extrema64), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.min), Int64, Float64})
precompile(Tuple{typeof(Base.max), Int64, Float64})
precompile(Tuple{typeof(GR.jlgr.Extrema64), LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, DataType, String}, 1}, Int64})
precompile(Tuple{typeof(Base.map), Function, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(GR.jlgr, Symbol("#15#20")), LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}})
precompile(Tuple{getfield(GR.jlgr, Symbol("#15#20")), Float64})
precompile(Tuple{typeof(Base._collect), LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Base.Generator{LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, getfield(GR.jlgr, Symbol("#15#20"))}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_similar), LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Base.Generator{LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, getfield(GR.jlgr, Symbol("#15#20"))}})
precompile(Tuple{typeof(Base._similar_for), LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Type{Float64}, Base.Generator{LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, getfield(GR.jlgr, Symbol("#15#20"))}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 2}, Base.Generator{LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, getfield(GR.jlgr, Symbol("#15#20"))}, Int64, Tuple{Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 2}, Float64, Base.Generator{LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, getfield(GR.jlgr, Symbol("#15#20"))}, Tuple{Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(GR.jlgr, Symbol("#16#21")), Array{Float64, 2}})
precompile(Tuple{getfield(GR.jlgr, Symbol("#16#21")), Float64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Float64, 2}, getfield(GR.jlgr, Symbol("#16#21"))}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Float64, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 2}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(GR.jlgr.to_rgba), Float64, Array{Float64, 2}})
precompile(Tuple{typeof(Base._array_for), Type{UInt32}, Array{Float64, 2}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to!), Array{UInt32, 2}, Base.Generator{Array{Float64, 2}, getfield(GR.jlgr, Symbol("#16#21"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{UInt32, 2}, UInt32, Base.Generator{Array{Float64, 2}, getfield(GR.jlgr, Symbol("#16#21"))}, Int64})
precompile(Tuple{typeof(GR.drawimage), Float64, Float64, Float64, Float64, Int64, Int64, Array{UInt32, 2}})
precompile(Tuple{getfield(GR.jlgr, Symbol("##imshow#70")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.jlgr.imshow), Array{Float64, 2}})
precompile(Tuple{typeof(GR.imshow), Array{Float64, 2}})
precompile(Tuple{typeof(Base.setproperty!), GR.jlgr.PlotObject, Symbol, Array{Tuple{DataType, DataType, Array{Float64, 2}, DataType, String}, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Tuple{DataType, DataType, Array{Float64, 2}, DataType, String}, 1}, Type{T} where T})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{DataType, DataType, Array{Float64, 2}, DataType, String}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataType, DataType, Array{Float64, 2}, DataType, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataType, DataType, Array{Float64, 2}, DataType, String}, Int64, Int64})
precompile(Tuple{typeof(GR.jlgr.given), Array{Float64, 2}})
precompile(Tuple{typeof(GR.jlgr.Extrema64), Array{Float64, 2}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{DataType, DataType, Array{Float64, 2}, DataType, String}, 1}, Int64})
precompile(Tuple{typeof(GR.jlgr.fix_minmax), Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(GR.adjustlimits), Int64, Int64})
precompile(Tuple{typeof(GR.jlgr.plot_img), Array{Float64, 2}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Base.Colon})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(GR.jlgr, Symbol("#11#12")){Float64, Float64}, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 2}, Float64, Base.Generator{LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, getfield(GR.jlgr, Symbol("#11#12")){Float64, Float64}}, Tuple{Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base._collect), LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Base.Generator{LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, getfield(GR.jlgr, Symbol("#11#12")){Float64, Float64}}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_similar), LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, Base.Generator{LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}, getfield(GR.jlgr, Symbol("#11#12")){Float64, Float64}}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base.round), Type{Int32}, Float64})
precompile(Tuple{typeof(Base.setindex!), Array{Int32, 2}, Int32, Int64})
precompile(Tuple{typeof(GR.cellarray), Float64, Float64, Float64, Float64, Int64, Int64, Array{Int32, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Base.LinRange{Float64}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Val{2}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.LinRange{Float64}, Base.RefValue{Base.Val{2}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.LinRange{Float64}, Base.RefValue{Base.Val{2}}}}, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.LinRange{Float64}, Base.RefValue{Base.Val{2}}}}, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.reshape), Base.LinRange{Float64}, Int64, Int64, Vararg{Union{Base.Colon, Int64}, N} where N})
precompile(Tuple{typeof(Base._throw_dmrs), Int64, String, Tuple{Int64, Int64, Int64}})
precompile(Tuple{getfield(Base, Symbol("#throw2#198")), Base.LinRange{Float64}, Tuple{Int64, Int64, Base.Colon}})
precompile(Tuple{typeof(Base.reshape), Base.LinRange{Float64}, Tuple{Int64, Int64, Base.Colon}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Function, Base.ReshapedArray{Float64, 3, Base.LinRange{Float64}, Tuple{}}, Base.Val{2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.ReshapedArray{Float64, 3, Base.LinRange{Float64}, Tuple{}}, Base.RefValue{Base.Val{2}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.LinRange{Float64}, Base.RefValue{Base.Val{2}}}}, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.ReshapedArray{Float64, 3, Base.LinRange{Float64}, Tuple{}}, Base.RefValue{Base.Val{2}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.LinRange{Float64}, Base.RefValue{Base.Val{2}}}}, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.ReshapedArray{Float64, 3, Base.LinRange{Float64}, Tuple{}}, Base.RefValue{Base.Val{2}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.LinRange{Float64}, Base.RefValue{Base.Val{2}}}}, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.ReshapedArray{Float64, 3, Base.LinRange{Float64}, Tuple{}}, Base.RefValue{Base.Val{2}}}}}}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(^)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.LinRange{Float64}, Base.RefValue{Base.Val{2}}}}, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.ReshapedArray{Float64, 3, Base.LinRange{Float64}, Tuple{}}, Base.RefValue{Base.Val{2}}}}}}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(^)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.LinRange{Float64}, Base.RefValue{Base.Val{2}}}}, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.ReshapedArray{Float64, 3, Base.LinRange{Float64}, Tuple{}}, Base.RefValue{Base.Val{2}}}}}}, Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(^)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.LinRange{Float64}, Base.RefValue{Base.Val{2}}}}, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.ReshapedArray{Float64, 3, Base.LinRange{Float64}, Tuple{}}, Base.RefValue{Base.Val{2}}}}}}, Float64}}}})
precompile(Tuple{typeof(Base.Math.throw_exp_domainerror), Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReshapedArray{Float64, 3, Base.LinRange{Float64}, Tuple{}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReshapedArray{Float64, 3, Base.LinRange{Float64}, Tuple{}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(^)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Base.LinRange{Float64}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Val{2}}}}, Base.Broadcast.Extruded{LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Base.ReshapedArray{Float64, 3, Base.LinRange{Float64}, Tuple{}}, Tuple{Bool, Bool, Bool}, Tuple{Int64, Int64, Int64}}, Base.RefValue{Base.Val{2}}}}}}, Float64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{3}}})
precompile(Tuple{typeof(Base.Broadcast.throwdm), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(-)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(^)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.LinRange{Float64}, Base.RefValue{Base.Val{2}}}}, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.ReshapedArray{Float64, 3, Base.LinRange{Float64}, Tuple{}}, Base.RefValue{Base.Val{2}}}}}}, Float64}}}}})
precompile(Tuple{Type{NamedTuple{(:isovalue,), T} where T<:Tuple}, Tuple{Float64}})
precompile(Tuple{Type{Base.Dict{Symbol, Float64}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Float64}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Float64}, Float64, Symbol})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:isovalue,), Tuple{Float64}}}})
precompile(Tuple{typeof(GR.jlgr.create_context), Base.Dict{Symbol, Float64}})
precompile(Tuple{typeof(GR.jlgr.create_context), Symbol, Base.Dict{Symbol, Float64}})
precompile(Tuple{getfield(GR.jlgr, Symbol("##isosurface#71")), Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:isovalue,), Tuple{Float64}}}, typeof(GR.jlgr.isosurface), Array{Float64, 3}})
precompile(Tuple{getfield(GR, Symbol("#isosurface##kw")), NamedTuple{(:isovalue,), Tuple{Float64}}, typeof(GR.isosurface), Array{Float64, 3}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, Base.Dict{Symbol, Float64}})
precompile(Tuple{typeof(Base.setproperty!), GR.jlgr.PlotObject, Symbol, Array{Tuple{DataType, DataType, Array{Float64, 3}, DataType, String}, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Tuple{DataType, DataType, Array{Float64, 3}, DataType, String}, 1}, Type{T} where T})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{DataType, DataType, Array{Float64, 3}, DataType, String}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataType, DataType, Array{Float64, 3}, DataType, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataType, DataType, Array{Float64, 3}, DataType, String}, Int64, Int64})
precompile(Tuple{typeof(GR.jlgr.given), Array{Float64, 3}})
precompile(Tuple{typeof(GR.jlgr.Extrema64), Array{Float64, 3}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{DataType, DataType, Array{Float64, 3}, DataType, String}, 1}, Int64})
precompile(Tuple{typeof(Base.filter), getfield(Base, Symbol("#66#67")){typeof(Base.isnan)}, Array{Float64, 3}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.round), Tuple{Base.RefValue{Type{UInt16}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 3}, Tuple{Bool, Bool, Bool}, Tuple{Int64, Int64, Int64}}, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(-)), Tuple{Float64, Float64}}}}, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{3}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Float64, Float64, Float64}, typeof(Base.float)}})
precompile(Tuple{typeof(GR.GR3.createisosurfacemesh), Array{UInt16, 3}, Tuple{Float64, Float64, Float64}, Tuple{Float64, Float64, Float64}, Int64})
precompile(Tuple{typeof(GR.jlgr.plot_iso), Array{Float64, 3}})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, Symbol, Float64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Int64, Int64, Int64}, Type{Float32}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Float64, Float64, Float64}, Type{Float32}}})
precompile(Tuple{typeof(GR.GR3.drawmesh), Int32, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Tuple{Float64, Float64, Float64}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(GR.GR3.cameralookat), Float64, Float64, Float64, Int64, Int64, Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(GR.GR3.drawimage), Float64, Float64, Float64, Float64, Int64, Int64, Int64})
precompile(Tuple{typeof(GR.GR3.terminate)})
precompile(Tuple{typeof(Base.randn), Random.MersenneTwister, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.randn), Random.MersenneTwister, Type{Float64}, Int64, Int64, Vararg{Int64, N} where N})
precompile(Tuple{Type{Array{Float64, N} where N}, UndefInitializer, Int64, Int64, Int64})
precompile(Tuple{typeof(Random.randn!), Random.MersenneTwister, Array{Float64, 3}})
precompile(Tuple{getfield(GR.jlgr, Symbol("##volume#54")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.jlgr.volume), Array{Float64, 3}})
precompile(Tuple{typeof(GR.volume), Array{Float64, 3}})
precompile(Tuple{typeof(GR.shade), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(GR, Symbol("##shade#33")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.shade), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(GR.jlgr.shade), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(GR.jlgr, Symbol("##shade#75")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GR.jlgr.shade), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(GR.jlgr, Symbol("#plot_args##kw")), NamedTuple{(:fmt,), Tuple{Symbol}}, typeof(GR.jlgr.plot_args), Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(GR.jlgr.contains_NaN), Array{Float64, 1}})
precompile(Tuple{Type{NamedTuple{(:xform,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(GR, Symbol("#shadepoints##kw")), NamedTuple{(:xform,), Tuple{Int64}}, typeof(GR.shadepoints), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(GR.clearws)})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(*)), Int64, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Int64, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Int64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Int64, Array{Float64, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#3#4")), Base.UnitRange{Int64}})
precompile(Tuple{getfield(Main, Symbol("#3#4")), Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#3#4"))}})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#3#4"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#3#4"))}, Int64})
precompile(Tuple{typeof(GR.setwindow), Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(GR.setcolormap), Int64})
precompile(Tuple{typeof(GR.setlinecolorind), Int64})
precompile(Tuple{typeof(GR.setmarkersize), Int64})
precompile(Tuple{typeof(GR.setmarkertype), Int64})
precompile(Tuple{typeof(GR.setmarkercolorind), Int64})
precompile(Tuple{typeof(GR.settextalign), Int64, Int64})
precompile(Tuple{typeof(GR.settextfontprec), Int64, Int64})
precompile(Tuple{typeof(GR.gridit), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{typeof(GR.surface), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(GR.axes), Float64, Float64, Int64, Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(GR.updatews)})
precompile(Tuple{typeof(Plots.gr)})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{}})
precompile(Tuple{typeof(Base.setproperty!), Plots.CurrentBackend, Symbol, Plots.GRBackend})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Int64, 0}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{RecipesBase.RecipeData}})
precompile(Tuple{typeof(RecipesBase.plot), Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots._backend_instance), Symbol})
precompile(Tuple{typeof(Plots.backend)})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Plots.backend), Symbol})
precompile(Tuple{typeof(Plots._pick_default_backend)})
precompile(Tuple{Type{Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}}})
precompile(Tuple{Type{Plots.Plot{T} where T<:RecipesBase.AbstractBackend}})
precompile(Tuple{getfield(Plots, Symbol("##plot#133")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Base.UnitRange{Int64}, Vararg{Any, N} where N})
precompile(Tuple{Type{Plots.Plot{T} where T<:RecipesBase.AbstractBackend}, Plots.GRBackend, Int64, Plots.Attr, Array{Plots.Series, 1}, Nothing, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.EmptyLayout, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Bool})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Symbol, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#239#241")), Base.Dict{Symbol, Any}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.copyto!), Array{RecipesBase.RecipeData, 1}, Int64, Array{RecipesBase.RecipeData, 1}, Int64, Int64})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Base.UnitRange{Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipe), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}, RecipesBase.RecipeData})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.getindex), Array{Bool, 1}, Int64})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:lens}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._process_plotrecipe), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Plots.slice_arg!), Base.Dict{Symbol, Any}, Plots.Attr, Symbol, Int64, Bool})
precompile(Tuple{typeof(Plots.fg_color), Plots.Attr})
precompile(Tuple{typeof(Plots.color_or_nothing!), Plots.Attr, Symbol})
precompile(Tuple{typeof(Plots._update_plot_args), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.getindex), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots._plot_setup), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Plots.series_idx), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.link_subplots), Array{RecipesBase.AbstractLayout, 1}, Symbol})
precompile(Tuple{typeof(Plots.link_axes!), Array{RecipesBase.AbstractLayout, 1}, Symbol})
precompile(Tuple{typeof(Base.getindex), Plots.Axis, Symbol})
precompile(Tuple{typeof(Plots.link_axes!), Plots.Axis, Plots.Axis})
precompile(Tuple{typeof(Plots.link_axes!), Plots.GridLayout, Symbol})
precompile(Tuple{typeof(Plots.is_axis_attr), Symbol})
precompile(Tuple{typeof(Plots._subplot_setup), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Plots.slice_arg!), Plots.Attr, Plots.Attr, Symbol, Int64, Bool})
precompile(Tuple{typeof(Base.getindex), Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots._update_subplot_colors), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Plots.Attr, Int64, Bool})
precompile(Tuple{typeof(Plots.is3d), Symbol})
precompile(Tuple{typeof(Plots._override_seriestype_check), Plots.Attr, Symbol})
precompile(Tuple{typeof(Plots._prepare_subplot), Plots.Plot{Plots.GRBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots.isvertical), Plots.Attr})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Subplot{Plots.GRBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots._expand_subplot_extrema), Plots.Subplot{Plots.GRBackend}, Plots.Attr, Symbol})
precompile(Tuple{typeof(Plots._series_index), Plots.Attr, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.autopick_ignore_none_auto), Array{Symbol, 1}, Int64})
precompile(Tuple{typeof(Plots.aliasesAndAutopick), Plots.Attr, Symbol, Base.Dict{Symbol, Symbol}, Array{Symbol, 1}, Int64})
precompile(Tuple{typeof(Plots.like_histogram), Symbol})
precompile(Tuple{typeof(Plots.ensure_gradient!), Plots.Attr, Symbol, Symbol})
precompile(Tuple{typeof(Plots._replace_linewidth), Plots.Attr})
precompile(Tuple{typeof(Plots._update_series_attributes!), Plots.Attr, Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.iterate), Plots.Attr, Tuple{Array{Symbol, 1}, Int64}})
precompile(Tuple{typeof(Plots.parse_axis_kw), Symbol})
precompile(Tuple{typeof(Plots.default), Symbol})
precompile(Tuple{typeof(Plots.warnOnUnsupported_args), Plots.GRBackend, Plots.Attr})
precompile(Tuple{typeof(Plots.is_seriestype_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(Plots.is_style_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(Plots.is_marker_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(Plots.warnOnUnsupported), Plots.GRBackend, Plots.Attr})
precompile(Tuple{typeof(Plots._add_the_series), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots._process_seriesrecipe), Plots.Plot{Plots.GRBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots.isijulia)})
precompile(Tuple{typeof(Plots.gr_set_font), Plots.Font})
precompile(Tuple{typeof(Plots.is3d), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.optimal_ticks_and_labels), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Nothing})
precompile(Tuple{typeof(Plots.get_ticks), Plots.Subplot{Plots.GRBackend}, Plots.Axis})
precompile(Tuple{typeof(Plots.gr_set_xticks_font), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.gr_set_yticks_font), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._update_min_padding!), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.recompute_lengths), Array{Measures.Measure, 1}})
precompile(Tuple{typeof(Plots.update_child_bboxes!), Plots.GridLayout, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Plots.update_child_bboxes!), Plots.GridLayout})
precompile(Tuple{typeof(Plots.update_inset_bboxes!), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._update_min_padding!), Plots.GridLayout})
precompile(Tuple{typeof(Plots.prepare_output), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.gr_display), Plots.Plot{Plots.GRBackend}, String})
precompile(Tuple{typeof(Plots._display), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.inline), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._do_plot_show), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.println), String, Array{Any, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.prepend!), Array{RecipesBase.RecipeData, 1}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots.prepareSeriesData), Array{Float64, 1}})
precompile(Tuple{typeof(Plots.compute_xyz), Nothing, Nothing, Nothing})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Base.UnitRange{Int64}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, typeof(Base.float)}, Int64})
precompile(Tuple{typeof(Base._replace!), getfield(Plots, Symbol("#141#142")), Array{Float64, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Plots.process_fillrange), Nothing, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.process_ribbon), Nothing, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.compute_xyz), Base.UnitRange{Int64}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.UnitRange{Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Nothing, Symbol})
precompile(Tuple{typeof(Plots._add_markershape), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._filter_input_data!), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.first), Tuple{}})
precompile(Tuple{typeof(Plots.make_fillrange_from_ribbon), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._preprocess_userrecipe), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.is_scale_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(Plots.warnOnUnsupported_scales), Plots.GRBackend, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.push!), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._add_errorbar_kw), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._add_smooth_kw), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Int64, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Symbol, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Bool, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Nothing, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, String, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.GRBackend}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(PlotUtils.isdark), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.GRBackend}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Plots._create_backend_figure), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.layout_args), Plots.Attr})
precompile(Tuple{typeof(Plots.build_layout), Plots.Attr})
precompile(Tuple{typeof(Plots.compute_gridsize), Int64, Int64, Int64})
precompile(Tuple{typeof(Plots.layout_args), Int64})
precompile(Tuple{Type{Measures.Length{U, T} where T where U}, Symbol, Float64})
precompile(Tuple{getfield(Plots, Symbol("##GridLayout#184")), Plots.RootLayout, Array{Float64, 1}, Array{Float64, 1}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Plots.GridLayout}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{Type{Array{RecipesBase.AbstractLayout, 2}}, UndefInitializer, Int64, Int64})
precompile(Tuple{Type{Measures.Length{:pct, Float64}}, Float64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64, Int64})
precompile(Tuple{typeof(Plots.build_layout), Plots.GridLayout, Int64})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:parent,), Tuple{Plots.GridLayout}}, Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.GRBackend})
precompile(Tuple{typeof(Plots.attr), Plots.EmptyLayout, Symbol, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{Type{Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}}})
precompile(Tuple{typeof(Plots._cycle), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64})
precompile(Tuple{typeof(Plots.get_subplot), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{getfield(Base, Symbol("##chop#325")), Int64, Int64, typeof(Base.chop), String})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Base.Dict{Symbol, Any}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.get), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Float64, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Float64, Symbol})
precompile(Tuple{typeof(Plots._update_subplot_periphery), Plots.Subplot{Plots.GRBackend}, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Plots.convertLegendValue), Symbol})
precompile(Tuple{typeof(Base.:(==)), ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.typename), UnionAll})
precompile(Tuple{typeof(Base.eltype), Type{C}} where C<:(ColorTypes.Colorant{T, N} where N where T))
precompile(Tuple{typeof(Base.eltype), Type})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Color{T, 3} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.LCHab{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Colorant{T, N}}} where N where T)
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.ColorAlpha{ColorTypes.RGB{Float64}, Float64, 4}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGBA{Float64}}})
precompile(Tuple{typeof(Base.typeintersect), Any, Any})
precompile(Tuple{typeof(ColorTypes.pureintersect), Type{Any}, Type{Float64}})
precompile(Tuple{typeof(Base.parameter_upper_bound), UnionAll, Int64})
precompile(Tuple{typeof(ColorTypes.eltypes_supported), Type{ColorTypes.LCHab{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Color{Float64, 3}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.LCHab{Float64}}})
precompile(Tuple{typeof(ColorTypes.eltypes_supported), Type{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Lab{Float64}}})
precompile(Tuple{typeof(ColorTypes.eltypes_supported), Type{ColorTypes.Lab{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.XYZ{Float64}}})
precompile(Tuple{typeof(ColorTypes.eltypes_supported), Type{ColorTypes.XYZ{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base.allocatedinline), Type{ColorTypes.RGBA{Float64}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.AbstractRGB{Float64}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGB{Float64}}})
precompile(Tuple{typeof(ColorTypes.eltypes_supported), Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{ColorTypes.RGB{Float64}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.AbstractRGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(PlotUtils.plot_color), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(PlotUtils.lightness_from_background), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Colors.cnvt), Type{ColorTypes.XYZ{Float64}}, ColorTypes.Lab{Float64}, ColorTypes.XYZ{Float64}})
precompile(Tuple{typeof(Colors.cnvt), Type{ColorTypes.RGB{Float64}}, ColorTypes.XYZ{Float64}})
precompile(Tuple{typeof(PlotUtils.adjust_lch), ColorTypes.RGBA{Float64}, Float64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{ColorTypes.RGBA{Float64}, 1}, ColorTypes.RGBA{Float64}, Base.Generator{Array{ColorTypes.RGBA{Float64}, 1}, getfield(PlotUtils, Symbol("#2#3")){Float64, Int64}}, Int64})
precompile(Tuple{typeof(Base._collect), Array{ColorTypes.RGBA{Float64}, 1}, Base.Generator{Array{ColorTypes.RGBA{Float64}, 1}, getfield(PlotUtils, Symbol("#2#3")){Float64, Int64}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{ColorTypes.RGB{Float64}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{ColorTypes.RGB{Float64}, 1}, Array{ColorTypes.RGBA{Float64}, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{ColorTypes.RGB{Float64}, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{ColorTypes.RGB{Float64}, 1}, Int64, Array{ColorTypes.RGB{Float64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Colors._colordiff), ColorTypes.Lab{Float64}, ColorTypes.Lab{Float64}, Colors.DE_2000})
precompile(Tuple{getfield(Colors, Symbol("##distinguishable_colors#16")), Bool, typeof(Base.identity), Array{Float64, 1}, Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(Colors.distinguishable_colors), Int64, Array{ColorTypes.RGB{Float64}, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.Sort.Float.nans2right!), Array{Float64, 1}, Base.Order.ForwardOrdering, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Sort.Float.Left})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Float64, 1}, Int64, Int64, Base.Sort.Float.Left})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Sort.Float.Left})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Sort.Float.Right})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Float64, 1}, Int64, Int64, Base.Sort.Float.Right})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Sort.Float.Right})
precompile(Tuple{typeof(Base.Sort.Float.fpsort!), Array{Float64, 1}, Base.Sort.QuickSortAlg, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.unaliascopy), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.unalias), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(Base, Symbol("##diff#413")), Int64, typeof(Base.diff), Array{Float64, 1}})
precompile(Tuple{typeof(Base.error)})
precompile(Tuple{typeof(PlotUtils.getpctrange), Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(/)), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Float64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(PlotUtils.get_zvalues), Int64})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{ColorTypes.RGB{Float64}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{ColorTypes.RGB{Float64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{ColorTypes.RGBA{Float64}, 1}, Array{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{ColorTypes.RGBA{Float64}, 1}, ColorTypes.RGBA{Float64}, Base.Generator{Array{ColorTypes.RGB{Float64}, 1}, Type{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{ColorTypes.RGB{Float64}, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(PlotUtils.gradient_from_list), Array{ColorTypes.RGB{Float64}, 1}})
precompile(Tuple{getfield(PlotUtils, Symbol("##generate_colorgradient#1")), Array{ColorTypes.RGBA{Float64}, 1}, Float64, Int64, Int64, typeof(PlotUtils.generate_colorgradient), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(PlotUtils.generate_colorgradient), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.getindex), PlotUtils.ColorGradient, Float64})
precompile(Tuple{typeof(PlotUtils.cgrad_reverse), Symbol})
precompile(Tuple{getfield(PlotUtils, Symbol("#9#11")), Base.Pair{Symbol, PlotUtils.ColorLibrary}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(PlotUtils, Symbol("#9#11")), Base.Dict{Symbol, PlotUtils.ColorLibrary}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(PlotUtils, Symbol("#9#11")), Base.Dict{Symbol, PlotUtils.ColorLibrary}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Symbol, 1}, Base.Generator{Base.Iterators.Filter{getfield(PlotUtils, Symbol("#9#11")), Base.Dict{Symbol, PlotUtils.ColorLibrary}}, getfield(PlotUtils, Symbol("#8#10"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Symbol, 1}, Base.Generator{Base.Iterators.Filter{getfield(PlotUtils, Symbol("#9#11")), Base.Dict{Symbol, PlotUtils.ColorLibrary}}, getfield(PlotUtils, Symbol("#8#10"))}})
precompile(Tuple{typeof(Base.getindex), PlotUtils.ColorLibrary, Symbol})
precompile(Tuple{typeof(PlotUtils.getgradient), Symbol, PlotUtils.ColorLibrary})
precompile(Tuple{typeof(Base.reverse), Array{ColorTypes.RGBA{Float64}, 1}, Int64, Int64})
precompile(Tuple{getfield(PlotUtils, Symbol("##cgrad_colors#17")), Symbol, typeof(PlotUtils.cgrad_colors), Symbol})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.log10), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.log2), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.log), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.exp10), Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.exp10), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}, Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{getfield(PlotUtils, Symbol("##cgrad#21")), Nothing, Symbol, typeof(PlotUtils.cgrad), Symbol})
precompile(Tuple{typeof(PlotUtils.get_color_palette), Symbol, ColorTypes.RGBA{Float64}, Int64})
precompile(Tuple{typeof(Colors.pow12_5), Float64})
precompile(Tuple{typeof(Colors.cnvt), Type{ColorTypes.XYZ{Float64}}, ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(Colors.cnvt), Type{ColorTypes.Lab{Float64}}, ColorTypes.XYZ{Float64}, ColorTypes.XYZ{Float64}})
precompile(Tuple{typeof(ColorTypes._convert), Type{ColorTypes.Lab{Float64}}, Type{ColorTypes.Lab{T} where T<:AbstractFloat}, Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(Base.Math.cbrt), Float64})
precompile(Tuple{typeof(Base.atan), Float64})
precompile(Tuple{typeof(Base.atan), Float64, Float64})
precompile(Tuple{typeof(Base.Math.sincos_domain_error), Float64})
precompile(Tuple{typeof(Base.Math.sincos), Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.__cat), Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Int64}, Tuple{Bool}, ColorTypes.RGBA{Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{ColorTypes.RGBA{Float64}, 1, Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{ColorTypes.RGBA{Float64}, 1, Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.cat_indices), Array{ColorTypes.RGBA{Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{ColorTypes.RGBA{Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{ColorTypes.RGBA{Float64}, 1}, Array{ColorTypes.RGBA{Float64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Math.sind), Float64})
precompile(Tuple{typeof(Base.Math.cosd), Float64})
precompile(Tuple{typeof(Base.__cat), Array{Float64, 1}, Tuple{Int64}, Tuple{Bool}, Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Float64})
precompile(Tuple{typeof(Base.cat_indices), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Float64, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Base.Sort, Symbol("##sortperm#11")), Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{Float64, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Sort.Float.nans2right!), Array{Int64, 1}, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.Perm{Base.Sort.Float.Left, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Int64, 1}, Int64, Int64, Base.Order.Perm{Base.Sort.Float.Left, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Sort.Float.Left, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.Perm{Base.Sort.Float.Right, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Int64, 1}, Int64, Int64, Base.Order.Perm{Base.Sort.Float.Right, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Sort.Float.Right, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Sort.Float.fpsort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{ColorTypes.RGBA{Float64}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Array{ColorTypes.RGBA{Float64}, 1}, Symbol})
precompile(Tuple{getfield(Plots, Symbol("##attr!#93")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{getfield(Plots, Symbol("##Axis#92")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Plots.Axis}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots.get_axis), Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots._update_axis), Plots.Axis, Base.Dict{Symbol, Any}, Symbol, Int64})
precompile(Tuple{typeof(Plots._update_axis_colors), Plots.Axis})
precompile(Tuple{typeof(Plots._update_axis_links), Plots.Plot{Plots.GRBackend}, Plots.Axis, Symbol})
precompile(Tuple{typeof(Plots._update_axis), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Int64})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, Symbol}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Array{Plots.Subplot{Plots.GRBackend}, 1}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Symbol}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Axis, Symbol})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Plots.link_axes!), Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.slice_arg!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Any}, Symbol, Int64, Bool})
precompile(Tuple{typeof(Plots._slice_series_args!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Int64})
precompile(Tuple{typeof(Plots.is_seriestype_supported), Symbol})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Float64})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, String})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Int64})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Nothing})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Array{ColorTypes.RGBA{Float64}, 1}})
precompile(Tuple{typeof(PlotUtils.get_color_palette), Array{ColorTypes.RGBA{Float64}, 1}, ColorTypes.RGBA{Float64}, Int64})
precompile(Tuple{typeof(Plots._update_axis), Plots.Axis, Plots.Attr, Symbol, Int64})
precompile(Tuple{typeof(Plots._update_axis), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Plots.Attr, Symbol, Int64})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Tuple{}})
precompile(Tuple{typeof(Plots._prepare_annotations), Plots.Subplot{Plots.GRBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots.annotations), Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), Plots.Axis, Symbol})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(==)), Plots.Extrema, Symbol})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Array{Float64, 1}})
precompile(Tuple{typeof(Base.eltype), Nothing})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Bool})
precompile(Tuple{typeof(Plots.like_surface), Symbol})
precompile(Tuple{typeof(Plots.get_series_color), Symbol, Plots.Subplot{Plots.GRBackend}, Int64, Symbol})
precompile(Tuple{typeof(Base.:(==)), Array{ColorTypes.RGBA{Float64}, 1}, Symbol})
precompile(Tuple{typeof(Plots.autopick), Array{ColorTypes.RGBA{Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.:(==)), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.in), String, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Nothing}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Base.Set{Symbol}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Base.Set{Symbol}}, Symbol})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#242#243")){Base.Set{Symbol}}, Base.Dict{Symbol, Base.Set{Symbol}}, Symbol})
precompile(Tuple{typeof(Base.union!), Base.Set{Symbol}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Symbol, Nothing}, Int64})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Symbol}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Base.Set{Symbol}}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Iterators.Flatten{Tuple{Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Base.Set{Symbol}}}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Set{Symbol}, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Nothing})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, ColorTypes.RGBA{Float64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Float64, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(!=)), Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(!=)), Bool, Bool})
precompile(Tuple{typeof(Base.:(==)), Bool, Symbol})
precompile(Tuple{typeof(Plots.scatter), Base.UnitRange{Int64}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##scatter#399")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.scatter), Base.UnitRange{Int64}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot#133")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:seriestype,), Tuple{Symbol}}}, typeof(RecipesBase.plot), Base.UnitRange{Int64}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:seriestype,), Tuple{Symbol}}, typeof(RecipesBase.plot), Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:scatter}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Base.show_unquoted_expr_fallback), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_list), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}, String, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_list), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}, Symbol, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_enclosed_list), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Array{Any, 1}, String, String, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_generator), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_unquoted_expr_fallback), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, String, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Symbol, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, String, Int64, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, String, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.show_enclosed_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Array{Any, 1}, String, String, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_generator), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Char, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Char, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.show_block), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Array{Any, 1}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.show_list), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}, Char, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_block), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Array{Any, 1}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.show_unquoted_quote_expr), Base.GenericIOBuffer{Array{UInt8, 1}}, Any, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Int64, Symbol})
precompile(Tuple{getfield(Plots, Symbol("##plot#133")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:seriestype,), Tuple{Symbol}}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{typeof(Plots.histogram), Array{Float64, 1}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Nothing, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Plots.compute_xyz), Nothing, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.OneTo{Int64}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:histogram}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Plots.Attr, Type{Base.Val{:histogram}}, Base.OneTo{Int64}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.iterate), Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots.replaceAlias!), Plots.Attr, Symbol, Base.Dict{Symbol, Symbol}})
precompile(Tuple{typeof(Plots.replaceAliases!), Plots.Attr, Base.Dict{Symbol, Symbol}})
precompile(Tuple{typeof(Plots.preprocessArgs!), Plots.Attr})
precompile(Tuple{typeof(Base._similar_for), Base.UnitRange{Int64}, Type{Symbol}, Base.KeySet{Symbol, Plots.Attr}, Base.HasLength})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Base.KeySet{Symbol, Plots.Attr}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.OneTo{Int64}})
precompile(Tuple{typeof(Plots.wraptuple), Nothing})
precompile(Tuple{typeof(Plots.series_annotations), Nothing})
precompile(Tuple{typeof(Base.:(==)), Nothing, Bool})
precompile(Tuple{typeof(Base.in), Nothing, Tuple{Bool, Nothing, Symbol}})
precompile(Tuple{typeof(Base.getindex), Plots.Attr, Symbol})
precompile(Tuple{getfield(StatsBase, Symbol("##s189#123")), Any, Any, Any})
precompile(Tuple{getfield(StatsBase, Symbol("##s189#124")), Any, Any, Any})
precompile(Tuple{typeof(Base.map), typeof(Base.eltype), Core.SimpleVector})
precompile(Tuple{typeof(Base.promote_type), Type{T} where T})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Plots.Attr, Type{Base.Val{:barhist}}, Base.OneTo{Int64}, Array{Float64, 1}, Nothing})
precompile(Tuple{Type{NamedTuple{(:normed, :weights), T} where T<:Tuple}, Tuple{Bool, Nothing}})
precompile(Tuple{typeof(Base.filter!), typeof(Base.isfinite), Array{Float64, 1}})
precompile(Tuple{typeof(Plots._hist_edges), Tuple{Array{Float64, 1}}, Symbol})
precompile(Tuple{getfield(Plots, Symbol("##_make_hist#231")), Bool, Nothing, typeof(Plots._make_hist), Tuple{Array{Float64, 1}}, Symbol})
precompile(Tuple{getfield(Plots, Symbol("#_make_hist##kw")), NamedTuple{(:normed, :weights), Tuple{Bool, Nothing}}, typeof(Plots._make_hist), Tuple{Array{Float64, 1}}, Symbol})
precompile(Tuple{getfield(Plots, Symbol("#_iqr#220")), Array{Float64, 1}})
precompile(Tuple{typeof(Plots.wand_edges), Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("#_cl#219")){Int64}, Symbol})
precompile(Tuple{getfield(Plots, Symbol("##_auto_binning_nbins#218")), Symbol, typeof(Plots._auto_binning_nbins), Tuple{Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.nbitslen), Float64, Int64})
precompile(Tuple{typeof(Base.floatrange), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(StatsBase.histrange), Float64, Float64, Int64, Symbol})
precompile(Tuple{typeof(Plots._hist_edge), Tuple{Array{Float64, 1}}, Int64, Symbol})
precompile(Tuple{typeof(Base.map), getfield(Plots, Symbol("#224#225")){Tuple{Array{Float64, 1}}, Symbol}, Tuple{Int64}})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Float64, 1}, Int64, Int64, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.PartialQuickSort{Base.UnitRange{Int64}}, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Statistics._quantilesort!), Array{Float64, 1}, Bool, Float64, Float64})
precompile(Tuple{getfield(Statistics, Symbol("##quantile!#52")), Bool, typeof(Statistics.quantile!), Array{Float64, 1}, Float64})
precompile(Tuple{typeof(Base.Sort.searchsortedlast), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.append!), StatsBase.Histogram{Int64, 1, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Tuple{Array{Float64, 1}}})
precompile(Tuple{getfield(StatsBase, Symbol("#fit##kw")), NamedTuple{(:closed,), Tuple{Symbol}}, typeof(StatsBase.fit), Type{StatsBase.Histogram{T, N, E} where E where N where T<:Real}, Tuple{Array{Float64, 1}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.float), StatsBase.Histogram{Int64, 1, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{getfield(StatsBase, Symbol("##s188#148")), Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nref")), LineNumberNode, Module, Int64, Symbol, Any})
precompile(Tuple{getfield(StatsBase, Symbol("##s189#146")), Any, Any, Any, Any})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base._foldl_impl), Base.MappingRF{DataType, Base.BottomRF{typeof(Base.add_sum)}}, Base._InitialValue, Array{Float64, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Float64, 1}, Int64, Int64, Int64})
precompile(Tuple{getfield(StatsBase, Symbol("##normalize!#147")), Symbol, typeof(LinearAlgebra.normalize!), StatsBase.Histogram{Float64, 1, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{getfield(LinearAlgebra, Symbol("#normalize!##kw")), NamedTuple{(:mode,), Tuple{Symbol}}, typeof(LinearAlgebra.normalize!), StatsBase.Histogram{Float64, 1, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.getproperty), StatsBase.Histogram{Float64, 1, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Array{Float64, 1}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Plots._scale_adjusted_values), Type{Float64}, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Plots._binbarlike_baseline), Float64, Symbol})
precompile(Tuple{typeof(Plots._preprocess_binlike), Plots.Attr, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots._bin_centers), Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Plots.Attr, Type{Base.Val{:barbins}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, Type{Float64}}, Int64})
precompile(Tuple{typeof(Plots._preprocess_barlike), Plots.Attr, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("#100#101")){Symbol}, Float64})
precompile(Tuple{typeof(Plots.widen), Float64, Float64, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Plots.Attr, Type{Base.Val{:bar}}, Array{Float64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#210#213")){Plots.Axis}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#210#213")){Plots.Axis}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#210#213")){Plots.Axis}}})
precompile(Tuple{typeof(Base.eachindex), Array{Float64, 1}})
precompile(Tuple{Type{Base.IteratorSize}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Base.OneTo{Int64}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Base.OneTo{Int64}})
precompile(Tuple{typeof(Plots._cycle), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(Plots._cycle), Int64, Int64})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Float64}, Float64, Float64, Float64, Float64, Vararg{Float64, N} where N})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Float64}, Float64, Int64, Int64, Float64, Vararg{Float64, N} where N})
precompile(Tuple{typeof(Base.identity), Float64})
precompile(Tuple{getfield(Plots, Symbol("#102#103")){Symbol}, Float64})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.getproperty), Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.setproperty!), Plots.Extrema, Symbol, Float64})
precompile(Tuple{typeof(Base.iterate), Array{RecipesBase.RecipeData, 1}, Int64})
precompile(Tuple{getfield(Plots, Symbol("##plot#133")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:seriestype,), Tuple{Symbol}}}, typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{typeof(Plots.surface), Array{Float64, 2}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Array{Float64, 2}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 2}}})
precompile(Tuple{typeof(Plots.all3D), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.wrap_surfaces), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 2}})
precompile(Tuple{typeof(Plots.trueOrAllTrue), getfield(Plots, Symbol("#155#156")), Symbol})
precompile(Tuple{typeof(Plots.prepareSeriesData), Array{Float64, 2}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Base.OneTo{Int64}, Base.OneTo{Int64}, Plots.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 2}, Float64, Base.Generator{Array{Float64, 2}, typeof(Base.float)}, Int64})
precompile(Tuple{typeof(Base._replace!), getfield(Plots, Symbol("#141#142")), Array{Float64, 2}, Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Plots.compute_xyz), Base.OneTo{Int64}, Base.OneTo{Int64}, Plots.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Surface{Array{Float64, 2}}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:surface}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.eltype), Plots.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Plots.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Array{ColorTypes.RGBA{Float64}, 1}}, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Array{ColorTypes.RGBA{Float64}, 1}}, Symbol})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Array{ColorTypes.RGBA{Float64}, 1}}, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), PlotUtils.ColorGradient})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, PlotUtils.ColorGradient, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, PlotUtils.ColorGradient, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, PlotUtils.ColorGradient})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Plots.contour), Array{Float64, 2}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:contour}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.plot3d), Base.LinRange{Float64}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot3d#459")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.plot3d), Base.LinRange{Float64}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:seriestype,), Tuple{Symbol}}, typeof(RecipesBase.plot), Base.LinRange{Float64}, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot#133")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:seriestype,), Tuple{Symbol}}}, typeof(RecipesBase.plot), Base.LinRange{Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Base.LinRange{Float64}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Base.LinRange{Float64}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Base.LinRange{Float64}, Array{Float64, 1}, Array{Float64, 1}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.LinRange{Float64}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.LinRange{Float64}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Base.LinRange{Float64}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Base.LinRange{Float64}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.compute_xyz), Base.LinRange{Float64}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.LinRange{Float64}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:path3d}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Float64})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Base.LinRange{Float64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.LinRange{Float64}})
precompile(Tuple{getfield(Base, Symbol("#683#684")){Base.UUID, String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#683#684")){Base.UUID, String}, String})
precompile(Tuple{typeof(Base.manifest_deps_get), String, Base.PkgId, String})
precompile(Tuple{typeof(Base.identify_package), Base.PkgId, String})
precompile(Tuple{typeof(Base.isvalid_file_crc), Base.IOStream})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base.register_root_module), Module})
precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Nothing, Nothing, Symbol, Nothing, Int64})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int64})
precompile(Tuple{typeof(Unitful._basefactors), Module})
precompile(Tuple{typeof(Unitful.register), Module})
precompile(Tuple{typeof(Unitful.__init__)})
precompile(Tuple{typeof(Base._collect), Array{Function, 1}, Base.Generator{Array{Function, 1}, getfield(Requires, Symbol("#3#4"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Tuple{Float64, Base.Rational{Int64}}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Tuple{Float64, Base.Rational{Int64}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Float64, Base.Rational{Int64}}}, Tuple{Float64, Base.Rational{Int64}}, Symbol})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Tuple{Float64, Base.Rational{Int64}}}, Base.Dict{Symbol, Tuple{Float64, Base.Rational{Int64}}}})
precompile(Tuple{typeof(UnitfulAtomic.__init__)})
precompile(Tuple{typeof(Constants.__init__)})
precompile(Tuple{typeof(OhMyREPL.__init__)})
precompile(Tuple{typeof(DocStringExtensions.__init__)})
precompile(Tuple{typeof(MacroTools.__init__)})
precompile(Tuple{typeof(Base.nextpow), Int64, Int64})
precompile(Tuple{typeof(Random.shuffle!), Random.MersenneTwister, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Method, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Method, Nothing}, Method})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Method, Nothing}, Nothing, Method})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Module, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Module, Nothing}, Module})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Module, Nothing}, Nothing, Module})
precompile(Tuple{typeof(JuliaInterpreter.set_compiled_methods)})
precompile(Tuple{typeof(JuliaInterpreter.__init__)})
precompile(Tuple{typeof(Base.methods), Any, Any, Union{Nothing, Module, AbstractArray{Module, N} where N}})
precompile(Tuple{typeof(Debugger.__init__)})
precompile(Tuple{typeof(ZeroMQ_jll.__init__)})
precompile(Tuple{typeof(Core.Compiler._typename), DataType})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{Symbol, Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}}, Base.Pair{Symbol, Base.Dict{Base.SHA1, Union{Base.SHA1, String}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}}, Base.Pair{Symbol, Base.Dict{Base.SHA1, Union{Base.SHA1, String}}}}})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##load_overrides#3")), Bool, typeof(Pkg.Artifacts.load_overrides)})
precompile(Tuple{typeof(Pkg.Artifacts.process_overrides), Base.Dict{String, Any}, Base.UUID})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_meta#20")), Pkg.BinaryPlatforms.Platform, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#artifact_meta##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{Type{NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), T} where T<:Tuple}, Tuple{Nothing, Nothing, Symbol}})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#CompilerABI#3#4")), Nothing, Nothing, Symbol, Type{Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), Tuple{Nothing, Nothing, Symbol}}, Type{Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, typeof(Base.push!), Base.KeySet{Pkg.BinaryPlatforms.Platform, Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Set{Pkg.BinaryPlatforms.Platform}})
precompile(Tuple{typeof(Base.:(==)), Base.VersionNumber, Base.VersionNumber})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_paths#9")), Bool, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_exists#11")), Bool, typeof(Pkg.Artifacts.artifact_exists), Base.SHA1})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.success), typeof(Base.:(&)), Array{Base.Process, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.success), typeof(Base.:(&)), Base.IndexLinear, Array{Base.Process, 1}})
precompile(Tuple{typeof(Base.pipeline_error), Base.ProcessChain})
precompile(Tuple{typeof(Base.read), Base.OrCmds})
precompile(Tuple{typeof(Base.read), Base.OrCmds, Type{String}})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("#28#54")){String, Base.Cmd}})
precompile(Tuple{typeof(Base.Filesystem.cd), getfield(Pkg.PlatformEngines, Symbol("#28#54")){String, Base.Cmd}, String})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Tuple, 1}, getfield(Pkg.PlatformEngines, Symbol("#36#62"))}})
precompile(Tuple{typeof(Base._spawn_primitive), String, Base.Cmd, Array{Any, 1}})
precompile(Tuple{typeof(Base.setup_stdios), getfield(Base, Symbol("#550#551")){Base.Cmd}, Array{Any, 1}})
precompile(Tuple{typeof(Base.success), Base.Cmd})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##probe_cmd#13")), Bool, typeof(Pkg.PlatformEngines.probe_cmd), Base.Cmd})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Tuple, 1}, getfield(Pkg.PlatformEngines, Symbol("#40#66"))}})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##probe_platform_engines!#14")), Bool, typeof(Pkg.PlatformEngines.probe_platform_engines!)})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:url,), Tuple{String}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:file,), Tuple{String}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("#78#79")), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:write,), Tuple{Bool}}}, typeof(Base.open), getfield(Pkg.PlatformEngines, Symbol("#78#79")), String})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Symbol, Base.SubString{String}, Tuple{Symbol}, NamedTuple{(:server,), Tuple{Base.SubString{String}}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Pkg.PlatformEngines.get_server_dir), String, Base.SubString{String}})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##get_auth_header#77")), Bool, typeof(Pkg.PlatformEngines.get_auth_header), String})
precompile(Tuple{typeof(Random.make_seed)})
precompile(Tuple{Type{Random.MersenneTwister}, Nothing})
precompile(Tuple{typeof(Random.default_rng), Int64})
precompile(Tuple{typeof(UUIDs.uuid4)})
precompile(Tuple{typeof(Random.randstring), Int64})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("#81#86")), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:write,), Tuple{Bool}}}, typeof(Base.open), getfield(Pkg.PlatformEngines, Symbol("#81#86")), String})
precompile(Tuple{typeof(Pkg.PlatformEngines.load_telemetry_file), String})
precompile(Tuple{typeof(Pkg.PlatformEngines.get_telemetry_headers), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download#87")), Bool, Nothing, typeof(Pkg.PlatformEngines.download), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify#88")), Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify), String, Nothing, String})
precompile(Tuple{typeof(Base._spawn), Base.CmdRedirect, Array{Any, 1}})
precompile(Tuple{getfield(Base, Symbol("##run#561")), Bool, typeof(Base.run), Base.CmdRedirect})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##get_tarball_contents#89")), Bool, typeof(Pkg.PlatformEngines.get_tarball_contents), String})
precompile(Tuple{typeof(Pkg.PlatformEngines.list_tarball_symlinks), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##unpack#96")), Bool, typeof(Pkg.PlatformEngines.unpack), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify_unpack#101")), Nothing, Bool, Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify_unpack), String, Nothing, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#artifact_paths##kw")), NamedTuple{(:honor_overrides,), Tuple{Bool}}, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_path#10")), Bool, typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{typeof(Pkg.set_readonly), String})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Pkg.Artifacts, Symbol("#39#40")){Bool, String, Nothing}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##download_artifact#38")), Bool, Bool, typeof(Pkg.Artifacts.download_artifact), Base.SHA1, String, Nothing})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}})
precompile(Tuple{typeof(Pkg.Artifacts.with_show_download_info), getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}, String, Bool})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(ZMQ.__init__)})
precompile(Tuple{typeof(MbedTLS.f_recv), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.__init__)})
precompile(Tuple{typeof(IJulia.__init__)})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{IO}, Base.TTY})
precompile(Tuple{getfield(Plots, Symbol("#328#361"))})
precompile(Tuple{getfield(Plots, Symbol("#330#363"))})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.CoreLogging.handle_message), Base.CoreLogging.SimpleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Requires.err), getfield(Plots, Symbol("#330#363")), Module, String})
precompile(Tuple{typeof(Requires.withpath), getfield(Plots, Symbol("#329#362")), String})
precompile(Tuple{getfield(Base, Symbol("#683#684")){Base.UUID, String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#683#684")){Base.UUID, String}, String})
precompile(Tuple{typeof(Base.manifest_deps_get), String, Base.PkgId, String})
precompile(Tuple{typeof(Base.identify_package), Base.PkgId, String})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base.register_root_module), Module})
precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Base._similar_for), Array{Function, 1}, Type{Nothing}, Base.Generator{Array{Function, 1}, getfield(Requires, Symbol("#3#4"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Nothing, 1}, Base.Generator{Array{Function, 1}, getfield(Requires, Symbol("#3#4"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Nothing, 1}, Nothing, Base.Generator{Array{Function, 1}, getfield(Requires, Symbol("#3#4"))}, Int64})
precompile(Tuple{typeof(PyCall._preserveas!), Array{UInt8, 1}, Type{Base.Cstring}, String})
precompile(Tuple{typeof(Base.array_subpadding), Type{T} where T, Type{T} where T})
precompile(Tuple{Type{Base.CyclePadding{P} where P}, DataType})
precompile(Tuple{typeof(Base.padding), Type{T} where T})
precompile(Tuple{getfield(Base, Symbol("#thrownonint#205")){Int32, UInt8}, Type{Int32}, Type{UInt8}, Int64})
precompile(Tuple{typeof(Base.unalias), Array{UInt8, 1}, Base.ReinterpretArray{UInt8, 1, Int32, Array{Int32, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReinterpretArray{UInt8, 1, Int32, Array{Int32, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{UInt8, 1}, Base.ReinterpretArray{UInt8, 1, Int32, Array{Int32, 1}}})
precompile(Tuple{typeof(PyCall._preserveas!), Array{UInt8, 1}, Type{Base.Cwstring}, String})
precompile(Tuple{typeof(PyCall.Py_SetProgramName), Nothing, Base.VersionNumber, String})
precompile(Tuple{typeof(PyCall._pyimport), String})
precompile(Tuple{Type{PyCall.PyError}, String})
precompile(Tuple{typeof(PyCall.pyimport), String})
precompile(Tuple{typeof(PyCall.pydecref_), PyCall.PyObject})
precompile(Tuple{typeof(Base.getproperty), PyCall.PyObject, String})
precompile(Tuple{typeof(PyCall.pyexc_initialize)})
precompile(Tuple{typeof(PyCall._handle_error), String})
precompile(Tuple{typeof(PyCall.pyjlwrap_dealloc), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_repr), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.hash), PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pyjlwrap_hash), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_hash32), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.getindex), Array{Ptr{UInt8}, 1}, Int64})
precompile(Tuple{typeof(Base.convert), Type{String}, PyCall.PyObject})
precompile(Tuple{Type{PyCall.PyObject}, Nothing})
precompile(Tuple{typeof(PyCall.pyjlwrap_getattr), Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_getiter), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.PyTypeObject!), getfield(PyCall, Symbol("#129#130")){Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}}, PyCall.PyTypeObject, String, Int64})
precompile(Tuple{typeof(PyCall.pyjlwrap_init)})
precompile(Tuple{typeof(PyCall.pyhasproperty), PyCall.PyObject, String})
precompile(Tuple{typeof(PyCall._setproperty!), PyCall.PyObject, String, String})
precompile(Tuple{typeof(PyCall._set_finalized)})
precompile(Tuple{typeof(PyCall.Py_SetProgramName), Ptr{Nothing}, Base.VersionNumber, String})
precompile(Tuple{typeof(PyCall.pythonenv), Base.Cmd})
precompile(Tuple{typeof(PyCall.__init__)})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Module, PyCall.PyDict{String, PyCall.PyObject, true}}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Base.Timer}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Ptr{Nothing}}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}})
precompile(Tuple{typeof(PyCall.Py_SetPythonHome), Ptr{Nothing}, Base.VersionNumber, String})
precompile(Tuple{typeof(Base.filter!), getfield(Base, Symbol("#66#67")){typeof(Base.isempty)}, Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.SubString{String}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.SubString{String}, 1}, Int64, Base.Generator{Array{Base.SubString{String}, 1}, typeof(VersionParsing.digits2num)}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Base.SubString{String}, 1}, typeof(VersionParsing.digits2num)}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Base.SubString{String}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.SubString{String}, 1}, Int64, Array{Base.SubString{String}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.SubString{String}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, typeof(VersionParsing.digits2num)}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Base.SubString{String}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Base.SubString{String}, Base.Generator{Array{Base.SubString{String}, 1}, typeof(VersionParsing.digits2num)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Base.SubString{String}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, typeof(VersionParsing.digits2num)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(VersionParsing.vparse), String})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Bool}})
precompile(Tuple{typeof(PyCall.typetuple), Base.Generator{Base.UnitRange{Int64}, getfield(PyCall, Symbol("#36#37")){PyCall.PyObject}}})
precompile(Tuple{typeof(PyCall.array_format), PyCall.PyBuffer})
precompile(Tuple{typeof(PyCall.pysequence_query), PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pytype_query), PyCall.PyObject, Type{PyCall.PyObject}})
precompile(Tuple{typeof(Base.convert), Type{PyCall.PyAny}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pyptr_query), PyCall.PyObject})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Ptr{PyCall.PyObject_struct}}})
precompile(Tuple{typeof(PyCall.pyisinstance), PyCall.PyObject, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pynothing_query), PyCall.PyObject})
precompile(Tuple{typeof(Base.convert), Type{PyCall.PyObject}, PyCall.PyObject})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Exception}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Type{T} where T})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{ErrorException}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Base.SystemError}})
precompile(Tuple{typeof(PyCall.pydecref), PyCall.PyBuffer})
precompile(Tuple{typeof(PyCall.pydecref), PyCall.PyObject})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{TypeError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Base.Meta.ParseError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{ArgumentError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Base.KeyError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{LoadError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{MethodError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Base.EOFError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{BoundsError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{DivideError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{DomainError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{OverflowError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{InexactError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{OutOfMemoryError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{StackOverflowError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{UndefRefError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{InterruptException}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{PyCall.PyIOError}})
precompile(Tuple{typeof(Base._append!), Array{PyCall.PyMemberDef, 1}, Base.HasLength, Tuple{PyCall.PyMemberDef, PyCall.PyMemberDef}})
precompile(Tuple{typeof(PyCall.pyeval_), String, PyCall.PyDict{String, PyCall.PyObject, true}, PyCall.PyDict{String, PyCall.PyObject, true}, Int64, String})
precompile(Tuple{typeof(PyCall.pyeval_), String})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Module, PyCall.PyDict{String, PyCall.PyObject, true}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Module, PyCall.PyDict{String, PyCall.PyObject, true}}, Module})
precompile(Tuple{typeof(Base.setindex!), PyCall.PyDict{String, PyCall.PyObject, true}, PyCall.PyObject, String})
precompile(Tuple{getfield(PyCall, Symbol("#118#119")){Module}})
precompile(Tuple{typeof(Base.get!), getfield(PyCall, Symbol("#118#119")){Module}, Base.Dict{Module, PyCall.PyDict{String, PyCall.PyObject, true}}, Module})
precompile(Tuple{typeof(Revise.setup_atom), Module})
precompile(Tuple{typeof(Revise.filter_valid_cachefiles), Nothing, Array{String, 1}})
precompile(Tuple{typeof(Revise.parse_cache_header), Base.IOStream})
precompile(Tuple{typeof(Revise.parse_cache_header), String})
precompile(Tuple{typeof(Revise.pkg_fileinfo), Base.PkgId})
precompile(Tuple{typeof(Base.Filesystem.relpath), String, Revise.PkgData})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}}, Module})
precompile(Tuple{typeof(Revise.first_bad_position), String})
precompile(Tuple{typeof(Revise.unwrap), Expr})
precompile(Tuple{typeof(Revise.parse_source!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, String, String, Module})
precompile(Tuple{typeof(Revise.parse_source!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, String, Module})
precompile(Tuple{Type{Revise.CodeTrackingMethodInfo}, Expr})
precompile(Tuple{typeof(Revise.toplevel_blocks), Core.Compiler.CFG})
precompile(Tuple{getfield(Revise, Symbol("#errorder#10")), Int64, Int64})
precompile(Tuple{typeof(Revise.add_block_dependents!), Revise.BackEdges, Core.Compiler.CFG, Base.BitArray{1}, Int64, Int64})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, Expr})
precompile(Tuple{Type{Revise.BackEdges}, Core.CodeInfo})
precompile(Tuple{typeof(Revise.toplevel_chunks), Revise.BackEdges})
precompile(Tuple{getfield(Revise, Symbol("#hastrackedexpr##kw")), NamedTuple{(:heads,), Tuple{Tuple{Symbol, Symbol, Symbol, Symbol}}}, typeof(Revise.hastrackedexpr), Core.CodeInfo})
precompile(Tuple{getfield(Revise, Symbol("##hastrackedexpr#11")), Tuple{Symbol, Symbol, Symbol, Symbol}, typeof(Revise.hastrackedexpr), Core.CodeInfo, Base.OneTo{Int64}})
precompile(Tuple{getfield(Revise, Symbol("#hastrackedexpr##kw")), NamedTuple{(:heads,), Tuple{Tuple{Symbol, Symbol, Symbol, Symbol}}}, typeof(Revise.hastrackedexpr), Core.CodeInfo, Base.OneTo{Int64}})
precompile(Tuple{getfield(Revise, Symbol("##hastrackedexpr#11")), Tuple{Symbol, Symbol, Symbol, Symbol}, typeof(Revise.hastrackedexpr), Core.CodeInfo, Base.UnitRange{Int64}})
precompile(Tuple{typeof(JuliaInterpreter.hasarg), Base.Fix2{typeof(Base.isequal), Symbol}, Array{Any, 1}})
precompile(Tuple{typeof(Revise.add_dependencies!), Revise.CodeTrackingMethodInfo, Revise.BackEdges, Core.CodeInfo, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Revise.minimal_evaluation!), Revise.CodeTrackingMethodInfo, JuliaInterpreter.Frame})
precompile(Tuple{typeof(LoweredCodeUtils.callchain), Array{NamedTuple{(:linetop, :linebody, :callee, :caller), Tuple{Int64, Int64, Symbol, Union{Bool, Symbol}}}, 1}})
precompile(Tuple{getfield(Revise, Symbol("##methods_by_execution!#15")), Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.methods_by_execution!), Any, Revise.CodeTrackingMethodInfo, Base.Dict{Module, Array{Expr, 1}}, Module, Expr})
precompile(Tuple{typeof(Revise.storedeps), Base.Set{Union{GlobalRef, Symbol}}, Nothing, Module})
precompile(Tuple{typeof(Revise.storedeps), Base.Set{Union{GlobalRef, Symbol}}, Array{Any, 1}, Module})
precompile(Tuple{typeof(Revise.storedeps), Base.Set{Union{GlobalRef, Symbol}}, Revise.RelocatableExpr, Module})
precompile(Tuple{getfield(Revise, Symbol("##instantiate_sigs!#71")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.instantiate_sigs!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{typeof(Revise.queue_includes!), Revise.PkgData, Base.PkgId})
precompile(Tuple{typeof(Revise.parse_pkg_files), Base.PkgId})
precompile(Tuple{Type{Revise.WatchList}})
precompile(Tuple{typeof(Revise.init_watching), Revise.PkgData, Array{String, 1}})
precompile(Tuple{typeof(Revise.__init__)})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Revise.PkgData}, Base.PkgId})
precompile(Tuple{typeof(Base.active_project), Bool})
precompile(Tuple{typeof(Base.load_path_expand), String})
precompile(Tuple{typeof(Base.load_path)})
precompile(Tuple{typeof(Base.locate_package), Base.PkgId})
precompile(Tuple{typeof(CodeTracking.basepath), Base.PkgId})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Base.PkgId, Revise.PkgData}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Base.PkgId, Revise.PkgData}, Base.PkgId})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.PkgId, Revise.PkgData}, Revise.PkgData, Base.PkgId})
precompile(Tuple{typeof(Base.push!), Array{Tuple{Module, String, Float64}, 1}, Tuple{Module, String, Float64}})
precompile(Tuple{typeof(Base._deleteat!), Array{Tuple{Module, String, Float64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{Tuple{Module, String, Float64}, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{Tuple{Module, String, Float64}, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.fill!), Array{Int32, 1}, Int64})
precompile(Tuple{typeof(OrderedCollections.rehash!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, Int64})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex2), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, Module})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Module, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Module})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Base.PkgId, CodeTracking.PkgFiles}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Base.PkgId, CodeTracking.PkgFiles}, Base.PkgId})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.PkgId, CodeTracking.PkgFiles}, CodeTracking.PkgFiles, Base.PkgId})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Revise.WatchList}, String})
precompile(Tuple{Type{Base.Dict{String, Base.PkgId}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Revise.WatchList}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Revise.WatchList}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Revise.WatchList}, Revise.WatchList, String})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Base.PkgId}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Base.PkgId}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.PkgId}, Base.PkgId, String})
precompile(Tuple{typeof(Revise.watch_package), Base.PkgId})
precompile(Tuple{typeof(OpenBLAS_jll.__init__)})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##load_overrides#3")), Bool, typeof(Pkg.Artifacts.load_overrides)})
precompile(Tuple{typeof(Pkg.Artifacts.process_overrides), Base.Dict{String, Any}, Base.UUID})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_meta#20")), Pkg.BinaryPlatforms.Platform, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#artifact_meta##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Base.allocatedinline), Type{PyCall.PyTypeObject}})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{Type{NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), T} where T<:Tuple}, Tuple{Base.VersionNumber, Nothing, Nothing}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), Tuple{Base.VersionNumber, Nothing, Nothing}}, Type{Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, typeof(Base.push!), Base.KeySet{Pkg.BinaryPlatforms.Platform, Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Set{Pkg.BinaryPlatforms.Platform}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_paths#9")), Bool, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_exists#11")), Bool, typeof(Pkg.Artifacts.artifact_exists), Base.SHA1})
precompile(Tuple{typeof(Base.Filesystem.temp_cleanup_purge), Bool})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##temp_cleanup_later#14")), Bool, typeof(Base.Filesystem.temp_cleanup_later), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##probe_cmd#13")), Bool, typeof(Pkg.PlatformEngines.probe_cmd), Base.Cmd})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##probe_platform_engines!#14")), Bool, typeof(Pkg.PlatformEngines.probe_platform_engines!)})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##mktempdir#19")), String, Bool, typeof(Base.Filesystem.mktempdir), String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##tempname#17")), Bool, typeof(Base.Filesystem.tempname), String})
precompile(Tuple{typeof(Base.:(>=)), PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{getfield(Base.Filesystem, Symbol("#cptree##kw")), NamedTuple{(:force, :follow_symlinks), Tuple{Bool, Bool}}, typeof(Base.Filesystem.cptree), String, String})
precompile(Tuple{typeof(Base.stat), Base.Libc.RawFD})
precompile(Tuple{typeof(Base.Filesystem.sendfile), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##cptree#11")), Bool, Bool, typeof(Base.Filesystem.cptree), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##cp#12")), Bool, Bool, typeof(Base.Filesystem.cp), String, String})
precompile(Tuple{typeof(Base.Filesystem.rename), String, String})
precompile(Tuple{typeof(Pkg.PlatformEngines.get_server_dir), String, Base.SubString{String}})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##get_auth_header#77")), Bool, typeof(Pkg.PlatformEngines.get_auth_header), String})
precompile(Tuple{typeof(Pkg.PlatformEngines.load_telemetry_file), String})
precompile(Tuple{Type{PyCall.PyAny}, PyCall.PyObject})
precompile(Tuple{typeof(Base.:(!=)), PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{typeof(Pkg.PlatformEngines.get_telemetry_headers), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download#87")), Bool, Nothing, typeof(Pkg.PlatformEngines.download), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify#88")), Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify), String, Nothing, String})
precompile(Tuple{typeof(Base.:(>)), PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{typeof(Pkg.PlatformEngines.probe_symlink_creation), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##unpack#96")), Bool, typeof(Pkg.PlatformEngines.unpack), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify_unpack#101")), Nothing, Bool, Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify_unpack), String, Nothing, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#artifact_paths##kw")), NamedTuple{(:honor_overrides,), Tuple{Bool}}, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_path#10")), Bool, typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Pkg.Artifacts, Symbol("#39#40")){Bool, String, Nothing}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##download_artifact#38")), Bool, Bool, typeof(Pkg.Artifacts.download_artifact), Base.SHA1, String, Nothing})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}})
precompile(Tuple{typeof(Pkg.Artifacts.with_show_download_info), getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}, String, Bool})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(Arpack_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Arpack_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Arpack_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(ArrayInterface.__init__)})
precompile(Tuple{typeof(Requires.listenpkg), getfield(ArrayInterface, Symbol("#15#36")), Base.PkgId})
precompile(Tuple{typeof(Requires.withpath), getfield(ArrayInterface, Symbol("#16#37")), String})
precompile(Tuple{getfield(ArrayInterface, Symbol("#17#38"))})
precompile(Tuple{typeof(Requires.err), getfield(ArrayInterface, Symbol("#17#38")), Module, String})
precompile(Tuple{typeof(Base.identify_package), String})
precompile(Tuple{getfield(Base, Symbol("#683#684")){Base.UUID, String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#683#684")){Base.UUID, String}, String})
precompile(Tuple{typeof(Base.manifest_deps_get), String, Base.PkgId, String})
precompile(Tuple{typeof(Base.identify_package), Base.PkgId, String})
precompile(Tuple{typeof(Base.isvalid_file_crc), Base.IOStream})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base.register_root_module), Module})
precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.compilecache_path), Base.PkgId})
precompile(Tuple{typeof(Base.load_path_setup_code), Bool})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Requires.listenpkg), getfield(ArrayInterface, Symbol("#18#39")), Base.PkgId})
precompile(Tuple{typeof(Requires.withpath), getfield(ArrayInterface, Symbol("#19#40")), String})
precompile(Tuple{getfield(ArrayInterface, Symbol("#20#41"))})
precompile(Tuple{typeof(Requires.err), getfield(ArrayInterface, Symbol("#20#41")), Module, String})
precompile(Tuple{typeof(Requires.listenpkg), getfield(ArrayInterface, Symbol("#21#42")), Base.PkgId})
precompile(Tuple{typeof(Requires.listenpkg), getfield(ArrayInterface, Symbol("#24#45")), Base.PkgId})
precompile(Tuple{typeof(Requires.listenpkg), getfield(ArrayInterface, Symbol("#27#48")), Base.PkgId})
precompile(Tuple{typeof(Requires.listenpkg), getfield(ArrayInterface, Symbol("#30#51")), Base.PkgId})
precompile(Tuple{typeof(Requires.listenpkg), getfield(ArrayInterface, Symbol("#33#54")), Base.PkgId})
precompile(Tuple{typeof(FiniteDiff.__init__)})
precompile(Tuple{typeof(Requires.listenpkg), getfield(FiniteDiff, Symbol("#1#4")), Base.PkgId})
precompile(Tuple{typeof(CompilerSupportLibraries_jll.__init__)})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("#78#79")), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:write,), Tuple{Bool}}}, typeof(Base.open), getfield(Pkg.PlatformEngines, Symbol("#78#79")), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##get_auth_header#77")), Bool, typeof(Pkg.PlatformEngines.get_auth_header), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("#81#86")), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:write,), Tuple{Bool}}}, typeof(Base.open), getfield(Pkg.PlatformEngines, Symbol("#81#86")), String})
precompile(Tuple{typeof(Pkg.PlatformEngines.load_telemetry_file), String})
precompile(Tuple{typeof(Pkg.PlatformEngines.get_telemetry_headers), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download#87")), Bool, Nothing, typeof(Pkg.PlatformEngines.download), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify#88")), Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify), String, Nothing, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify_unpack#101")), Nothing, Bool, Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify_unpack), String, Nothing, String})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Pkg.Artifacts, Symbol("#39#40")){Bool, String, Nothing}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##download_artifact#38")), Bool, Bool, typeof(Pkg.Artifacts.download_artifact), Base.SHA1, String, Nothing})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}})
precompile(Tuple{typeof(Pkg.Artifacts.with_show_download_info), getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}, String, Bool})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(OpenSpecFun_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(OpenSpecFun_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(OpenSpecFun_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Rmath_jll.__init__)})
precompile(Tuple{typeof(Rmath.__init__)})
precompile(Tuple{typeof(FFTW_jll.__init__)})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("#78#79")), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:write,), Tuple{Bool}}}, typeof(Base.open), getfield(Pkg.PlatformEngines, Symbol("#78#79")), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##get_auth_header#77")), Bool, typeof(Pkg.PlatformEngines.get_auth_header), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("#81#86")), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:write,), Tuple{Bool}}}, typeof(Base.open), getfield(Pkg.PlatformEngines, Symbol("#81#86")), String})
precompile(Tuple{typeof(Pkg.PlatformEngines.load_telemetry_file), String})
precompile(Tuple{typeof(Pkg.PlatformEngines.get_telemetry_headers), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download#87")), Bool, Nothing, typeof(Pkg.PlatformEngines.download), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify#88")), Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify), String, Nothing, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##unpack#96")), Bool, typeof(Pkg.PlatformEngines.unpack), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify_unpack#101")), Nothing, Bool, Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify_unpack), String, Nothing, String})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Pkg.Artifacts, Symbol("#39#40")){Bool, String, Nothing}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##download_artifact#38")), Bool, Bool, typeof(Pkg.Artifacts.download_artifact), Base.SHA1, String, Nothing})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}})
precompile(Tuple{typeof(Pkg.Artifacts.with_show_download_info), getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}, String, Bool})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(FFTW.__init__)})
precompile(Tuple{typeof(Base._collect), Array{Function, 1}, Base.Generator{Array{Function, 1}, getfield(Requires, Symbol("#3#4"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Base.rand), Random.MersenneTwister, Int64, Int64})
precompile(Tuple{typeof(Base.hcat), String, String, String, Vararg{String, N} where N})
precompile(Tuple{Type{NamedTuple{(:leg,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:leg,), Tuple{Bool}}}, Type{NamedTuple{(:seriestype,), Tuple{Symbol}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Symbol}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.AbstractRGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGB24}})
precompile(Tuple{typeof(Base.isimmutable), Any})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Bool}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nloops")), LineNumberNode, Module, Any, Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.Cartesian.exprresolve_arith), Expr})
precompile(Tuple{typeof(Base.Cartesian.exprresolve_conditional), Expr})
precompile(Tuple{typeof(Base.Cartesian.exprresolve), Expr})
precompile(Tuple{typeof(Base.Cartesian.inlineanonymous), Expr, Int64})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Expr, Expr})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), Expr, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Colorant{T, N} where N where T}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Core.Compiler.Signature}, Base.MappingRF{getfield(PlotUtils, Symbol("#37#40")), Base.BottomRF{typeof(Base.max)}}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Int64})
precompile(Tuple{Type{StaticArrays.Size{(1,)}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s19#12")), Any, Any, Any, Any})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{1}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{1}}})
precompile(Tuple{typeof(Base.:(*)), Int64})
precompile(Tuple{getfield(StaticArrays, Symbol("##s19#6")), Any, Any, Any, Any, Any, Type{T} where T, Type{T} where T, Type{T} where T, Any})
precompile(Tuple{typeof(Base.all), Function, Core.SimpleVector})
precompile(Tuple{typeof(Base._all), getfield(StaticArrays, Symbol("#7#8")), Core.SimpleVector, Base.Colon})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{1}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s19#2")), Any, Any, Any, Any, Any})
precompile(Tuple{getfield(StaticArrays, Symbol("#3#4")), Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(StaticArrays, Symbol("#3#4")), Base.Val{1}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nexprs")), LineNumberNode, Module, Int64, Expr})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@ncall")), LineNumberNode, Module, Int64, Any, Vararg{Any, N} where N})
precompile(Tuple{Type{StaticArrays.Size{(0,)}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{0}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{0}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{0}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{0}}})
precompile(Tuple{typeof(Base.prod), StaticArrays.Size{(0,)}})
precompile(Tuple{typeof(StaticArrays._axes), StaticArrays.Size{(0,)}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, String}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{ZMQ._Message}})
precompile(Tuple{getfield(Plots, Symbol("#violin##kw")), NamedTuple{(:leg,), Tuple{Bool}}, typeof(Plots.violin), Array{String, 2}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##violin#451")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:leg,), Tuple{Bool}}}, typeof(Plots.violin), Array{String, 2}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:leg, :seriestype), Tuple{Bool, Symbol}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.SeriesAnnotations, Symbol})
precompile(Tuple{typeof(Plots.preprocessArgs!), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.backend)})
precompile(Tuple{typeof(Plots.backend), Symbol})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Int64, Array{Symbol, 1}, Int64, Int64})
precompile(Tuple{typeof(Plots._pick_default_backend)})
precompile(Tuple{Type{Plots.Plot{T} where T<:RecipesBase.AbstractBackend}})
precompile(Tuple{getfield(Plots, Symbol("##plot#133")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:leg, :seriestype), Tuple{Bool, Symbol}}}, typeof(RecipesBase.plot), Array{String, 2}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:leg, :seriestype), Tuple{Bool, Symbol}}, typeof(RecipesBase.plot), Array{String, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Plots.convertLegendValue), Bool})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#239#241")), Base.Dict{Symbol, Any}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{String, 2}, Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Array{String, 2}, Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Array{String, 2}, Array{Float64, 2}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{String, 2}, Array{Float64, 2}}})
precompile(Tuple{typeof(Plots.xlims), Int64})
precompile(Tuple{typeof(Plots.ylims), Int64})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:lens}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#242#243")){Bool}, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Plots.is_attr_supported), Symbol})
precompile(Tuple{typeof(Base.getindex), Plots.Axis, Symbol})
precompile(Tuple{typeof(Plots.ignorenan_extrema), Plots.Axis})
precompile(Tuple{typeof(Plots.fg_color), Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:label, :blank), Tuple{Symbol, Bool}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:label, :width, :height), Tuple{Symbol, Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.GridLayout, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:marginalhist}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._process_plotrecipe), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Plots.slice_arg!), Base.Dict{Symbol, Any}, Plots.Attr, Symbol, Int64, Bool})
precompile(Tuple{typeof(Plots.fg_color), Plots.Attr})
precompile(Tuple{typeof(Plots.color_or_nothing!), Plots.Attr, Symbol})
precompile(Tuple{typeof(Plots._update_plot_args), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.build_layout), Plots.Attr})
precompile(Tuple{typeof(Base.getindex), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots._plot_setup), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{RecipesBase.AbstractLayout, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{RecipesBase.AbstractLayout, 2}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(Plots, Symbol("#189#190")){Symbol}}})
precompile(Tuple{typeof(Plots.link_axes!), Array{RecipesBase.AbstractLayout, 1}, Symbol})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{RecipesBase.AbstractLayout, 2}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.filter), getfield(Plots, Symbol("#191#192")), Array{RecipesBase.AbstractLayout, 2}})
precompile(Tuple{typeof(Plots.link_axes!), Plots.Axis, Plots.Axis})
precompile(Tuple{typeof(Base.throw_boundserror), Array{RecipesBase.AbstractLayout, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{RecipesBase.AbstractLayout, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}})
precompile(Tuple{typeof(Plots.link_axes!), Plots.GridLayout, Symbol})
precompile(Tuple{typeof(Plots._subplot_setup), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.convert), Type{AbstractString}, PyCall.PyObject})
precompile(Tuple{typeof(Plots.slice_arg!), Plots.Attr, Plots.Attr, Symbol, Int64, Bool})
precompile(Tuple{typeof(Base.getindex), Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots._update_subplot_colors), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{getfield(Plots, Symbol("##attr!#93")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{getfield(Plots, Symbol("##Axis#92")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Plots.Axis}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots.get_axis), Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._update_axis), Plots.Axis, Plots.Attr, Symbol, Int64})
precompile(Tuple{typeof(Plots._update_axis_colors), Plots.Axis})
precompile(Tuple{typeof(Plots._update_axis_links), Plots.Plot{Plots.GRBackend}, Plots.Axis, Symbol})
precompile(Tuple{typeof(Plots._update_axis), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Plots.Attr, Symbol, Int64})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Plots.Attr, Int64, Bool})
precompile(Tuple{typeof(Plots._prepare_subplot), Plots.Plot{Plots.GRBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots._prepare_annotations), Plots.Subplot{Plots.GRBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Float64})
precompile(Tuple{typeof(Plots.isvertical), Plots.Attr})
precompile(Tuple{Type{PyCall.PyObject}, Symbol})
precompile(Tuple{getfield(Plots, Symbol("#108#111")), Plots.Series})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Plots.Series, 1}, getfield(Plots, Symbol("#108#111"))}, Base.Colon})
precompile(Tuple{typeof(Plots.all3D), Plots.Attr})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Subplot{Plots.GRBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots._expand_subplot_extrema), Plots.Subplot{Plots.GRBackend}, Plots.Attr, Symbol})
precompile(Tuple{typeof(Plots.aliasesAndAutopick), Plots.Attr, Symbol, Base.Dict{Symbol, Symbol}, Array{Symbol, 1}, Int64})
precompile(Tuple{typeof(Plots._replace_linewidth), Plots.Attr})
precompile(Tuple{typeof(Plots._update_series_attributes!), Plots.Attr, Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Base.Set{Symbol}})
precompile(Tuple{typeof(Plots.warnOnUnsupported_args), Plots.GRBackend, Plots.Attr})
precompile(Tuple{typeof(Plots.warnOnUnsupported), Plots.GRBackend, Plots.Attr})
precompile(Tuple{typeof(Plots._add_the_series), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots._process_seriesrecipe), Plots.Plot{Plots.GRBackend}, Plots.Attr})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Base.RefValue{Any}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_new), PyCall.PyTypeObject, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.:(!=)), PyCall.PyObject, String})
precompile(Tuple{typeof(Plots.titlefont), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.gr_set_font), Plots.Font})
precompile(Tuple{typeof(Base.throw_boundserror), Base.StepRange{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Base.Broadcast.Extruded{Base.StepRange{Int64, Int64}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Dates.Millisecond, 1}, Tuple{Dates.Day, Dates.Hour, Dates.Minute, Dates.Second, Dates.Millisecond, Dates.Millisecond, Dates.Millisecond}})
precompile(Tuple{typeof(Dates.yearmonthday), Int64})
precompile(Tuple{typeof(Base.:(+)), Dates.Date, Dates.Month})
precompile(Tuple{typeof(Base.:(+)), Dates.DateTime, Dates.Month})
precompile(Tuple{typeof(Base.:(+)), Dates.DateTime, Dates.Year})
precompile(Tuple{typeof(PlotUtils.bounding_order_of_magnitude), Int64})
precompile(Tuple{typeof(Base._round_digits), Float64, Base.Rounding.RoundingMode{:Down}, Int64, Int64})
precompile(Tuple{typeof(Base._foldl_impl), Base.MappingRF{getfield(PlotUtils, Symbol("#37#40")), Base.BottomRF{typeof(Base.max)}}, Base._InitialValue, Array{Tuple{Float64, Float64}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(PlotUtils, Symbol("#38#41")){Int64}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(PlotUtils, Symbol("#38#41")){Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(PlotUtils, Symbol("#39#42")){Int64}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(PlotUtils, Symbol("#39#42")){Int64}}})
precompile(Tuple{typeof(PlotUtils.optimize_ticks_typed), Int64, Int64, Bool, Array{Tuple{Float64, Float64}, 1}, Int64, Int64, Int64, Float64, Float64, Float64, Float64, Bool, Nothing})
precompile(Tuple{Type{Dates.DateTime}, Float64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Float64, Float64}, 1}, Tuple{Float64, Float64}, Base.Generator{Array{Tuple{Float64, Float64}, 1}, getfield(PlotUtils, Symbol("#35#36"))}, Int64})
precompile(Tuple{getfield(PlotUtils, Symbol("##optimize_ticks#44")), Bool, Nothing, Nothing, Symbol, Nothing, Nothing, Nothing, Nothing, Bool, Nothing, typeof(PlotUtils.optimize_ticks), Dates.DateTime, Dates.DateTime})
precompile(Tuple{getfield(PlotUtils, Symbol("##optimize_ticks#44")), Bool, Int64, Int64, Symbol, Nothing, Nothing, Nothing, Nothing, Bool, Nothing, typeof(PlotUtils.optimize_ticks), Dates.DateTime, Dates.DateTime})
precompile(Tuple{typeof(Plots.optimal_ticks_and_labels), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Nothing})
precompile(Tuple{typeof(Plots.get_ticks), Plots.Subplot{Plots.GRBackend}, Plots.Axis})
precompile(Tuple{typeof(Plots.tickfont), Plots.Axis})
precompile(Tuple{typeof(Plots.guidefont), Plots.Axis})
precompile(Tuple{typeof(Plots.gr_set_xticks_font), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.gr_set_yticks_font), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._update_min_padding!), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Plots.update_child_bboxes!), Plots.GridLayout, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Plots.update_child_bboxes!), Plots.GridLayout})
precompile(Tuple{typeof(Plots.update_inset_bboxes!), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.prepare_output), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.gr_display), Plots.Plot{Plots.GRBackend}, String})
precompile(Tuple{typeof(Base.stat), Base.Libc.RawFD})
precompile(Tuple{typeof(Base.read), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), typeof(Base.read), String})
precompile(Tuple{typeof(Plots._display), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._do_plot_show), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{String, 2}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Symbol})
precompile(Tuple{typeof(Plots._handle_axis_args!), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Array{String, 2}}, Array{String, 2}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{String}, String})
precompile(Tuple{typeof(Plots._handle_axis_args!), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Plots._apply_type_recipe), Base.Dict{Symbol, Any}, Array{String, 2}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{String, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{String, 2}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base._replace!), getfield(Plots, Symbol("#143#144")), Array{String, 1}, Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{String, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}})
precompile(Tuple{typeof(Plots.convertToAnyVector), Array{String, 2}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.convertToAnyVector), Array{Float64, 2}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Array{String, 2}, Array{Float64, 2}, Nothing})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 2}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Plots.compute_xyz), Array{String, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{String, 1}, Symbol})
precompile(Tuple{typeof(Plots._add_markershape), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._preprocess_userrecipe), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.warnOnUnsupported_scales), Plots.GRBackend, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._add_errorbar_kw), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._add_smooth_kw), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:violin}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Type})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Base.show_unquoted_expr_fallback), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_list), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}, String, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_list), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}, Symbol, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_enclosed_list), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Array{Any, 1}, String, String, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_generator), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_unquoted_expr_fallback), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, String, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Symbol, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, String, Int64, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, String, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.show_enclosed_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Array{Any, 1}, String, String, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_generator), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Char, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Char, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.show_block), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Array{Any, 1}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.show_list), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}, Char, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_block), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Array{Any, 1}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.show_unquoted_quote_expr), Base.GenericIOBuffer{Array{UInt8, 1}}, Any, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.convert), Type{Any}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Bool})
precompile(Tuple{typeof(Base.convert), Type{Any}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.convert), Type{Any}, String})
precompile(Tuple{typeof(Base.setproperty!), Plots.Plot{Plots.GRBackend}, Symbol, Nothing})
precompile(Tuple{typeof(Base.copyto!), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}})
precompile(Tuple{typeof(Plots.build_layout), Plots.GridLayout, Int64})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, Symbol})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Any}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.merge), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._update_axis), Plots.Axis, Base.Dict{Symbol, Any}, Symbol, Int64})
precompile(Tuple{typeof(Plots._update_axis), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Int64})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Int64, Bool})
precompile(Tuple{typeof(Plots._update_subplot_periphery), Plots.Subplot{Plots.GRBackend}, Array{Any, 1}})
precompile(Tuple{getfield(PlotUtils, Symbol("#9#11")), Base.Pair{Symbol, PlotUtils.ColorLibrary}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(PlotUtils, Symbol("#9#11")), Base.Dict{Symbol, PlotUtils.ColorLibrary}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(PlotUtils, Symbol("#9#11")), Base.Dict{Symbol, PlotUtils.ColorLibrary}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Symbol, 1}, Base.Generator{Base.Iterators.Filter{getfield(PlotUtils, Symbol("#9#11")), Base.Dict{Symbol, PlotUtils.ColorLibrary}}, getfield(PlotUtils, Symbol("#8#10"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Symbol, 1}, Base.Generator{Base.Iterators.Filter{getfield(PlotUtils, Symbol("#9#11")), Base.Dict{Symbol, PlotUtils.ColorLibrary}}, getfield(PlotUtils, Symbol("#8#10"))}})
precompile(Tuple{typeof(Base.getindex), PlotUtils.ColorLibrary, Symbol})
precompile(Tuple{typeof(PlotUtils.getgradient), Symbol, PlotUtils.ColorLibrary})
precompile(Tuple{getfield(PlotUtils, Symbol("##cgrad_colors#17")), Symbol, typeof(PlotUtils.cgrad_colors), Symbol})
precompile(Tuple{getfield(PlotUtils, Symbol("##cgrad#21")), Nothing, Symbol, typeof(PlotUtils.cgrad), Symbol})
precompile(Tuple{typeof(PlotUtils.get_color_palette), Symbol, ColorTypes.RGBA{Float64}, Int64})
precompile(Tuple{typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Plots.slice_arg!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Any}, Symbol, Int64, Bool})
precompile(Tuple{typeof(Plots._slice_series_args!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Int64})
precompile(Tuple{typeof(Plots.is_seriestype_supported), Symbol})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:dims,), Tuple{Int64}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{getfield(Base, Symbol("##s662#418")), Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.get!), Plots.Attr, Symbol, Bool})
precompile(Tuple{typeof(Base.get!), Plots.Attr, Symbol, Symbol})
precompile(Tuple{typeof(Base.get!), Plots.Attr, Symbol, Array{Float64, 1}})
precompile(Tuple{typeof(Statistics._mean), Array{Float64, 1}, Base.Colon})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.PartialQuickSort{Int64}, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Statistics.median!), Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(*)), Base.TwicePrecision{Float64}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.delete!), Plots.Attr, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Plots.Attr, Type{Base.Val{:violin}}, Array{String, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Plots.is_attr_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(Base.collect), Array{String, 1}})
precompile(Tuple{typeof(Base.sort), Array{String, 1}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{String, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{String, 1}}, Tuple{Int64}})
precompile(Tuple{getfield(StatsPlots, Symbol("#95#96")){String}, Int64})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.UnitRange{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.UnitRange{Int64}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.filter), getfield(StatsPlots, Symbol("#95#96")){String}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Plots._cycle), Array{String, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:trim, :wts), T} where T<:Tuple}, Tuple{Bool, Nothing}})
precompile(Tuple{getfield(Statistics, Symbol("#50#51")){Array{Float64, 1}}, Float64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, getfield(Statistics, Symbol("#50#51")){Array{Float64, 1}}}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(Statistics, Symbol("#50#51")){Array{Float64, 1}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(Statistics, Symbol("##quantile#54")), Bool, typeof(Statistics.quantile), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), getfield(Statistics, Symbol("#8#9")){Float64}, typeof(Base.:(+)), Array{Float64, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), getfield(Statistics, Symbol("#8#9")){Float64}, typeof(Base.:(+)), Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{typeof(KernelDensity.default_bandwidth), Array{Float64, 1}, Float64})
precompile(Tuple{Type{KernelDensity.UniformWeights{N} where N}, Int64})
precompile(Tuple{getfield(KernelDensity, Symbol("#kde##kw")), NamedTuple{(:npoints,), Tuple{Int64}}, typeof(KernelDensity.kde), Array{Float64, 1}})
precompile(Tuple{getfield(StatsPlots, Symbol("##violin_coords#94")), Nothing, Bool, typeof(StatsPlots.violin_coords), Array{Float64, 1}})
precompile(Tuple{getfield(StatsPlots, Symbol("#violin_coords##kw")), NamedTuple{(:trim, :wts), Tuple{Bool, Nothing}}, typeof(StatsPlots.violin_coords), Array{Float64, 1}})
precompile(Tuple{Type{KernelDensity.UniformWeights{100}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Float64, Float64}, Int64}}})
precompile(Tuple{getfield(KernelDensity, Symbol("##kde#3")), Float64, Type{T} where T, Int64, Tuple{Float64, Float64}, KernelDensity.UniformWeights{100}, typeof(KernelDensity.kde), Array{Float64, 1}})
precompile(Tuple{typeof(KernelDensity.tabulate), Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, KernelDensity.UniformWeights{100}})
precompile(Tuple{getfield(FFTW, Symbol("##plan_rfft#19")), UInt32, Float64, typeof(AbstractFFTs.plan_rfft), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(*)), FFTW.rFFTWPlan{Float64, -1, false, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Distributions.cf), Distributions.Normal{Float64}, Float64})
precompile(Tuple{getfield(FFTW, Symbol("##plan_brfft#20")), UInt32, Float64, typeof(AbstractFFTs.plan_brfft), Array{Base.Complex{Float64}, 1}, Int64, Base.UnitRange{Int64}})
precompile(Tuple{getfield(AbstractFFTs, Symbol("##plan_irfft#19")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(AbstractFFTs.plan_irfft), Array{Base.Complex{Float64}, 1}, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(*)), FFTW.rFFTWPlan{Base.Complex{Float64}, 1, false, 1}, Array{Base.Complex{Float64}, 1}})
precompile(Tuple{typeof(Base.:(*)), AbstractFFTs.ScaledPlan{Base.Complex{Float64}, FFTW.rFFTWPlan{Base.Complex{Float64}, 1, false, 1}, Float64}, Array{Base.Complex{Float64}, 1}})
precompile(Tuple{typeof(KernelDensity.conv), KernelDensity.UnivariateKDE{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Distributions.Normal{Float64}})
precompile(Tuple{getfield(KernelDensity, Symbol("#kde##kw")), NamedTuple{(:boundary, :npoints, :weights), Tuple{Tuple{Float64, Float64}, Int64, KernelDensity.UniformWeights{100}}}, typeof(KernelDensity.kde), Array{Float64, 1}, Distributions.Normal{Float64}})
precompile(Tuple{typeof(Base._accumulate!), typeof(Base.mul_prod), Array{Int64, 1}, Array{Int64, 1}, Int64, Nothing})
precompile(Tuple{Type{FFTW.FakeArray{T, N} where N where T}, Type{Base.Complex{Float64}}, Tuple{Int64}})
precompile(Tuple{Type{FFTW.FakeArray{T, N} where N where T}, Type{Base.Complex{Float64}}, Int64})
precompile(Tuple{Type{FFTW.FakeArray{Base.Complex{Float64}, 1}}, Tuple{Int64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Any, 1}, Tuple{Base.IteratorsMD.CartesianIndex{1}}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Base.IteratorsMD.CartesianIndices{1, Tuple{Base.UnitRange{Int64}}}, Array{Any, 1}, Base.IteratorsMD.CartesianIndices{1, Tuple{Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.circshift!), Array{Any, 1}, Array{Any, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.filter), getfield(FFTW, Symbol("#5#6")), Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, getfield(Base, Symbol("#81#82")){Int64, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 2}, LinearAlgebra.Transpose{Int64, Array{Int64, 2}}})
precompile(Tuple{typeof(FFTW.dims_howmany), Array{Float64, 1}, FFTW.FakeArray{Base.Complex{Float64}, 1}, Array{Int64, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.unique), Array{Any, 1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Int64, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Any, 1}}, false}}, Array{Int64, 1}, Tuple{Array{Any, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Any, 1}}, false}, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}, Array{Int64, 1}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 1}, Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.unique), Array{Int64, 1}})
precompile(Tuple{typeof(FFTW.dims_howmany), Array{Float64, 1}, FFTW.FakeArray{Base.Complex{Float64}, 1}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 1}, Tuple{Base.IteratorsMD.CartesianIndex{1}}})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Base.IteratorsMD.CartesianIndices{1, Tuple{Base.UnitRange{Int64}}}, Array{Int64, 1}, Base.IteratorsMD.CartesianIndices{1, Tuple{Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.circshift!), Array{Int64, 1}, Array{Int64, 1}, Tuple{Int64}})
precompile(Tuple{Type{FFTW.rFFTWPlan{Float64, -1, false, 1}}, Array{Float64, 1}, FFTW.FakeArray{Base.Complex{Float64}, 1}, Base.UnitRange{Int64}, UInt32, Float64})
precompile(Tuple{typeof(Base.size), Array{Int64, 2}, Int64})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Int64}}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Int64}}, Array{Int64, 2}})
precompile(Tuple{Type{FFTW.FakeArray{T, N} where N where T}, Type{Float64}, Tuple{Int64}})
precompile(Tuple{Type{FFTW.FakeArray{T, N} where N where T}, Type{Float64}, Int64})
precompile(Tuple{Type{FFTW.FakeArray{Float64, 1}}, Tuple{Int64}, Tuple{Int64}})
precompile(Tuple{typeof(FFTW.dims_howmany), Array{Base.Complex{Float64}, 1}, FFTW.FakeArray{Float64, 1}, Array{Int64, 1}, Array{Any, 1}})
precompile(Tuple{typeof(FFTW.dims_howmany), Array{Base.Complex{Float64}, 1}, FFTW.FakeArray{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{Type{FFTW.rFFTWPlan{Base.Complex{Float64}, 1, false, 1}}, Array{Base.Complex{Float64}, 1}, FFTW.FakeArray{Float64, 1}, Base.UnitRange{Int64}, UInt32, Float64})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Any, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.mul_prod), Array{Any, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.mul_prod), Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Any, 1}, Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Any, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Any, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(AbstractFFTs.normalization), Type{T} where T, Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.mul_prod), Array{Int64, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.prod), Array{Int64, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Bool}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.iterate), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.:(<=)), Float64, Float64})
precompile(Tuple{typeof(Base.setindex!), Array{Bool, 1}, Bool, Int64})
precompile(Tuple{typeof(Base.iterate), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 1}, Base.LogicalIndex{Int64, Array{Bool, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.LogicalIndex{Int64, Array{Bool, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Array{Bool, 1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.LogicalIndex{Int64, Array{Bool, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Base.LogicalIndex{Int64, Array{Bool, 1}}}})
precompile(Tuple{typeof(Base.getindex), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Float64, 1}})
precompile(Tuple{typeof(Plots._cycle), Float64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(*)), Float64, Array{Float64, 1}})
precompile(Tuple{typeof(FFTW.destroy_plan), FFTW.rFFTWPlan{Base.Complex{Float64}, 1, false, 1}})
precompile(Tuple{typeof(FFTW.destroy_plan), FFTW.rFFTWPlan{Float64, -1, false, 1}})
precompile(Tuple{typeof(Plots.ignorenan_maximum), Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(/)), Array{Float64, 1}, Float64})
precompile(Tuple{typeof(Plots.discrete_value!), Plots.Axis, String})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, String, Int64})
precompile(Tuple{typeof(Base.:(==)), Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.push!), Array{Float64, 1}, Float64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Int64, String})
precompile(Tuple{typeof(Base.reverse), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.reverse), Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(-)), Array{Float64, 1}})
precompile(Tuple{typeof(Base.vcat), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Float64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Float64}}})
precompile(Tuple{typeof(StatsPlots.get_quantiles), Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{String, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Plots.preprocessArgs!), Plots.Attr})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.get_series_color), Symbol, Plots.Subplot{Plots.GRBackend}, Int64, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Plots.discrete_value!), Plots.Axis, Array{Any, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Int64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Array{Int64, 1}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Int64, 1}})
precompile(Tuple{getfield(Plots, Symbol("#boxplot!##kw")), NamedTuple{(:leg,), Tuple{Bool}}, typeof(Plots.boxplot!), Array{String, 2}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##boxplot!#450")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:leg,), Tuple{Bool}}}, typeof(Plots.boxplot!), Array{String, 2}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:leg, :seriestype), Tuple{Bool, Symbol}}, typeof(RecipesBase.plot!), Array{String, 2}, Array{Float64, 2}})
precompile(Tuple{getfield(Plots, Symbol("##plot!#137")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:leg, :seriestype), Tuple{Bool, Symbol}}}, typeof(RecipesBase.plot!), Array{String, 2}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:leg, :seriestype), Tuple{Bool, Symbol}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{String, 2}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot!#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:leg, :seriestype), Tuple{Bool, Symbol}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{String, 2}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:boxplot}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.get!), Plots.Attr, Symbol, Float64})
precompile(Tuple{typeof(Base.extrema), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(Statistics, Symbol("#50#51")){Array{Float64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(Statistics, Symbol("#50#51")){Array{Float64, 1}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(Statistics, Symbol("##quantile#54")), Bool, typeof(Statistics.quantile), Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Plots.Attr, Type{Base.Val{:boxplot}}, Array{String, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{getfield(StatsPlots, Symbol("#71#72")){String}, Int64})
precompile(Tuple{typeof(Base.filter), getfield(StatsPlots, Symbol("#71#72")){String}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Float64}, Float64})
precompile(Tuple{typeof(Base.:(!=)), Float64, Float64})
precompile(Tuple{typeof(Base.:(>)), Float64, Float64})
precompile(Tuple{typeof(Base.isvalid_file_crc), Base.IOStream})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.load_path_setup_code), Bool})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(PyPlot.init_colormaps)})
precompile(Tuple{typeof(PyPlot.__init__)})
precompile(Tuple{typeof(Base.print_to_string), Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(Base.Multimedia.istextmime), Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(Base.Multimedia.displayable), Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(Base.Multimedia.displayable), Plots.PlotsDisplay, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Conda._quiet)})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.Cmd}, Tuple{Base.SubString{String}}, Tuple{Base.Cmd}, Tuple{String}}})
precompile(Tuple{typeof(Conda._installer_url)})
precompile(Tuple{typeof(Base.download_url), String})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.Filesystem.abspath), Tuple{Base.Broadcast.Extruded{Array{Base.SubString{String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Sys.which), String})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{String}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String}, Tuple{String}}})
precompile(Tuple{getfield(Base, Symbol("##pipeline#549")), Nothing, Nothing, Base.GenericIOBuffer{Array{UInt8, 1}}, Bool, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{typeof(Base.download_curl), String, String, String})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String}, Tuple{String}}})
precompile(Tuple{getfield(Base, Symbol("##run#561")), Bool, typeof(Base.run), Base.Cmd})
precompile(Tuple{typeof(Base.download), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("#chmod##kw")), NamedTuple{(:recursive,), Tuple{Bool}}, typeof(Base.Filesystem.chmod), String, Int64})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##chmod#25")), Bool, typeof(Base.Filesystem.chmod), String, Int64})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{String}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String}}})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String}, Tuple{Base.SubString{String}}, Tuple{String}, Tuple{Base.SubString{String}}}})
precompile(Tuple{typeof(Conda.add_channel), String, String})
precompile(Tuple{typeof(Conda.add_channel), String})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.Cmd}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}}})
precompile(Tuple{typeof(Conda.runconda), Base.Cmd})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.Cmd}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String}}})
precompile(Tuple{typeof(Conda._install_conda), String, Bool})
precompile(Tuple{typeof(Conda._install_conda), String})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.Cmd}}})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{String}, Tuple{Base.Cmd}}})
precompile(Tuple{typeof(Base.iterate), Base.EnvDict, Int64})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, String}, Base.EnvDict})
precompile(Tuple{typeof(Base._delete!), Base.Dict{String, String}, Int64})
precompile(Tuple{typeof(Base.byteenv), Base.Dict{String, String}})
precompile(Tuple{typeof(Base.byteenv), Array{String, 1}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:env, :dir), Tuple{Array{String, 1}, String}}, Type{Base.Cmd}, Base.Cmd})
precompile(Tuple{typeof(Conda._set_conda_env), Base.Cmd, String})
precompile(Tuple{typeof(Conda.runconda), Base.Cmd, String})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{String}}})
precompile(Tuple{getfield(Conda, Symbol("##add#1")), String, typeof(Conda.add), String, String})
precompile(Tuple{typeof(PyCall.pyimport_conda), String, String, String})
precompile(Tuple{typeof(Base.allocatedinline), Type{Ptr{PyCall.PyObject_struct}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Symbol, String}, 1}, Base.Generator{Array{Symbol, 1}, getfield(PyPlot, Symbol("#3#4")){Base.Dict{Symbol, String}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Symbol, 1}, getfield(PyPlot, Symbol("#3#4")){Base.Dict{Symbol, String}}}})
precompile(Tuple{Type{Base.Dict{String, Symbol}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Symbol}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Symbol}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Symbol}, Symbol, String})
precompile(Tuple{Type{PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, isdict} where isdict}, PyCall.PyObject})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Symbol}, String})
precompile(Tuple{typeof(PyCall.pydecref_), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{String}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Bool}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall.pyexists), String})
precompile(Tuple{typeof(PyCall.pygui_works), Symbol})
precompile(Tuple{typeof(Base.haskey), PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, true}, String})
precompile(Tuple{typeof(PyCall.pygui), Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Base.Timer}, Symbol})
precompile(Tuple{typeof(PyCall.wx_eventloop), Float64})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Base.Timer}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Base.Timer}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Timer}, Base.Timer, Symbol})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.VersionNumber})
precompile(Tuple{typeof(Base.print_to_string), Base.VersionNumber})
precompile(Tuple{typeof(PyCall.gtk_requireversion), String, Base.VersionNumber})
precompile(Tuple{typeof(PyCall.gtk_eventloop), String, Float64})
precompile(Tuple{typeof(PyCall.Tk_eventloop), Float64})
precompile(Tuple{typeof(PyCall.fixqtpath), String})
precompile(Tuple{typeof(PyCall.qt_eventloop), PyCall.PyObject, Float64})
precompile(Tuple{typeof(PyCall.qt_eventloop), Float64})
precompile(Tuple{typeof(PyCall.pygui_start), Symbol, Float64})
precompile(Tuple{typeof(Base.haskey), PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, false}, String})
precompile(Tuple{typeof(PyCall.pygui)})
precompile(Tuple{typeof(PyPlot.find_backend), PyCall.PyObject})
precompile(Tuple{Type{PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, true}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.get), PyCall.PyObject, Type{PyCall.PyAny}, String, String})
precompile(Tuple{typeof(Base.insert!), Array{Tuple{Symbol, String}, 1}, Int64, Tuple{Symbol, String}})
precompile(Tuple{typeof(Base.convert), Type{Nothing}, PyCall.PyObject})
precompile(Tuple{typeof(Base.tryparse_internal), Type{Base.GMP.BigInt}, String, Int64, Int64, Int64, Bool})
precompile(Tuple{getfield(Base, Symbol("##parse#346")), Nothing, typeof(Base.parse), Type{Base.GMP.BigInt}, String})
precompile(Tuple{typeof(Base.convert), Type{Base.GMP.BigInt}, PyCall.PyObject})
precompile(Tuple{typeof(Base.convert), Type{Integer}, PyCall.PyObject})
precompile(Tuple{typeof(Base.:(==)), PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pytype_mapping), PyCall.PyObject, Type{T} where T})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Function, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_new), PyCall.PyTypeObject, Function})
precompile(Tuple{typeof(PyCall._setproperty!), PyCall.PyObject, String, Function})
precompile(Tuple{typeof(Base.convert), Type{Bool}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{}, Int64, PyCall.PyObject})
precompile(Tuple{Type{Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{AbstractString, Any}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, Int64, String})
precompile(Tuple{Type{Base.Dict{AbstractString, Any}}, Array{Base.Pair{String, Int64}, 1}})
precompile(Tuple{Type{PyCall.PyObject}, Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, Int64}, 1}, Base.Pair{String, Int64}, Base.Generator{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:vmin, :vmax), Tuple{Int64, Int64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{}, Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:vmin, :vmax), Tuple{Int64, Int64}}}})
precompile(Tuple{Type{PyCall.PyObject}, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{Type{PyCall.PyObject}, Int64})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{PyCall.PyObject_struct}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{PyCall.PyObject_struct}}, PyCall.PyObject})
precompile(Tuple{getfield(Plots, Symbol("#322#355"))})
precompile(Tuple{getfield(Plots, Symbol("#324#357"))})
precompile(Tuple{typeof(Requires.err), getfield(Plots, Symbol("#324#357")), Module, String})
precompile(Tuple{typeof(Requires.withpath), getfield(Plots, Symbol("#323#356")), String})
precompile(Tuple{getfield(Requires, Symbol("#@require")), LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Requires.parsepkg), Expr})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String}, Int64, Int64})
precompile(Tuple{typeof(Plots.include), String})
precompile(Tuple{getfield(Revise, Symbol("#90#91")), Module, String})
precompile(Tuple{typeof(Base.length), Array{Base.Multimedia.AbstractDisplay, 1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Multimedia.AbstractDisplay}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Base.Multimedia.AbstractDisplay, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.splice!), Array{Base.Multimedia.AbstractDisplay, 1}, Base.UnitRange{Int64}, Array{Any, 1}})
precompile(Tuple{typeof(Base.splice!), Array{Base.Multimedia.AbstractDisplay, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Multimedia.AbstractDisplay, 1}, Int64, Array{Base.Multimedia.AbstractDisplay, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.append!), Array{Base.Multimedia.AbstractDisplay, 1}, Array{Base.Multimedia.AbstractDisplay, 1}})
precompile(Tuple{Type{NamedTuple{(:invalid,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, String, String})
precompile(Tuple{Type{Base.Dict{AbstractString, Any}}, Array{Base.Pair{String, String}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, String}, 1}, Base.Pair{String, String}, Base.Generator{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:invalid,), Tuple{String}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{}, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:invalid,), Tuple{String}}}})
precompile(Tuple{getfield(Core, Symbol("#Any##kw")), NamedTuple{(:invalid,), Tuple{String}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{PyCall.PyAny, PyCall.PyAny}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.iterate), PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, true}, PyCall.PyDict_Iterator})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, true}})
precompile(Tuple{typeof(Base.copy), PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, true}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ref{Int64}}, Base.RefValue{Int64}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ref{Ptr{PyCall.PyObject_struct}}}, Base.RefValue{Ptr{PyCall.PyObject_struct}}})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("#@warn")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.CoreLogging.log_record_id), Module, Symbol, Expr, Tuple{}})
precompile(Tuple{typeof(Base.CoreLogging.logmsg_code), Module, String, Int64, Symbol, Expr})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr})
precompile(Tuple{typeof(Base.CoreLogging.log_record_id), Module, Symbol, String, Tuple{}})
precompile(Tuple{typeof(Base.CoreLogging.logmsg_code), Module, String, Int64, Symbol, String})
precompile(Tuple{typeof(Base.print_to_string), Expr})
precompile(Tuple{typeof(Base.string), Expr})
precompile(Tuple{typeof(Base.show_call), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol, Symbol, Array{Any, 1}, Int64, Int64, Bool})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, String}, Vararg{Base.Pair{Symbol, String}, N} where N})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Tuple{Float64, Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Float64, Float64, Float64, Float64}, Symbol})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, Tuple{Float64, Float64, Float64, Float64}}, Vararg{Base.Pair{Symbol, Tuple{Float64, Float64, Float64, Float64}}, N} where N})
precompile(Tuple{typeof(Requires.isprecompiling)})
precompile(Tuple{getfield(Plots, Symbol("#526#529"))})
precompile(Tuple{typeof(Requires.err), getfield(Plots, Symbol("#526#529")), Module, String})
precompile(Tuple{typeof(Requires.withpath), getfield(Plots, Symbol("#525#528")), String})
precompile(Tuple{typeof(Requires.listenpkg), getfield(Plots, Symbol("#524#527")), Base.PkgId})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:filename,), Tuple{String}}}, Type{NamedTuple{(:extract_docexprs,), Tuple{Bool}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:define,), Tuple{Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Core.Compiler.fieldtype_tfunc), Any, Any, Any})
precompile(Tuple{typeof(Revise.hasfile), Revise.PkgData, String})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#279#280")){String}, String})
precompile(Tuple{typeof(Base.count), Base.Fix2{typeof(Base.isequal), Char}, Base.SubString{String}})
precompile(Tuple{Type{Base.Dict{Module, Array{Expr, 1}}}})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#split_expressions!##kw")), NamedTuple{(:filename, :extract_docexprs), Tuple{String, Bool}}, typeof(JuliaInterpreter.split_expressions!), Array{Tuple{Module, Expr}, 1}, Base.Dict{Module, Array{Expr, 1}}, Expr, Module, Expr})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##split_expressions!#31")), String, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:extract_docexprs,), Tuple{Bool}}}, typeof(JuliaInterpreter.split_expressions!), Array{Tuple{Module, Expr}, 1}, Base.Dict{Module, Array{Expr, 1}}, Expr, Module, Array{Any, 1}})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#split_expressions!##kw")), NamedTuple{(:extract_docexprs, :filename), Tuple{Bool, String}}, typeof(JuliaInterpreter.split_expressions!), Array{Tuple{Module, Expr}, 1}, Base.Dict{Module, Array{Expr, 1}}, Expr, Module, Array{Any, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Module}, Nothing})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Module, Array{Expr, 1}}, Module})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Module, Array{Expr, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Module, Array{Expr, 1}}, Module})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Module, Array{Expr, 1}}, Array{Expr, 1}, Module})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##split_expressions!#28")), Bool, String, typeof(JuliaInterpreter.split_expressions!), Array{Tuple{Module, Expr}, 1}, Base.Dict{Module, Array{Expr, 1}}, Expr, Module, Expr})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, Module, Bool})
precompile(Tuple{typeof(Base.:(==)), Revise.RelocatableExpr, Revise.RelocatableExpr})
precompile(Tuple{typeof(Base.hash), Revise.LineSkippingIterator, UInt64})
precompile(Tuple{typeof(Base.hash), Revise.RelocatableExpr, UInt64})
precompile(Tuple{typeof(OrderedCollections.hashindex), Revise.RelocatableExpr, Int64})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, Revise.RelocatableExpr})
precompile(Tuple{typeof(OrderedCollections.rehash!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Int64})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex2), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Revise.RelocatableExpr})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Nothing, Revise.RelocatableExpr})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Nothing, Nothing})
precompile(Tuple{typeof(Revise.parse_source!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, String, String, Module})
precompile(Tuple{typeof(Revise.parse_source!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, String, Module})
precompile(Tuple{typeof(Base.getproperty), Array{Any, 1}, Symbol})
precompile(Tuple{getfield(Revise, Symbol("##instantiate_sigs!#71")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.instantiate_sigs!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, CodeTracking.PkgFiles}, Base.PkgId})
precompile(Tuple{typeof(Revise.init_watching), Revise.PkgData, Tuple{String}})
precompile(Tuple{getfield(Revise, Symbol("##track#74")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.track), Module, String})
precompile(Tuple{typeof(Revise.track), Module, String})
precompile(Tuple{typeof(JuliaInterpreter.is_doc_expr), Any})
precompile(Tuple{typeof(Base.isequal), Revise.LineSkippingIterator, Revise.LineSkippingIterator})
precompile(Tuple{typeof(Revise.skip_to_nonline), Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{QuoteNode, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{QuoteNode, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.isequal), QuoteNode, QuoteNode})
precompile(Tuple{typeof(Base.:(+)), UInt64, UInt64})
precompile(Tuple{typeof(Base.reinterpret), Type{Int64}, UInt64})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Nothing, Revise.RelocatableExpr, Int64})
precompile(Tuple{typeof(Base.:(!=)), Int32, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.hash), Bool, UInt64})
precompile(Tuple{typeof(Base.:(>)), Int32, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Revise.RelocatableExpr, 1}, Int32})
precompile(Tuple{typeof(Base.isequal), Revise.RelocatableExpr, Revise.RelocatableExpr})
precompile(Tuple{typeof(Base.isequal), Symbol, Expr})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.hash), String, UInt64})
precompile(Tuple{typeof(Base.isequal), Expr, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.hash), Float64, UInt64})
precompile(Tuple{Type{Base.Dict{Union{GlobalRef, Symbol}, Nothing}}})
precompile(Tuple{typeof(Base.copy), Core.CodeInfo})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#replace_coretypes_list!##kw")), NamedTuple{(:rev,), Tuple{Bool}}, typeof(JuliaInterpreter.replace_coretypes_list!), Array{Any, 1}})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##replace_coretypes_list!#62")), Bool, typeof(JuliaInterpreter.replace_coretypes_list!), Array{Any, 1}})
precompile(Tuple{typeof(JuliaInterpreter.compute_ssa_mapping_delete_statements!), Core.CodeInfo, Array{Int64, 1}})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#57#58")), Int64})
precompile(Tuple{typeof(Base._collect), Array{Int64, 1}, Base.Generator{Array{Int64, 1}, getfield(JuliaInterpreter, Symbol("#57#58"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.deleteat!), Base.BitArray{1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._deleteat!), Array{Any, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._accumulate1!), typeof(Base.add_sum), Array{Int64, 1}, Int64, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(JuliaInterpreter.lookup_global_refs!), Expr})
precompile(Tuple{typeof(JuliaInterpreter.optimize!), Core.CodeInfo, Module})
precompile(Tuple{Type{Base.Dict{Symbol, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Array{Int64, 1}}, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Array{Int64, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Array{Int64, 1}}, Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(JuliaInterpreter.scan_ssa_use!), Base.BitSet, Any})
precompile(Tuple{typeof(JuliaInterpreter.find_used), Core.CodeInfo})
precompile(Tuple{typeof(CodeTracking.fileline), LineNumberNode})
precompile(Tuple{typeof(CodeTracking.whereis), Method})
precompile(Tuple{typeof(Base.uncompressed_ast), Method})
precompile(Tuple{typeof(JuliaInterpreter.compute_corrected_linerange), Method})
precompile(Tuple{typeof(JuliaInterpreter.method_contains_line), Method, Int64})
precompile(Tuple{typeof(JuliaInterpreter.codelocation), Core.CodeInfo, Int64})
precompile(Tuple{typeof(Base.find_source_file), String})
precompile(Tuple{typeof(CodeTracking.replace_buildbot_stdlibpath), String})
precompile(Tuple{typeof(CodeTracking.maybe_fix_path), String})
precompile(Tuple{typeof(CodeTracking.whereis), Core.LineInfoNode, Method})
precompile(Tuple{typeof(JuliaInterpreter.getfile), JuliaInterpreter.Frame})
precompile(Tuple{typeof(JuliaInterpreter.getfile), JuliaInterpreter.FrameCode, Int64})
precompile(Tuple{typeof(JuliaInterpreter.getfile), JuliaInterpreter.Frame, Int64})
precompile(Tuple{typeof(CodeTracking.whereis), JuliaInterpreter.FrameCode, Int64})
precompile(Tuple{typeof(JuliaInterpreter.toplevel_code_contains_line), JuliaInterpreter.FrameCode, Int64})
precompile(Tuple{typeof(JuliaInterpreter.framecode_matches_breakpoint), JuliaInterpreter.FrameCode, JuliaInterpreter.BreakpointFileLocation})
precompile(Tuple{typeof(JuliaInterpreter.statementnumber), JuliaInterpreter.FrameCode, Int64})
precompile(Tuple{typeof(JuliaInterpreter.add_breakpoint_if_match!), JuliaInterpreter.FrameCode, JuliaInterpreter.BreakpointFileLocation})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##FrameCode#1")), Bool, Bool, Type{JuliaInterpreter.FrameCode}, Module, Core.CodeInfo})
precompile(Tuple{typeof(Base.fill!), Array{Union{Nothing, Base.Some{Any}}, 1}, Nothing})
precompile(Tuple{typeof(JuliaInterpreter.prepare_framedata), JuliaInterpreter.FrameCode, Array{Any, 1}, Core.SimpleVector, Bool})
precompile(Tuple{Type{JuliaInterpreter.Frame}, JuliaInterpreter.FrameCode, JuliaInterpreter.FrameData, Int64, Nothing})
precompile(Tuple{typeof(Base.error), String, Expr})
precompile(Tuple{typeof(JuliaInterpreter.prepare_thunk), Module, Expr, Bool})
precompile(Tuple{typeof(Base.StackTraces.lookup), Base.InterpreterIP})
precompile(Tuple{typeof(Base.StackTraces.lookup), Ptr{Nothing}})
precompile(Tuple{typeof(Revise.trim_toplevel!), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(JuliaInterpreter.sparam_syms), Method})
precompile(Tuple{typeof(JuliaInterpreter.lookup_expr), JuliaInterpreter.Frame, Expr})
precompile(Tuple{typeof(JuliaInterpreter.get_return), JuliaInterpreter.Frame})
precompile(Tuple{typeof(JuliaInterpreter.show_stackloc), JuliaInterpreter.Frame})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(JuliaInterpreter, Symbol("#53#54")){JuliaInterpreter.Frame}}})
precompile(Tuple{typeof(JuliaInterpreter.check_isdefined), JuliaInterpreter.Frame, Any})
precompile(Tuple{typeof(JuliaInterpreter.resolvefc), JuliaInterpreter.Frame, Any})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##collect_args#44")), Bool, typeof(JuliaInterpreter.collect_args), JuliaInterpreter.Frame, Expr})
precompile(Tuple{typeof(JuliaInterpreter.bypass_builtins), JuliaInterpreter.Frame, Expr, Int64})
precompile(Tuple{typeof(JuliaInterpreter.getargs), Array{Any, 1}, JuliaInterpreter.Frame})
precompile(Tuple{typeof(Base.ntuple), getfield(JuliaInterpreter, Symbol("#55#56")){JuliaInterpreter.Frame, Array{Any, 1}}, Int64})
precompile(Tuple{typeof(JuliaInterpreter.maybe_evaluate_builtin), JuliaInterpreter.Frame, Expr, Bool})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##evaluate_call_compiled!#47")), Bool, typeof(JuliaInterpreter.evaluate_call_compiled!), JuliaInterpreter.Compiled, JuliaInterpreter.Frame, Expr})
precompile(Tuple{typeof(JuliaInterpreter.step_expr!), Any, JuliaInterpreter.Frame, Bool})
precompile(Tuple{Type{JuliaInterpreter.BreakpointRef}, JuliaInterpreter.FrameCode, JuliaInterpreter.BreakpointRef, Nothing})
precompile(Tuple{Type{JuliaInterpreter.BreakpointRef}, JuliaInterpreter.FrameCode, JuliaInterpreter.BreakpointRef})
precompile(Tuple{typeof(JuliaInterpreter.finish!), Any, JuliaInterpreter.Frame, Bool})
precompile(Tuple{typeof(JuliaInterpreter.return_from), JuliaInterpreter.Frame})
precompile(Tuple{typeof(Base.indexed_iterate), JuliaInterpreter.Compiled, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), JuliaInterpreter.Compiled, Int64})
precompile(Tuple{typeof(Base._any), typeof(JuliaInterpreter.is_vararg_type), Array{Any, 1}, Base.Colon})
precompile(Tuple{typeof(JuliaInterpreter.whichtt), Any})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##prepare_call#23")), Bool, typeof(JuliaInterpreter.prepare_call), Any, Array{Any, 1}})
precompile(Tuple{typeof(Base.setproperty!), JuliaInterpreter.DispatchableMethod, Symbol, JuliaInterpreter.Compiled})
precompile(Tuple{typeof(JuliaInterpreter.scopeof), Any})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##get_call_framecode#43")), Bool, typeof(JuliaInterpreter.get_call_framecode), Array{Any, 1}, JuliaInterpreter.FrameCode, Int64})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##evaluate_call_recurse!#48")), Bool, typeof(JuliaInterpreter.evaluate_call_recurse!), Any, JuliaInterpreter.Frame, Expr})
precompile(Tuple{typeof(JuliaInterpreter.evaluate_foreigncall), JuliaInterpreter.Frame, Expr})
precompile(Tuple{typeof(JuliaInterpreter.evaluate_methoddef), JuliaInterpreter.Frame, Expr})
precompile(Tuple{typeof(JuliaInterpreter.eval_rhs), Any, JuliaInterpreter.Frame, Expr})
precompile(Tuple{typeof(JuliaInterpreter.do_assignment!), JuliaInterpreter.Frame, Any, Any})
precompile(Tuple{typeof(Base.getproperty), GlobalRef, Symbol})
precompile(Tuple{getfield(Base, Symbol("##dump#385")), Int64, typeof(Base.dump), Expr})
precompile(Tuple{typeof(JuliaInterpreter.lookup_or_eval), Any, JuliaInterpreter.Frame, Any})
precompile(Tuple{typeof(JuliaInterpreter.inplace_lookup!), Expr, Int64, JuliaInterpreter.Frame})
precompile(Tuple{typeof(JuliaInterpreter.evaluate_structtype), Any, JuliaInterpreter.Frame, Expr})
precompile(Tuple{typeof(JuliaInterpreter.evaluate_abstracttype), Any, JuliaInterpreter.Frame, Expr})
precompile(Tuple{typeof(JuliaInterpreter.evaluate_primitivetype), Any, JuliaInterpreter.Frame, Expr})
precompile(Tuple{typeof(Base.setproperty!), Nothing, Symbol, JuliaInterpreter.Frame})
precompile(Tuple{typeof(Base.setproperty!), JuliaInterpreter.Frame, Symbol, JuliaInterpreter.Frame})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##split_expressions#26")), Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(JuliaInterpreter.split_expressions), Module, Expr})
precompile(Tuple{typeof(JuliaInterpreter.step_expr!), Any, JuliaInterpreter.Frame, Any, Bool})
precompile(Tuple{typeof(LoweredCodeUtils.isanonymous_typedef), Core.CodeInfo})
precompile(Tuple{getfield(Revise, Symbol("##fixpath#44")), String, String, typeof(Revise.fixpath), String})
precompile(Tuple{getfield(Revise, Symbol("##_fixpath#45")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise._fixpath), Core.LineInfoNode})
precompile(Tuple{typeof(Base.print_to_string), LineNumberNode})
precompile(Tuple{getfield(Revise, Symbol("##_fixpath#45")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise._fixpath), LineNumberNode})
precompile(Tuple{typeof(Revise._fixpath), LineNumberNode})
precompile(Tuple{getfield(Revise, Symbol("##fixpath#46")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.fixpath), LineNumberNode})
precompile(Tuple{typeof(Revise.fixpath), LineNumberNode})
precompile(Tuple{typeof(Base.to_index), JuliaInterpreter.BreakpointRef})
precompile(Tuple{typeof(Base.to_index), Array{Any, 1}, JuliaInterpreter.BreakpointRef})
precompile(Tuple{typeof(JuliaInterpreter.codelocation), Core.CodeInfo, JuliaInterpreter.BreakpointRef})
precompile(Tuple{typeof(CodeTracking.whereis), JuliaInterpreter.FrameCode, JuliaInterpreter.BreakpointRef})
precompile(Tuple{typeof(Base.to_index), Array{Any, 1}, Nothing})
precompile(Tuple{typeof(JuliaInterpreter.pc_expr), Core.CodeInfo, Nothing})
precompile(Tuple{typeof(JuliaInterpreter.pc_expr), JuliaInterpreter.FrameCode, Nothing})
precompile(Tuple{typeof(JuliaInterpreter.pc_expr), JuliaInterpreter.Frame, Nothing})
precompile(Tuple{typeof(JuliaInterpreter.pc_expr), Core.CodeInfo, JuliaInterpreter.BreakpointRef})
precompile(Tuple{typeof(JuliaInterpreter.pc_expr), JuliaInterpreter.FrameCode, JuliaInterpreter.BreakpointRef})
precompile(Tuple{typeof(JuliaInterpreter.pc_expr), JuliaInterpreter.Frame, JuliaInterpreter.BreakpointRef})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##split_expressions#26")), Nothing, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:extract_docexprs,), Tuple{Bool}}}, typeof(JuliaInterpreter.split_expressions), Module, Expr})
precompile(Tuple{typeof(Revise.add_docexpr!), Base.Dict{Module, Array{Expr, 1}}, Module, Expr})
precompile(Tuple{Type{Base.Dict{Symbol, LoweredCodeUtils.MethodInfo}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, LoweredCodeUtils.MethodInfo}, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, LoweredCodeUtils.MethodInfo}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, LoweredCodeUtils.MethodInfo}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, LoweredCodeUtils.MethodInfo}, LoweredCodeUtils.MethodInfo, Symbol})
precompile(Tuple{typeof(LoweredCodeUtils.ismethod3), JuliaInterpreter.Frame})
precompile(Tuple{typeof(LoweredCodeUtils.identify_framemethod_calls), JuliaInterpreter.Frame})
precompile(Tuple{typeof(LoweredCodeUtils.replacename!), Array{Any, 1}, Base.Pair{Symbol, Nothing}})
precompile(Tuple{typeof(LoweredCodeUtils.replacename!), Array{Any, 1}, Base.Pair{Symbol, Symbol}})
precompile(Tuple{typeof(LoweredCodeUtils.rename_framemethods!), Any, JuliaInterpreter.Frame, Base.Dict{Symbol, LoweredCodeUtils.MethodInfo}, Array{NamedTuple{(:linetop, :linebody, :callee, :caller), Tuple{Int64, Int64, Symbol, Union{Bool, Symbol}}}, 1}, Base.Dict{Symbol, Union{Bool, Symbol}}})
precompile(Tuple{typeof(Base.to_index), Base.BitArray{1}, JuliaInterpreter.BreakpointRef})
precompile(Tuple{getfield(Revise, Symbol("##methods_by_execution!#20")), Bool, Bool, typeof(Revise.methods_by_execution!), Any, Revise.CodeTrackingMethodInfo, Base.Dict{Module, Array{Expr, 1}}, JuliaInterpreter.Frame, Base.BitArray{1}})
precompile(Tuple{getfield(Revise, Symbol("##methods_by_execution!#15")), Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.methods_by_execution!), Any, Revise.CodeTrackingMethodInfo, Base.Dict{Module, Array{Expr, 1}}, Module, Expr})
precompile(Tuple{typeof(Base.copy), Array{Int32, 1}})
precompile(Tuple{typeof(Base.setproperty!), Core.CodeInfo, Symbol, Array{Int32, 1}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{Int32, 1}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{Any, 1}})
precompile(Tuple{typeof(Base.setproperty!), Core.CodeInfo, Symbol, Nothing})
precompile(Tuple{typeof(Base.getproperty), Core.SSAValue, Symbol})
precompile(Tuple{typeof(Base.:(==)), GlobalRef, Symbol})
precompile(Tuple{typeof(Base.:(==)), QuoteNode, Symbol})
precompile(Tuple{typeof(JuliaInterpreter.extract_inner_call!), Expr, Int64, Bool})
precompile(Tuple{typeof(JuliaInterpreter.extract_inner_call!), Expr, Int64})
precompile(Tuple{typeof(JuliaInterpreter.replace_ssa!), Expr, Array{Int64, 1}})
precompile(Tuple{typeof(JuliaInterpreter.renumber_ssa!), Array{Any, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(JuliaInterpreter.replace_ssa!), Symbol, Array{Int64, 1}})
precompile(Tuple{typeof(JuliaInterpreter.replace_ssa!), QuoteNode, Array{Int64, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Int64, 1}})
precompile(Tuple{typeof(Base.isequal), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), Expr, Expr})
precompile(Tuple{typeof(Base.isequal), Function, Function})
precompile(Tuple{typeof(Base.isequal), Symbol, Module})
precompile(Tuple{typeof(LoweredCodeUtils.ismethod3), Expr})
precompile(Tuple{Type{Base.Dict{Symbol, Union{Bool, Symbol}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Int64, 1}, 1}, Array{Int64, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Revise, Symbol("#8#9"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Revise, Symbol("#8#9"))}})
precompile(Tuple{Type{Base.Dict{Union{GlobalRef, Symbol}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.push!), Revise.BackEdges, Base.Pair{Symbol, Int64}})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{GlobalRef, Symbol}, Array{Int64, 1}}, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Union{GlobalRef, Symbol}, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{GlobalRef, Symbol}, Array{Int64, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{GlobalRef, Symbol}, Array{Int64, 1}}, Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, QuoteNode})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, JuliaInterpreter.SSAValue})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, QuoteNode})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Function})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Symbol})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Array{Any, 1}, Revise.RelocatableExpr})
precompile(Tuple{typeof(Base.oftype), Int64, Int32})
precompile(Tuple{typeof(JuliaInterpreter.replace_ssa!), Core.CodeInfo, Array{Int64, 1}})
precompile(Tuple{typeof(Base.push!), Array{Base.Pair{Symbol, Int64}, 1}, Base.Pair{Symbol, Int64}})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, LoweredCodeUtils.MethodInfo}, Symbol, Nothing})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, Core.CodeInfo})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Bool, 1, Base.BitArray{1}, Tuple{Base.UnitRange{Int64}}, true}}, Base.BitArray{1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Bool, 1, Base.BitArray{1}, Tuple{Base.UnitRange{Int64}}, true}, Bool})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, JuliaInterpreter.SSAValue})
precompile(Tuple{typeof(Base.eltype), Array{JuliaInterpreter.AbstractBreakpoint, 1}})
precompile(Tuple{typeof(Base.getproperty), JuliaInterpreter.BreakpointRef, Symbol})
precompile(Tuple{getfield(Revise, Symbol("#16#18")), JuliaInterpreter.BreakpointRef})
precompile(Tuple{typeof(Base.foreach), getfield(Revise, Symbol("#16#18")), Array{JuliaInterpreter.BreakpointRef, 1}})
precompile(Tuple{typeof(Base.filter), getfield(Revise, Symbol("#17#19")), Array{JuliaInterpreter.BreakpointRef, 1}})
precompile(Tuple{typeof(Base.foreach), typeof(JuliaInterpreter.disable), Array{JuliaInterpreter.BreakpointRef, 1}})
precompile(Tuple{typeof(LoweredCodeUtils.signature), Core.SimpleVector})
precompile(Tuple{typeof(LoweredCodeUtils.signature), Any, JuliaInterpreter.Frame, Any, Int64})
precompile(Tuple{typeof(Base.setproperty!), JuliaInterpreter.Frame, Symbol, Nothing})
precompile(Tuple{typeof(Base.setproperty!), JuliaInterpreter.Frame, Symbol, JuliaInterpreter.BreakpointRef})
precompile(Tuple{typeof(JuliaInterpreter.codelocation), Core.CodeInfo, Nothing})
precompile(Tuple{typeof(LoweredCodeUtils.next_or_nothing), JuliaInterpreter.Frame, Nothing})
precompile(Tuple{typeof(LoweredCodeUtils.next_or_nothing), JuliaInterpreter.Frame, JuliaInterpreter.BreakpointRef})
precompile(Tuple{getfield(LoweredCodeUtils, Symbol("##methoddef!#3")), Bool, typeof(LoweredCodeUtils.methoddef!), Any, Array{Any, 1}, JuliaInterpreter.Frame, Any, Int64})
precompile(Tuple{getfield(LoweredCodeUtils, Symbol("#methoddef!##kw")), NamedTuple{(:define,), Tuple{Bool}}, typeof(LoweredCodeUtils.methoddef!), Function, Array{Any, 1}, JuliaInterpreter.Frame, Expr, Int64})
precompile(Tuple{typeof(JuliaInterpreter.is_quotenode), Any, Any})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Module, Nothing}, Module})
precompile(Tuple{typeof(Core.Compiler.may_invoke_generator), Method, Any, Core.SimpleVector})
precompile(Tuple{typeof(Core.Compiler.get_staged), Core.MethodInstance})
precompile(Tuple{typeof(JuliaInterpreter.optimize!), Core.CodeInfo, Method})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#extract_function_from_method#73")), Method})
precompile(Tuple{typeof(JuliaInterpreter.framecode_matches_breakpoint), JuliaInterpreter.FrameCode, JuliaInterpreter.BreakpointSignature})
precompile(Tuple{typeof(JuliaInterpreter.add_breakpoint_if_match!), JuliaInterpreter.FrameCode, JuliaInterpreter.BreakpointSignature})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##FrameCode#1")), Bool, Bool, Type{JuliaInterpreter.FrameCode}, Method, Core.CodeInfo})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Method, JuliaInterpreter.FrameCode}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Method, JuliaInterpreter.FrameCode}, Method})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Method, JuliaInterpreter.FrameCode}, JuliaInterpreter.FrameCode, Method})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Method, JuliaInterpreter.FrameCode}, Method})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Method, Nothing}, Method})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##prepare_framecode#20")), Bool, typeof(JuliaInterpreter.prepare_framecode), Method, Any})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#prepare_framecode##kw")), NamedTuple{(:enter_generated,), Tuple{Bool}}, typeof(JuliaInterpreter.prepare_framecode), Method, Type{T} where T})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Nothing})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Expr})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, GlobalRef})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Core.SlotNumber})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Core.SSAValue})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Int64})
precompile(Tuple{typeof(Base.getproperty), Core.SlotNumber, Symbol})
precompile(Tuple{typeof(JuliaInterpreter.extract_inner_call!), Nothing, Int64})
precompile(Tuple{typeof(JuliaInterpreter.replace_ssa!), JuliaInterpreter.SlotNumber, Array{Int64, 1}})
precompile(Tuple{typeof(JuliaInterpreter.replace_ssa!), Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.:(==)), Nothing, Expr})
precompile(Tuple{Type{JuliaInterpreter.DispatchableMethod}, Nothing, JuliaInterpreter.FrameInstance, Type})
precompile(Tuple{Type{Base.Some{Any}}, Function})
precompile(Tuple{typeof(Revise.add_signature!), Revise.CodeTrackingMethodInfo, Any, LineNumberNode})
precompile(Tuple{typeof(Revise.fixpath), String})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Type, Union{Base.Missing, Tuple{LineNumberNode, Expr}}}, Any, Any})
precompile(Tuple{typeof(Base.foreach), typeof(JuliaInterpreter.enable), Array{JuliaInterpreter.BreakpointRef, 1}})
precompile(Tuple{typeof(Base.:(==)), Symbol, Function})
precompile(Tuple{typeof(Base.isequal), JuliaInterpreter.SSAValue, Module})
precompile(Tuple{typeof(Base.isequal), Symbol, QuoteNode})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), JuliaInterpreter.SSAValue, Symbol})
precompile(Tuple{typeof(Base.:(==)), Expr, Function})
precompile(Tuple{typeof(JuliaInterpreter.replace_ssa!), String, Array{Int64, 1}})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, String})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, String})
precompile(Tuple{typeof(Base.isequal), JuliaInterpreter.SSAValue, QuoteNode})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Type{T} where T})
precompile(Tuple{typeof(JuliaInterpreter.extract_inner_call!), Core.GotoNode, Int64})
precompile(Tuple{typeof(JuliaInterpreter.extract_inner_call!), QuoteNode, Int64})
precompile(Tuple{typeof(JuliaInterpreter.replace_ssa!), Base.VersionNumber, Array{Int64, 1}})
precompile(Tuple{typeof(JuliaInterpreter.replace_ssa!), Module, Array{Int64, 1}})
precompile(Tuple{typeof(Base.:(==)), Core.GotoNode, Expr})
precompile(Tuple{typeof(Base.:(==)), QuoteNode, Expr})
precompile(Tuple{typeof(LoweredCodeUtils.ismethod3), Core.GotoNode})
precompile(Tuple{typeof(LoweredCodeUtils.ismethod3), QuoteNode})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, Base.VersionNumber})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, Module})
precompile(Tuple{typeof(Base.getproperty), JuliaInterpreter.SlotNumber, Symbol})
precompile(Tuple{typeof(Revise.add_deps!), Array{Int64, 1}, Expr, Array{Revise.SlotDep, 1}})
precompile(Tuple{Type{Revise.SlotDep}, Int64, Expr, Array{Revise.SlotDep, 1}})
precompile(Tuple{typeof(Revise.add_deps!), Array{Int64, 1}, JuliaInterpreter.SSAValue, Array{Revise.SlotDep, 1}})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, JuliaInterpreter.SlotNumber})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, Core.GotoNode})
precompile(Tuple{Type{Revise.SlotDep}, Int64, QuoteNode, Array{Revise.SlotDep, 1}})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Base.VersionNumber})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Base.RefValue{Base.CoreLogging.LogLevel}})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, JuliaInterpreter.SlotNumber})
precompile(Tuple{typeof(JuliaInterpreter.replace_ssa!), Nothing, Array{Int64, 1}})
precompile(Tuple{Type{Revise.SlotDep}, Int64, String, Array{Revise.SlotDep, 1}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, LoweredCodeUtils.MethodInfo}, Symbol})
precompile(Tuple{Type{NamedTuple{(:linetop, :linebody, :callee, :caller), T} where T<:Tuple}, Tuple{Int64, Int64, Symbol, Symbol}})
precompile(Tuple{typeof(Base.push!), Array{NamedTuple{(:linetop, :linebody, :callee, :caller), Tuple{Int64, Int64, Symbol, Union{Bool, Symbol}}}, 1}, NamedTuple{(:linetop, :linebody, :callee, :caller), Tuple{Int64, Int64, Symbol, Symbol}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, LoweredCodeUtils.MethodInfo}, GlobalRef})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, LoweredCodeUtils.MethodInfo}, GlobalRef})
precompile(Tuple{typeof(JuliaInterpreter.replace_ssa!), Bool, Array{Int64, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, LoweredCodeUtils.MethodInfo}, Core.SSAValue})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, LoweredCodeUtils.MethodInfo}, Core.SSAValue})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, Bool})
precompile(Tuple{typeof(LoweredCodeUtils.define_anonymous), Any, JuliaInterpreter.Frame, Expr})
precompile(Tuple{typeof(Base.:(==)), Type{T} where T, Function})
precompile(Tuple{typeof(Base.isequal), Type{T} where T, Function})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, JuliaInterpreter.Frame}}, JuliaInterpreter.Frame})
precompile(Tuple{Type{Base.Some{Any}}, Type})
precompile(Tuple{Type{Base.Some{Any}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Symbol, Bool})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, LoweredCodeUtils.MethodInfo}, Core.SlotNumber})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, LoweredCodeUtils.MethodInfo}, Core.SlotNumber})
precompile(Tuple{typeof(JuliaInterpreter.replace_ssa!), Float64, Array{Int64, 1}})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, Float64})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Float64})
precompile(Tuple{typeof(JuliaInterpreter.extract_inner_call!), Symbol, Int64})
precompile(Tuple{typeof(JuliaInterpreter.extract_inner_call!), JuliaInterpreter.SlotNumber, Int64})
precompile(Tuple{typeof(Base.:(==)), Symbol, Expr})
precompile(Tuple{typeof(Base.:(==)), JuliaInterpreter.SlotNumber, Expr})
precompile(Tuple{typeof(Base.isequal), QuoteNode, Module})
precompile(Tuple{typeof(LoweredCodeUtils.ismethod3), Symbol})
precompile(Tuple{typeof(LoweredCodeUtils.ismethod3), JuliaInterpreter.SlotNumber})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, Nothing})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Module})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, LineNumberNode})
precompile(Tuple{Type{Base.Some{Any}}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.isequal), JuliaInterpreter.SlotNumber, Module})
precompile(Tuple{Type{Base.Some{Any}}, Int64})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Core.NewvarNode})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Bool})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Core.GotoNode})
precompile(Tuple{typeof(JuliaInterpreter.extract_inner_call!), Core.NewvarNode, Int64})
precompile(Tuple{typeof(Base.:(==)), Core.NewvarNode, Expr})
precompile(Tuple{Type{Base.Some{Any}}, Array{UInt8, 1}})
precompile(Tuple{typeof(JuliaInterpreter.hasarg), getfield(JuliaInterpreter, Symbol("#21#22")), Array{Any, 1}})
precompile(Tuple{typeof(Base.getindex), Type{Symbol}, Symbol})
precompile(Tuple{Type{Base.Some{Any}}, Bool})
precompile(Tuple{typeof(Base.:(==)), Expr, Symbol})
precompile(Tuple{typeof(Base._array_for), Type{DataType}, Array{Any, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.setindex!), Array{DataType, 1}, Type{T} where T, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Array{Any, 1}, getfield(JuliaInterpreter, Symbol("#53#54")){JuliaInterpreter.Frame}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Array{Any, 1}, getfield(JuliaInterpreter, Symbol("#53#54")){JuliaInterpreter.Frame}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{DataType, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{DataType, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(JuliaInterpreter, Symbol("#53#54")){JuliaInterpreter.Frame}}, Int64, Int64})
precompile(Tuple{typeof(Base.popfirst!), Array{Any, 1}})
precompile(Tuple{Type{Base.Some{Any}}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Some{Any}}, Tuple{Int64, Int64}})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, UInt8})
precompile(Tuple{typeof(JuliaInterpreter.replace_ssa!), UInt8, Array{Int64, 1}})
precompile(Tuple{Type{Base.Some{Any}}, UInt8})
precompile(Tuple{typeof(Base.getindex), Type{Symbol}, Symbol, Symbol})
precompile(Tuple{Type{Base.Some{Any}}, Array{String, 1}})
precompile(Tuple{Type{Base.Some{Any}}, String})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{DataType, 1}, String, Int64})
precompile(Tuple{Type{Base.Some{Any}}, Tuple{Base.Pair{String, String}, Int64}})
precompile(Tuple{Type{Base.Some{Any}}, Base.Pair{String, String}})
precompile(Tuple{typeof(Base.:(==)), JuliaInterpreter.SlotNumber, Symbol})
precompile(Tuple{typeof(Base.:(==)), JuliaInterpreter.SlotNumber, Function})
precompile(Tuple{Type{Base.Some{Any}}, Module})
precompile(Tuple{Type{Base.Some{Any}}, Expr})
precompile(Tuple{Type{NamedTuple{(:filename,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:filename,), Tuple{String}}, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:extract_docexprs,), Tuple{Bool}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Bool}}})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#split_expressions!##kw")), NamedTuple{(:filename, :extract_docexprs), Tuple{String, Bool}}, typeof(JuliaInterpreter.split_expressions!), Array{Tuple{Module, Expr}, 1}, Base.Dict{Module, Array{Expr, 1}}, Module, Expr})
precompile(Tuple{getfield(Revise, Symbol("#methods_by_execution!##kw")), NamedTuple{(:define,), Tuple{Bool}}, typeof(Revise.methods_by_execution!), Function, Revise.CodeTrackingMethodInfo, Base.Dict{Module, Array{Expr, 1}}, JuliaInterpreter.Frame, Base.BitArray{1}})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Core.SimpleVector})
precompile(Tuple{typeof(JuliaInterpreter.static_eval), Expr})
precompile(Tuple{typeof(JuliaInterpreter.wrap_params), Expr, Array{Symbol, 1}})
precompile(Tuple{typeof(JuliaInterpreter.build_compiled_call!), Expr, Symbol, Core.CodeInfo, Int64, Int64, Array{Symbol, 1}, Module})
precompile(Tuple{typeof(Base.Iterators.zip), Core.SimpleVector, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Core.SimpleVector, Array{Any, 1}}})
precompile(Tuple{typeof(Base.map), getfield(Base.Iterators, Symbol("#3#4")), Tuple{Core.SimpleVector, Array{Any, 1}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Core.SimpleVector, Array{Any, 1}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataType, JuliaInterpreter.SlotNumber}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataType, JuliaInterpreter.SlotNumber}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Core.SimpleVector, Array{Any, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.hash), Tuple{Module, Int64}, UInt64})
precompile(Tuple{typeof(Base.hash), Tuple{Core.SimpleVector, Module, Int64}, UInt64})
precompile(Tuple{typeof(Base.hash), Tuple{DataType, Core.SimpleVector, Module, Int64}, UInt64})
precompile(Tuple{typeof(Base.hashindex), Tuple{QuoteNode, DataType, Core.SimpleVector, Module, Int64}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Any}, Tuple{QuoteNode, DataType, Core.SimpleVector, Module, Int64}})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, Tuple{QuoteNode, DataType, Core.SimpleVector, Module, Int64}, Nothing})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(JuliaInterpreter.parametric_type_to_expr), Core.SimpleVector})
precompile(Tuple{typeof(Base.collect), Base.Generator{Core.SimpleVector, typeof(JuliaInterpreter.parametric_type_to_expr)}})
precompile(Tuple{typeof(JuliaInterpreter.scopename), Core.TypeName})
precompile(Tuple{typeof(JuliaInterpreter.parametric_type_to_expr), Type})
precompile(Tuple{typeof(Base._array_for), Type{DataType}, Core.SimpleVector, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Core.SimpleVector, typeof(JuliaInterpreter.parametric_type_to_expr)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Core.SimpleVector, typeof(JuliaInterpreter.parametric_type_to_expr)}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Any}, Tuple{QuoteNode, DataType, Core.SimpleVector, Module, Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Function, Tuple{QuoteNode, DataType, Core.SimpleVector, Module, Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataType, JuliaInterpreter.SSAValue}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataType, JuliaInterpreter.SSAValue}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), JuliaInterpreter.SSAValue, Symbol})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Ptr{UInt8}}})
precompile(Tuple{typeof(Base._groupedunique!), Array{Int64, 1}})
precompile(Tuple{typeof(Base._unique!), typeof(Base.identity), Array{Int64, 1}, Base.Set{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.unique!), Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.dotview), Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Int64, 1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Array{Int64, 1}, Int64}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{typeof(Base._similar_for), Array{Int64, 1}, Type{Int64}, Base.Generator{Array{Int64, 1}, getfield(JuliaInterpreter, Symbol("#57#58"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Int64, 1}, getfield(JuliaInterpreter, Symbol("#57#58"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Int64, 1}, getfield(JuliaInterpreter, Symbol("#57#58"))}, Int64})
precompile(Tuple{typeof(Base._deleteat!), Array{Int32, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.deleteat!), Array{Int32, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.parentmodule), Function})
precompile(Tuple{typeof(Base.parentmodule), DataType})
precompile(Tuple{typeof(Base.invokelatest), Any, Any})
precompile(Tuple{getfield(JuliaInterpreter.CompiledCalls, Symbol("###compiledcall#262")), String})
precompile(Tuple{Type{Base.Some{Any}}, Ptr{UInt8}})
precompile(Tuple{getfield(JuliaInterpreter.CompiledCalls, Symbol("###compiledcall#263")), Ptr{UInt8}, Int64})
precompile(Tuple{Type{Base.Some{Any}}, Nothing})
precompile(Tuple{typeof(Revise.wait_changed), String})
precompile(Tuple{typeof(Revise.watch_files_via_dir), String})
precompile(Tuple{typeof(Revise.revise_dir_queued), String})
precompile(Tuple{Revise.Rescheduler{typeof(Revise.revise_dir_queued), Tuple{String}}})
precompile(Tuple{Type{FileWatching.FileMonitor}, String})
precompile(Tuple{typeof(Base.preserve_handle), FileWatching.FileMonitor})
precompile(Tuple{typeof(FileWatching.start_watching), FileWatching.FileMonitor})
precompile(Tuple{typeof(Base.unpreserve_handle), FileWatching.FileMonitor})
precompile(Tuple{typeof(FileWatching.stop_watching), FileWatching.FileMonitor})
precompile(Tuple{typeof(Base.wait), FileWatching.FileMonitor})
precompile(Tuple{typeof(FileWatching.watch_file), String, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Revise.WatchList}})
precompile(Tuple{typeof(Base.CoreLogging.env_override_minlevel), String, Module})
precompile(Tuple{typeof(Base.CoreLogging.current_logger_for_env), Base.CoreLogging.LogLevel, String, Module})
precompile(Tuple{typeof(Revise.unique_dirs), Array{String, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Revise.WatchList, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{String, Revise.WatchList}, Int64})
precompile(Tuple{typeof(Revise.add_definitions_from_repl), String})
precompile(Tuple{typeof(Revise.read_from_cache), Revise.PkgData, String})
precompile(Tuple{typeof(Revise.maybe_parse_from_cache!), Revise.PkgData, String})
precompile(Tuple{typeof(Base.hash), Tuple{Revise.PkgData, String}, UInt64})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Tuple{Revise.PkgData, String}, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Tuple{Revise.PkgData, String}, Nothing}, Tuple{Revise.PkgData, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{Revise.PkgData, String}, Nothing}, Nothing, Tuple{Revise.PkgData, String}})
precompile(Tuple{typeof(Revise.has_writable_paths), Revise.PkgData})
precompile(Tuple{getfield(Revise, Symbol("#38#39")){String}})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(Revise, Symbol("#38#39")){String}, Base.CoreLogging.LogState})
precompile(Tuple{typeof(Revise.watch_manifest), String})
precompile(Tuple{Revise.Rescheduler{typeof(Revise.watch_manifest), Tuple{String}}})
precompile(Tuple{typeof(Revise.remove_from_included_files), Symbol})
precompile(Tuple{typeof(Base._deleteat!), Array{Tuple{Module, String}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Revise.queue_includes!), Revise.PkgData, Base.PkgId})
precompile(Tuple{typeof(Revise.parse_pkg_files), Base.PkgId})
precompile(Tuple{typeof(Revise._watch_package), Base.PkgId})
precompile(Tuple{getfield(Revise, Symbol("#34#35")){Base.PkgId}})
precompile(Tuple{typeof(Revise.filter_valid_cachefiles), String, Array{String, 1}})
precompile(Tuple{typeof(Base.sort!), Array{String, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.ReverseOrdering{Base.Order.By{getfield(Revise, Symbol("#23#24"))}}})
precompile(Tuple{typeof(Base.sort!), Array{String, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.ReverseOrdering{Base.Order.By{getfield(Revise, Symbol("#23#24"))}}, Array{String, 1}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Int64}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("##pycall#115")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(PyCall.pycall), PyCall.PyObject, Type{Bool}, Int64})
precompile(Tuple{getfield(PyCall, Symbol("#7#8")){PyCall.PyObject, Int64}, Base.Timer})
precompile(Tuple{getfield(Base, Symbol("#504#505")){getfield(PyCall, Symbol("#7#8")){PyCall.PyObject, Int64}, Base.Timer}})
precompile(Tuple{typeof(PyCall.:(≛)), PyCall.PyObject, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Random.make_seed)})
precompile(Tuple{Type{Random.MersenneTwister}, Nothing})
precompile(Tuple{typeof(Random.default_rng), Int64})
precompile(Tuple{typeof(Base.rand), Type{Float64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.rand), Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{PyCall.PyMethodDef}})
precompile(Tuple{typeof(PyPlot.plot), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(PyPlot, Symbol("##plot#85")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(PyPlot.plot), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(PyCall.pycall), PyCall.PyObject, Type{PyCall.PyAny}, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(PyCall, Symbol("##pycall#116")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(PyCall.pycall), PyCall.PyObject, Type{PyCall.PyAny}, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Ptr{Nothing}}, Symbol})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(*)), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Ptr{PyCall.PyObject_struct}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Int64})
precompile(Tuple{typeof(PyCall.weakref_callback), Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{Type{PyCall.PyMethodDef}, String, Ptr{Nothing}, UInt16, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Array{Float64, 1}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyembed), PyCall.PyObject, Array{Float64, 1}})
precompile(Tuple{typeof(PyCall.npyinitialize)})
precompile(Tuple{typeof(PyCall.NpyArray), Array{Float64, 1}, Bool})
precompile(Tuple{typeof(PyCall.array2py), Array{Float64, 1}, Int64, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{Type{PyCall.PyObject}, Array{Float64, 1}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(PyCall.pyjlwrap_call), Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{Type{PyCall.PyDict{Symbol, PyCall.PyObject, isdict} where isdict}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall._pyjlwrap_call), Function, Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pytype_query), PyCall.PyObject, Type{PyCall.PyAny}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, getfield(PyCall, Symbol("#36#37")){PyCall.PyObject}}})
precompile(Tuple{getfield(PyCall, Symbol("#28#29")){Tuple{}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(PyCall, Symbol("#28#29")){Tuple{}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Tuple{}}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.isvatuple), DataType})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{getfield(PyPlot, Symbol("##figure#7")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(PyPlot.figure)})
precompile(Tuple{typeof(PyPlot.gcf)})
precompile(Tuple{typeof(PyPlot.figure)})
precompile(Tuple{typeof(Base.convert), Type{PyPlot.Figure}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pyreturn), PyPlot.Figure})
precompile(Tuple{typeof(Base.convert), Type{Array{T, N} where N where T}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pyarray_dims), PyCall.PyObject, Bool})
precompile(Tuple{typeof(PyCall.py2array), Type{T} where T, PyCall.PyObject})
precompile(Tuple{Type{Array{Any, N} where N}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(PyCall.py2array), Type{T} where T, Array{Any, 1}, PyCall.PyObject, Int64, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Array{Any, 1}})
precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.identity)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{PyCall.PyObject}, Base.Generator{Array{Any, 1}, typeof(Base.identity)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{PyCall.PyObject, 1}, Base.Generator{Array{Any, 1}, typeof(Base.identity)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{PyCall.PyObject, 1}, PyCall.PyObject, Base.Generator{Array{Any, 1}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Timer}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Base.Timer, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Symbol, Base.Timer}, Int64})
precompile(Tuple{typeof(PyCall.pygui_stop), Symbol})
precompile(Tuple{typeof(PyCall.pygui_stop_all)})
precompile(Tuple{typeof(PyCall.Py_Finalize)})
precompile(Tuple{typeof(Base.close), ZMQ.Context})
precompile(Tuple{getfield(ZMQ, Symbol("#16#17"))})
precompile(Tuple{typeof(Base.Filesystem.temp_cleanup_purge)})
precompile(Tuple{typeof(FileWatching.uvfinalize), FileWatching.FileMonitor})
precompile(Tuple{typeof(Base.atreplinit), Function})
precompile(Tuple{typeof(JuliaInterpreter.set_compiled_methods)})
precompile(Tuple{typeof(JuliaInterpreter.__init__)})
precompile(Tuple{typeof(Base.which), Any, Any})
precompile(Tuple{typeof(Base.getproperty), Core.TypeMapEntry, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Method, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Method, Nothing}, Method})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Method, Nothing}, Nothing, Method})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Module, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Module, Nothing}, Module})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Module, Nothing}, Nothing, Module})
precompile(Tuple{typeof(Revise.steal_repl_backend), REPL.REPLBackend})
precompile(Tuple{typeof(Revise.setup_atom), Module})
precompile(Tuple{Type{Revise.PkgData}, Base.PkgId})
precompile(Tuple{typeof(Revise.filter_valid_cachefiles), Nothing, Array{String, 1}})
precompile(Tuple{typeof(Revise.parse_cache_header), Base.IOStream})
precompile(Tuple{typeof(Revise.parse_cache_header), String})
precompile(Tuple{typeof(Revise.filter_valid_cachefiles), String, Array{String, 1}})
precompile(Tuple{typeof(Revise.pkg_fileinfo), Base.PkgId})
precompile(Tuple{typeof(Revise.relpath_safe), String, String})
precompile(Tuple{typeof(Base.Filesystem.relpath), String, Revise.PkgData})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}}, Module})
precompile(Tuple{typeof(Revise.first_bad_position), String})
precompile(Tuple{typeof(Revise.unwrap), Expr})
precompile(Tuple{typeof(Revise.parse_source!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, String, String, Module})
precompile(Tuple{typeof(Revise.parse_source!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, String, Module})
precompile(Tuple{Type{Revise.CodeTrackingMethodInfo}, Expr})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#kw##replace_coretypes_list!")), NamedTuple{(:rev,), Tuple{Bool}}, typeof(JuliaInterpreter.replace_coretypes_list!), Array{Any, 1}})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##replace_coretypes_list!#62")), Bool, typeof(JuliaInterpreter.replace_coretypes_list!), Array{Any, 1}})
precompile(Tuple{typeof(JuliaInterpreter.compute_ssa_mapping_delete_statements!), Core.CodeInfo, Array{Int64, 1}})
precompile(Tuple{typeof(JuliaInterpreter.lookup_global_refs!), Expr})
precompile(Tuple{typeof(JuliaInterpreter.optimize!), Core.CodeInfo, Module})
precompile(Tuple{typeof(JuliaInterpreter.scan_ssa_use!), Base.BitSet, Any})
precompile(Tuple{typeof(JuliaInterpreter.find_used), Core.CodeInfo})
precompile(Tuple{typeof(JuliaInterpreter.codelocation), Core.CodeInfo, Int64})
precompile(Tuple{typeof(JuliaInterpreter.getfile), JuliaInterpreter.Frame})
precompile(Tuple{typeof(JuliaInterpreter.getfile), JuliaInterpreter.FrameCode, Int64})
precompile(Tuple{typeof(JuliaInterpreter.getfile), JuliaInterpreter.Frame, Int64})
precompile(Tuple{typeof(CodeTracking.whereis), JuliaInterpreter.FrameCode, Int64})
precompile(Tuple{typeof(JuliaInterpreter.toplevel_code_contains_line), JuliaInterpreter.FrameCode, Int64})
precompile(Tuple{typeof(JuliaInterpreter.framecode_matches_breakpoint), JuliaInterpreter.FrameCode, JuliaInterpreter.BreakpointFileLocation})
precompile(Tuple{typeof(JuliaInterpreter.statementnumber), JuliaInterpreter.FrameCode, Int64})
precompile(Tuple{typeof(JuliaInterpreter.add_breakpoint_if_match!), JuliaInterpreter.FrameCode, JuliaInterpreter.BreakpointFileLocation})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##FrameCode#1")), Bool, Bool, Type{JuliaInterpreter.FrameCode}, Module, Core.CodeInfo})
precompile(Tuple{typeof(JuliaInterpreter.prepare_framedata), JuliaInterpreter.FrameCode, Array{Any, 1}, Core.SimpleVector, Bool})
precompile(Tuple{Type{JuliaInterpreter.Frame}, JuliaInterpreter.FrameCode, JuliaInterpreter.FrameData, Int64, Nothing})
precompile(Tuple{typeof(JuliaInterpreter.prepare_thunk), Module, Expr, Bool})
precompile(Tuple{typeof(Revise.toplevel_blocks), Core.Compiler.CFG})
precompile(Tuple{getfield(Revise, Symbol("#errorder#10")), Int64, Int64})
precompile(Tuple{typeof(Revise.add_block_dependents!), Revise.BackEdges, Core.Compiler.CFG, Base.BitArray{1}, Int64, Int64})
precompile(Tuple{typeof(Revise.add_to_backedges!), Revise.BackEdges, Array{Revise.SlotDep, 1}, Int64, Expr})
precompile(Tuple{Type{Revise.BackEdges}, Core.CodeInfo})
precompile(Tuple{typeof(Revise.toplevel_chunks), Revise.BackEdges})
precompile(Tuple{getfield(Revise, Symbol("#kw##hastrackedexpr")), NamedTuple{(:heads,), Tuple{Tuple{Symbol, Symbol, Symbol, Symbol}}}, typeof(Revise.hastrackedexpr), Core.CodeInfo})
precompile(Tuple{getfield(Revise, Symbol("##hastrackedexpr#11")), Tuple{Symbol, Symbol, Symbol, Symbol}, typeof(Revise.hastrackedexpr), Core.CodeInfo, Base.OneTo{Int64}})
precompile(Tuple{getfield(Revise, Symbol("#kw##hastrackedexpr")), NamedTuple{(:heads,), Tuple{Tuple{Symbol, Symbol, Symbol, Symbol}}}, typeof(Revise.hastrackedexpr), Core.CodeInfo, Base.OneTo{Int64}})
precompile(Tuple{getfield(Revise, Symbol("##hastrackedexpr#11")), Tuple{Symbol, Symbol, Symbol, Symbol}, typeof(Revise.hastrackedexpr), Core.CodeInfo, Base.UnitRange{Int64}})
precompile(Tuple{typeof(JuliaInterpreter.hasarg), Base.Fix2{typeof(Base.isequal), Symbol}, Array{Any, 1}})
precompile(Tuple{typeof(Revise.add_dependencies!), Revise.CodeTrackingMethodInfo, Revise.BackEdges, Core.CodeInfo, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Revise.minimal_evaluation!), Revise.CodeTrackingMethodInfo, JuliaInterpreter.Frame})
precompile(Tuple{typeof(Revise.trim_toplevel!), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(JuliaInterpreter.sparam_syms), Method})
precompile(Tuple{typeof(JuliaInterpreter.lookup_expr), JuliaInterpreter.Frame, Expr})
precompile(Tuple{typeof(JuliaInterpreter.get_return), JuliaInterpreter.Frame})
precompile(Tuple{typeof(LoweredCodeUtils.isanonymous_typedef), Core.CodeInfo})
precompile(Tuple{typeof(Revise.add_docexpr!), Base.Dict{Module, Array{Expr, 1}}, Module, Expr})
precompile(Tuple{typeof(LoweredCodeUtils.ismethod3), JuliaInterpreter.Frame})
precompile(Tuple{typeof(LoweredCodeUtils.identify_framemethod_calls), JuliaInterpreter.Frame})
precompile(Tuple{typeof(LoweredCodeUtils.callchain), Array{NamedTuple{(:linetop, :linebody, :callee, :caller), Tuple{Int64, Int64, Symbol, Union{Bool, Symbol}}}, 1}})
precompile(Tuple{typeof(LoweredCodeUtils.replacename!), Array{Any, 1}, Base.Pair{Symbol, Nothing}})
precompile(Tuple{typeof(LoweredCodeUtils.replacename!), Array{Any, 1}, Base.Pair{Symbol, Symbol}})
precompile(Tuple{typeof(LoweredCodeUtils.rename_framemethods!), Any, JuliaInterpreter.Frame, Base.Dict{Symbol, LoweredCodeUtils.MethodInfo}, Array{NamedTuple{(:linetop, :linebody, :callee, :caller), Tuple{Int64, Int64, Symbol, Union{Bool, Symbol}}}, 1}, Base.Dict{Symbol, Union{Bool, Symbol}}})
precompile(Tuple{typeof(JuliaInterpreter.resolvefc), JuliaInterpreter.Frame, Any})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##collect_args#44")), Bool, typeof(JuliaInterpreter.collect_args), JuliaInterpreter.Frame, Expr})
precompile(Tuple{getfield(Revise, Symbol("##methods_by_execution!#20")), Bool, Bool, typeof(Revise.methods_by_execution!), Any, Revise.CodeTrackingMethodInfo, Base.Dict{Module, Array{Expr, 1}}, JuliaInterpreter.Frame, Base.BitArray{1}})
precompile(Tuple{getfield(Revise, Symbol("##methods_by_execution!#15")), Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.methods_by_execution!), Any, Revise.CodeTrackingMethodInfo, Base.Dict{Module, Array{Expr, 1}}, Module, Expr})
precompile(Tuple{typeof(Revise.storedeps), Base.Set{Union{GlobalRef, Symbol}}, Nothing, Module})
precompile(Tuple{typeof(Revise.storedeps), Base.Set{Union{GlobalRef, Symbol}}, Array{Any, 1}, Module})
precompile(Tuple{typeof(Revise.storedeps), Base.Set{Union{GlobalRef, Symbol}}, Revise.RelocatableExpr, Module})
precompile(Tuple{getfield(Revise, Symbol("##instantiate_sigs!#71")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.instantiate_sigs!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{typeof(Revise.queue_includes!), Revise.PkgData, Base.PkgId})
precompile(Tuple{typeof(Revise.parse_pkg_files), Base.PkgId})
precompile(Tuple{Type{Revise.WatchList}})
precompile(Tuple{typeof(Revise.init_watching), Revise.PkgData, Array{String, 1}})
precompile(Tuple{typeof(Revise.__init__)})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Revise.PkgData}, Base.PkgId})
precompile(Tuple{typeof(CodeTracking.basepath), Base.PkgId})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Base.PkgId, Revise.PkgData}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Base.PkgId, Revise.PkgData}, Base.PkgId})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.PkgId, Revise.PkgData}, Revise.PkgData, Base.PkgId})
precompile(Tuple{typeof(Base.push!), Array{Tuple{Module, String, Float64}, 1}, Tuple{Module, String, Float64}})
precompile(Tuple{typeof(Base.seek), Base.IOStream, UInt64})
precompile(Tuple{typeof(Base._deleteat!), Array{Tuple{Module, String, Float64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{Tuple{Module, String, Float64}, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{Tuple{Module, String, Float64}, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.fill!), Array{Int32, 1}, Int64})
precompile(Tuple{typeof(OrderedCollections.rehash!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, Int64})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex2), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, Module})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Module, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Module})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Base.PkgId, CodeTracking.PkgFiles}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Base.PkgId, CodeTracking.PkgFiles}, Base.PkgId})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.PkgId, CodeTracking.PkgFiles}, CodeTracking.PkgFiles, Base.PkgId})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Revise.WatchList}, String})
precompile(Tuple{Type{Base.Dict{String, Base.PkgId}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Revise.WatchList}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Revise.WatchList}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Revise.WatchList}, Revise.WatchList, String})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Base.PkgId}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Base.PkgId}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.PkgId}, Base.PkgId, String})
precompile(Tuple{typeof(Revise.watch_package), Base.PkgId})
precompile(Tuple{typeof(Revise.wait_changed), String})
precompile(Tuple{typeof(Revise.watch_files_via_dir), String})
precompile(Tuple{typeof(Revise.hasfile), Revise.PkgData, String})
precompile(Tuple{typeof(Revise.revise_dir_queued), String})
precompile(Tuple{Revise.Rescheduler{typeof(Revise.revise_dir_queued), Tuple{String}}})
precompile(Tuple{Type{FileWatching.FileMonitor}, String})
precompile(Tuple{typeof(Base.preserve_handle), FileWatching.FileMonitor})
precompile(Tuple{typeof(FileWatching.start_watching), FileWatching.FileMonitor})
precompile(Tuple{typeof(Base.unpreserve_handle), FileWatching.FileMonitor})
precompile(Tuple{typeof(FileWatching.stop_watching), FileWatching.FileMonitor})
precompile(Tuple{typeof(Base.wait), FileWatching.FileMonitor})
precompile(Tuple{typeof(FileWatching.watch_file), String, Int64})
precompile(Tuple{typeof(Revise.watch_manifest), String})
precompile(Tuple{Revise.Rescheduler{typeof(Revise.watch_manifest), Tuple{String}}})
precompile(Tuple{typeof(Revise.remove_from_included_files), Symbol})
precompile(Tuple{typeof(Revise.has_writable_paths), Revise.PkgData})
precompile(Tuple{typeof(Revise._watch_package), Base.PkgId})
precompile(Tuple{getfield(Revise, Symbol("#34#35")){Base.PkgId}})
precompile(Tuple{getfield(Base, Symbol("#689#690")){Base.UUID, String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#689#690")){Base.UUID, String}, String})
precompile(Tuple{typeof(Base.manifest_deps_get), String, Base.PkgId, String})
precompile(Tuple{typeof(Base.identify_package), Base.PkgId, String})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base.sort!), Array{String, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.ReverseOrdering{Base.Order.By{getfield(Revise, Symbol("#23#24"))}}})
precompile(Tuple{typeof(Base.sort!), Array{String, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.ReverseOrdering{Base.Order.By{getfield(Revise, Symbol("#23#24"))}}, Array{String, 1}})
precompile(Tuple{typeof(Base.Printf.fix_dec), Base.TTY, Float64, String, Int64, Int64, Char, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.register_root_module), Module})
precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(OhMyREPL.Prompt.insert_keybindings), Any})
precompile(Tuple{typeof(OhMyREPL.__init__)})
precompile(Tuple{getfield(Revise, Symbol("#92#93")), Module, String})
precompile(Tuple{typeof(OhMyREPL.BracketInserter.enable_autocomplete_brackets), Bool})
precompile(Tuple{typeof(UnitfulAtomic.__init__)})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Tuple{Float64, Base.Rational{Int64}}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Tuple{Float64, Base.Rational{Int64}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Tuple{Float64, Base.Rational{Int64}}}, Tuple{Float64, Base.Rational{Int64}}, Symbol})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Tuple{Float64, Base.Rational{Int64}}}, Base.Dict{Symbol, Tuple{Float64, Base.Rational{Int64}}}})
precompile(Tuple{typeof(Unitful._basefactors), Module})
precompile(Tuple{typeof(Unitful.register), Module})
precompile(Tuple{typeof(Constants.__init__)})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:define,), Tuple{Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Core.Compiler.fieldtype_tfunc), Any, Any, Any})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:filename,), Tuple{String}}}, Type{NamedTuple{(:extract_docexprs,), Tuple{Bool}}}})
precompile(Tuple{typeof(Revise.skip_to_nonline), Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.hash), Revise.LineSkippingIterator, UInt64})
precompile(Tuple{typeof(Base.hash), Revise.RelocatableExpr, UInt64})
precompile(Tuple{typeof(OrderedCollections.hashindex), Revise.RelocatableExpr, Int64})
precompile(Tuple{typeof(OrderedCollections.rehash!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Int64})
precompile(Tuple{Type{Base.Dict{Module, Array{Expr, 1}}}})
precompile(Tuple{typeof(Base.getproperty), Array{Any, 1}, Symbol})
precompile(Tuple{getfield(Revise, Symbol("##instantiate_sigs!#71")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.instantiate_sigs!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{typeof(Base._deleteat!), Array{Tuple{Module, String}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Revise.queue_includes!), Revise.PkgData, Base.PkgId})
precompile(Tuple{typeof(Revise.parse_pkg_files), Base.PkgId})
precompile(Tuple{typeof(Revise._watch_package), Base.PkgId})
precompile(Tuple{getfield(Revise, Symbol("#34#35")){Base.PkgId}})
precompile(Tuple{typeof(MacroTools.__init__)})
precompile(Tuple{typeof(Base.nextpow), Int64, Int64})
precompile(Tuple{typeof(Random.shuffle!), Random.MersenneTwister, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.Printf.decode_dec), Float64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.to_index), Float64})
precompile(Tuple{typeof(Base.to_index), Array{String, 1}, Float64})
precompile(Tuple{typeof(Base.format_bytes), Int64})
precompile(Tuple{typeof(Base.time_print), UInt64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.string), String, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.throw_domerr_powbysq), Int64, Int64})
precompile(Tuple{typeof(Base.power_by_squaring), Int64, Int64})
precompile(Tuple{typeof(Base.:(^)), Int64, Int64})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{17}})
precompile(Tuple{typeof(Base.Grisu.fastfixedtoa), Float64, Int64, Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Grisu.grisu), Float64, Int64, Int64, Array{UInt8, 1}, Array{Base.Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.Grisu.grisu), Float64, Int64, Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.sort!), Array{String, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.By{getfield(Revise, Symbol("#23#24"))}})
precompile(Tuple{typeof(Base.sort!), Array{String, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{getfield(Revise, Symbol("#23#24"))}, Array{String, 1}})
precompile(Tuple{getfield(Base, Symbol("#689#690")){Base.UUID, String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#689#690")){Base.UUID, String}, String})
precompile(Tuple{typeof(Base.manifest_deps_get), String, Base.PkgId, String})
precompile(Tuple{typeof(Base.identify_package), Base.PkgId, String})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Revise.filter_valid_cachefiles), String, Array{String, 1}})
precompile(Tuple{typeof(Revise.pkg_fileinfo), Base.PkgId})
precompile(Tuple{typeof(OrderedCollections.rehash!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Int64})
precompile(Tuple{typeof(Base.isequal), Revise.LineSkippingIterator, Revise.LineSkippingIterator})
precompile(Tuple{typeof(Base.:(==)), Revise.RelocatableExpr, Revise.RelocatableExpr})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex2), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Revise.RelocatableExpr})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Array{Any, 1}, Revise.RelocatableExpr})
precompile(Tuple{getfield(Revise, Symbol("##instantiate_sigs!#71")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.instantiate_sigs!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{typeof(Revise.queue_includes!), Revise.PkgData, Base.PkgId})
precompile(Tuple{typeof(Revise.parse_pkg_files), Base.PkgId})
precompile(Tuple{typeof(Revise._watch_package), Base.PkgId})
precompile(Tuple{getfield(Revise, Symbol("#34#35")){Base.PkgId}})
precompile(Tuple{getfield(Base, Symbol("#Timer#505#506")), Float64, Type{Base.Timer}, Float64})
precompile(Tuple{getfield(Revise, Symbol("#72#73")){String}})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(Revise, Symbol("#72#73")){String}, Base.CoreLogging.LogState})
precompile(Tuple{typeof(Revise.watch_files_via_dir), String})
precompile(Tuple{typeof(Base.hash), Tuple{Revise.PkgData, String}, UInt64})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Tuple{Revise.PkgData, String}, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Tuple{Revise.PkgData, String}, Nothing}, Tuple{Revise.PkgData, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{Revise.PkgData, String}, Nothing}, Nothing, Tuple{Revise.PkgData, String}})
precompile(Tuple{typeof(Revise.revise_dir_queued), String})
precompile(Tuple{Revise.Rescheduler{typeof(Revise.revise_dir_queued), Tuple{String}}})
precompile(Tuple{typeof(Base.Printf.fix_dec), Base.TTY, Float64, String, Int64, Int64, Char, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.register_root_module), Module})
precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.success), typeof(Base.:(&)), Array{Base.Process, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.success), typeof(Base.:(&)), Base.IndexLinear, Array{Base.Process, 1}})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(DocStringExtensions.__init__)})
precompile(Tuple{typeof(Debugger.__init__)})
precompile(Tuple{typeof(GR.init), Bool})
precompile(Tuple{typeof(GR.__init__)})
precompile(Tuple{typeof(GR.isijulia)})
precompile(Tuple{typeof(GR.isatom)})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.GMP.MPZ.set), Base.GMP.BigInt})
precompile(Tuple{typeof(Base.deepcopy), Base.GMP.BigInt})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.GMP.BigInt, 1}, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#33#38")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#34#39")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#35#40")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#36#41")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#37#42")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Base.UUID})
precompile(Tuple{Type{NamedTuple{(:stderr,), T} where T<:Tuple}, Tuple{Base.TTY}})
precompile(Tuple{getfield(Base, Symbol("##pipeline#553")), Nothing, Nothing, Base.TTY, Bool, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{getfield(Base, Symbol("#kw##pipeline")), NamedTuple{(:stderr,), Tuple{Base.TTY}}, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{typeof(Base._spawn_primitive), String, Base.Cmd, Array{Any, 1}})
precompile(Tuple{typeof(Base.setup_stdios), getfield(Base, Symbol("#554#555")){Base.Cmd}, Array{Any, 1}})
precompile(Tuple{typeof(Base._spawn), Base.CmdRedirect, Array{Any, 1}})
precompile(Tuple{getfield(Base, Symbol("##open#563")), Bool, Bool, typeof(Base.open), Base.CmdRedirect, Base.TTY})
precompile(Tuple{typeof(Base.open), Base.CmdRedirect, String, Base.TTY})
precompile(Tuple{typeof(Base.convert), Type{IO}, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.getproperty), Base.Process, Symbol})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.write), Base.PipeEndpoint, String})
precompile(Tuple{typeof(Base.stat), Base.Libc.RawFD})
precompile(Tuple{typeof(Base.isvalid_file_crc), Base.IOStream})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Revise.filter_valid_cachefiles), String, Array{String, 1}})
precompile(Tuple{typeof(Revise.pkg_fileinfo), Base.PkgId})
precompile(Tuple{typeof(Base.read), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#280#281")){String}, String})
precompile(Tuple{typeof(Base.count), Base.Fix2{typeof(Base.isequal), Char}, Base.SubString{String}})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#kw##split_expressions!")), NamedTuple{(:filename, :extract_docexprs), Tuple{String, Bool}}, typeof(JuliaInterpreter.split_expressions!), Array{Tuple{Module, Expr}, 1}, Base.Dict{Module, Array{Expr, 1}}, Expr, Module, Expr})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##split_expressions!#31")), String, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:extract_docexprs,), Tuple{Bool}}}, typeof(JuliaInterpreter.split_expressions!), Array{Tuple{Module, Expr}, 1}, Base.Dict{Module, Array{Expr, 1}}, Expr, Module, Array{Any, 1}})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#kw##split_expressions!")), NamedTuple{(:extract_docexprs, :filename), Tuple{Bool, String}}, typeof(JuliaInterpreter.split_expressions!), Array{Tuple{Module, Expr}, 1}, Base.Dict{Module, Array{Expr, 1}}, Expr, Module, Array{Any, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Module}, Nothing})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Module, Array{Expr, 1}}, Module})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Module, Array{Expr, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Module, Array{Expr, 1}}, Module})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Module, Array{Expr, 1}}, Array{Expr, 1}, Module})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##split_expressions!#28")), Bool, String, typeof(JuliaInterpreter.split_expressions!), Array{Tuple{Module, Expr}, 1}, Base.Dict{Module, Array{Expr, 1}}, Expr, Module, Expr})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, Module, Bool})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Nothing, Revise.RelocatableExpr})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Nothing, Nothing})
precompile(Tuple{typeof(Revise.parse_source!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, String, String, Module})
precompile(Tuple{typeof(Revise.parse_source!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, String, Module})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Array{Any, 1}, Revise.RelocatableExpr})
precompile(Tuple{getfield(Revise, Symbol("##instantiate_sigs!#71")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.instantiate_sigs!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{typeof(Revise.queue_includes!), Revise.PkgData, Base.PkgId})
precompile(Tuple{typeof(Revise.parse_pkg_files), Base.PkgId})
precompile(Tuple{typeof(Revise._watch_package), Base.PkgId})
precompile(Tuple{getfield(Revise, Symbol("#34#35")){Base.PkgId}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UUID})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, UInt64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt64})
precompile(Tuple{typeof(Base.write), Base.Process, String})
precompile(Tuple{typeof(Base.show_delim_array), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64, UInt64}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64, UInt64}})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#698#700")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(LAME_jll.__init__)})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{Symbol, Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}}, Base.Pair{Symbol, Base.Dict{Base.SHA1, Union{Base.SHA1, String}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}}, Base.Pair{Symbol, Base.Dict{Base.SHA1, Union{Base.SHA1, String}}}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##load_overrides#3")), Bool, typeof(Pkg.Artifacts.load_overrides)})
precompile(Tuple{typeof(Pkg.Artifacts.process_overrides), Base.Dict{String, Any}, Base.UUID})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}}, Tuple{Base.Pair{Symbol, Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}}, Base.Pair{Symbol, Base.Dict{Base.SHA1, Union{Base.SHA1, String}}}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}}, Base.Pair{Symbol, Base.Dict{Base.SHA1, Union{Base.SHA1, String}}}}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}, Base.UUID})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_meta#20")), Pkg.BinaryPlatforms.Platform, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##artifact_meta")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#nosym#16")), String})
precompile(Tuple{Type{NamedTuple{(:libc, :compiler_abi), T} where T<:Tuple}, Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.MacOS}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.MacOS, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{Type{NamedTuple{(:libc, :compiler_abi), T} where T<:Tuple}, Tuple{Symbol, Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Symbol, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.Linux}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.Linux, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#FreeBSD#19#20")), Nothing, Nothing, Pkg.BinaryPlatforms.CompilerABI, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.FreeBSD, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#Windows#17#18")), Nothing, Nothing, Pkg.BinaryPlatforms.CompilerABI, Type{Pkg.BinaryPlatforms.Windows}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.Windows}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.Windows, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Windows})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.Windows})
precompile(Tuple{typeof(Base.filter), Function, Base.KeySet{Pkg.BinaryPlatforms.Platform, Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, typeof(Base.push!), Base.KeySet{Pkg.BinaryPlatforms.Platform, Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Set{Pkg.BinaryPlatforms.Platform}})
precompile(Tuple{typeof(Base.:(==)), Base.VersionNumber, Base.VersionNumber})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.Windows})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Nothing}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Nothing}, Nothing, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.push!), Base.Set{Pkg.BinaryPlatforms.Platform}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##ensure_artifact_installed")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_paths#9")), Bool, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_exists#11")), Bool, typeof(Pkg.Artifacts.artifact_exists), Base.SHA1})
precompile(Tuple{typeof(Base.pipeline_error), Base.ProcessChain})
precompile(Tuple{typeof(Base.read), Base.OrCmds})
precompile(Tuple{typeof(Base.read), Base.OrCmds, Type{String}})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("#28#53")){String, Base.Cmd}})
precompile(Tuple{typeof(Base.Filesystem.cd), getfield(Pkg.PlatformEngines, Symbol("#28#53")){String, Base.Cmd}, String})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Tuple, 1}, getfield(Pkg.PlatformEngines, Symbol("#36#61"))}})
precompile(Tuple{typeof(Base.success), Base.Cmd})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##probe_cmd#14")), Bool, typeof(Pkg.PlatformEngines.probe_cmd), Base.Cmd})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Tuple, 1}, getfield(Pkg.PlatformEngines, Symbol("#40#65"))}})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##probe_platform_engines!#15")), Bool, typeof(Pkg.PlatformEngines.probe_platform_engines!)})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##verify#98")), Bool, Bool, String, typeof(Pkg.PlatformEngines.verify), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download#82")), Bool, typeof(Pkg.PlatformEngines.download), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify#83")), Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify), String, String, String})
precompile(Tuple{getfield(Base, Symbol("##run#565")), Bool, typeof(Base.run), Base.CmdRedirect})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##get_tarball_contents#84")), Bool, typeof(Pkg.PlatformEngines.get_tarball_contents), String})
precompile(Tuple{typeof(Base.convert), Type{Nothing}, Base.SubString{String}})
precompile(Tuple{typeof(Base.convert), Type{Base.Pair{Nothing, String}}, Base.Pair{Base.SubString{String}, String}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{Nothing, String}, 1}, Base.Pair{Base.SubString{String}, String}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Nothing, String}, 1}, Base.Pair{Base.SubString{String}, String}, Base.Generator{Array{Array{Union{Nothing, Base.SubString{String}}, 1}, 1}, getfield(Pkg.PlatformEngines, Symbol("#88#90"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Array{Union{Nothing, Base.SubString{String}}, 1}, 1}, getfield(Pkg.PlatformEngines, Symbol("#88#90"))}})
precompile(Tuple{typeof(Pkg.PlatformEngines.list_tarball_symlinks), String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("#kw##cptree")), NamedTuple{(:force, :follow_symlinks), Tuple{Bool, Bool}}, typeof(Base.Filesystem.cptree), String, String})
precompile(Tuple{typeof(Base.Filesystem.sendfile), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##cptree#11")), Bool, Bool, typeof(Base.Filesystem.cptree), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##cp#12")), Bool, Bool, typeof(Base.Filesystem.cp), String, String})
precompile(Tuple{typeof(Base.write), Base.IOStream, Nothing})
precompile(Tuple{typeof(Pkg.PlatformEngines.probe_symlink_creation), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##unpack#91")), Bool, typeof(Pkg.PlatformEngines.unpack), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify_unpack#96")), Nothing, Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify_unpack), String, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##artifact_paths")), NamedTuple{(:honor_overrides,), Tuple{Bool}}, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_path#10")), Bool, typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{typeof(Base.Filesystem.rename), String, String})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Pkg.Artifacts, Symbol("#39#40")){Bool, String, String}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##download_artifact#38")), Bool, typeof(Pkg.Artifacts.download_artifact), Base.SHA1, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(Libdl.dlopen), String})
precompile(Tuple{typeof(Zlib_jll.__init__)})
precompile(Tuple{typeof(Bzip2_jll.__init__)})
precompile(Tuple{typeof(FreeType2_jll.__init__)})
precompile(Tuple{typeof(FriBidi_jll.__init__)})
precompile(Tuple{typeof(LibVPX_jll.__init__)})
precompile(Tuple{typeof(x265_jll.__init__)})
precompile(Tuple{typeof(x264_jll.__init__)})
precompile(Tuple{typeof(OpenSSL_jll.__init__)})
precompile(Tuple{typeof(Ogg_jll.__init__)})
precompile(Tuple{typeof(Opus_jll.__init__)})
precompile(Tuple{typeof(libfdk_aac_jll.__init__)})
precompile(Tuple{typeof(libvorbis_jll.__init__)})
precompile(Tuple{typeof(libass_jll.__init__)})
precompile(Tuple{typeof(FFMPEG_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(FFMPEG_jll, Symbol("#13#15")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(FFMPEG_jll, Symbol("#14#16")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(PlotUtils.__init__)})
precompile(Tuple{typeof(Requires.__init__)})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(PlotThemes.add_theme), Symbol, PlotThemes.PlotTheme})
precompile(Tuple{typeof(Requires.listenpkg), Any, Base.PkgId})
precompile(Tuple{typeof(PlotThemes.__init__)})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, PlotUtils.ColorLibrary}, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Array{ColorTypes.RGBA{Float64}, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Array{ColorTypes.RGBA{Float64}, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Array{ColorTypes.RGBA{Float64}, 1}}, Array{ColorTypes.RGBA{Float64}, 1}, Symbol})
precompile(Tuple{typeof(PlotUtils.register_gradient_colors), Symbol, Array{ColorTypes.RGBA{Float64}, 1}, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, PlotThemes.PlotTheme}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, PlotThemes.PlotTheme}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, PlotThemes.PlotTheme}, PlotThemes.PlotTheme, Symbol})
precompile(Tuple{typeof(Base.eltype), Type{C}} where C<:(ColorTypes.Colorant{T, N} where N where T))
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Colorant{T, N}}} where N where T)
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.ColorAlpha{ColorTypes.RGB{Float64}, Float64, 4}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGBA{Float64}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.AbstractRGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Core.Compiler._typename), TypeVar})
precompile(Tuple{typeof(ColorTypes.basetype), Type{T} where T})
precompile(Tuple{typeof(Base.typename), DataType})
precompile(Tuple{typeof(ColorTypes.color_type), Type{ColorTypes.ColorAlpha{ColorTypes.RGB{Float64}, Float64, 4}}})
precompile(Tuple{typeof(ColorTypes.color_type), Type{ColorTypes.RGBA{Float64}}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{ColorTypes.RGBA{Float64}, 1}, Base.IndexLinear, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Array{ColorTypes.RGBA{Float64}, 1}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Symbol})
precompile(Tuple{typeof(PlotUtils.register_gradient_colors), Symbol, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Base.PkgId, Array{Function, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Function, 1}, Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{typeof(Base.get!), getfield(Requires, Symbol("#1#2")), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.push!), Array{Function, 1}, Function})
precompile(Tuple{typeof(Plots._plots_defaults)})
precompile(Tuple{typeof(Plots._get_defaults), Symbol})
precompile(Tuple{getfield(Plots, Symbol("##default#122")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.default)})
precompile(Tuple{getfield(Plots, Symbol("##_theme#131")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots._theme), Symbol, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.__init__)})
precompile(Tuple{typeof(Revise.filter_valid_cachefiles), String, Array{String, 1}})
precompile(Tuple{typeof(Revise.pkg_fileinfo), Base.PkgId})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Nothing, Revise.RelocatableExpr})
precompile(Tuple{typeof(Revise.parse_source!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, String, String, Module})
precompile(Tuple{typeof(Revise.parse_source!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, String, Module})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Array{Any, 1}, Revise.RelocatableExpr})
precompile(Tuple{getfield(Revise, Symbol("##instantiate_sigs!#71")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.instantiate_sigs!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{typeof(Revise.queue_includes!), Revise.PkgData, Base.PkgId})
precompile(Tuple{typeof(Revise.parse_pkg_files), Base.PkgId})
precompile(Tuple{typeof(Revise._watch_package), Base.PkgId})
precompile(Tuple{getfield(Revise, Symbol("#34#35")){Base.PkgId}})
precompile(Tuple{getfield(Base, Symbol("#770#772")){Bool, Bool, Bool, Bool}, Module})
precompile(Tuple{typeof(REPL.Terminals.hascolor), REPL.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.banner), REPL.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.VersionNumber})
precompile(Tuple{typeof(Base.Multimedia.popdisplay), Plots.PlotsDisplay})
precompile(Tuple{getfield(Plots, Symbol("#302#329")), REPL.LineEditREPL})
precompile(Tuple{typeof(OhMyREPL.Prompt.insert_keybindings), Any})
precompile(Tuple{typeof(OhMyREPL.update_interface), REPL.LineEdit.ModalInterface})
precompile(Tuple{getfield(OhMyREPL, Symbol("#1#4")), REPL.LineEditREPL})
precompile(Tuple{typeof(REPL.LineEdit.normalize_keys), Base.Dict{K, V} where V where K})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Dict{Any, Any}, 1}, Base.Dict{Any, Any}, Base.Generator{Array{Base.Dict{Any, Any}, 1}, typeof(REPL.LineEdit.normalize_keys)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Base.Dict{Any, Any}, 1}, Base.Generator{Array{Base.Dict{Any, Any}, 1}, typeof(REPL.LineEdit.normalize_keys)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(REPL.LineEdit.keymap_unify), Any})
precompile(Tuple{typeof(REPL.setup_interface), REPL.LineEditREPL, Bool, Any})
precompile(Tuple{getfield(REPL, Symbol("##setup_interface#45")), Bool, Any, typeof(REPL.setup_interface), REPL.LineEditREPL})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, REPL.LineEdit.Prompt}, Vararg{Base.Pair{Symbol, REPL.LineEdit.Prompt}, N} where N})
precompile(Tuple{Type{REPL.REPLHistoryProvider}, Any})
precompile(Tuple{Type{REPL.REPLHistoryProvider}, Any, Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(REPL.hist_getline), Any})
precompile(Tuple{typeof(REPL.hist_from_file), Any, Any, Any})
precompile(Tuple{typeof(Base.peek), Base.IOStream})
precompile(Tuple{Type{Char}, Int32})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#44#75"))}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.normalize_key), AbstractString})
precompile(Tuple{typeof(REPL.LineEdit.normalize_key), Integer})
precompile(Tuple{typeof(REPL.LineEdit.keymap_merge), Any, Any})
precompile(Tuple{typeof(Base.filter), getfield(REPL.LineEdit, Symbol("#29#30")), Base.Dict{Any, Any}})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##add_nested_key!#22")), Any, typeof(REPL.LineEdit.add_nested_key!), Base.Dict{K, V} where V where K, Any, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#kw##add_nested_key!")), Any, typeof(REPL.LineEdit.add_nested_key!), Base.Dict{K, V} where V where K, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.fixup_keymaps!), Base.Dict{K, V} where V where K, Any, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.getEntry), Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.validate_keymap), Any})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#73#104")){REPL.LineEdit.HistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, getfield(REPL, Symbol("#49#58")){REPL.LineEdit.Prompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#248#252")){REPL.LineEdit.PrefixHistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, getfield(REPL, Symbol("#39#42")){REPL.LineEdit.Prompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.getindex), Array{REPL.LineEdit.TextInterface, 1}, Int64})
precompile(Tuple{typeof(Base.vect), Base.Dict{Any, Any}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Dict{Any, Any}, Base.Dict{Char, Any}})
precompile(Tuple{Type{Array{Base.Dict{K, Any} where K, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Dict{K, Any} where K, 1}, Tuple{Base.Dict{Any, Any}, Base.Dict{Char, Any}}})
precompile(Tuple{typeof(REPL.LineEdit.keymap), Array{#s627, N} where N where #s627<:(Base.Dict{K, V} where V where K)})
precompile(Tuple{typeof(Base.reverse), Array{Base.Dict{K, Any} where K, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.reverse), Array{Base.Dict{K, Any} where K, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{Base.Dict{K, Any} where K, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(REPL.LineEdit.normalize_keys), Array{Base.Dict{K, Any} where K, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Dict{Any, Any}, 1}, Base.Dict{Any, Any}, Base.Generator{Array{Base.Dict{K, Any} where K, 1}, typeof(REPL.LineEdit.normalize_keys)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Base.Dict{K, Any} where K, 1}, Base.Generator{Array{Base.Dict{K, Any} where K, 1}, typeof(REPL.LineEdit.normalize_keys)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.Dict{K, Any} where K, 1}, Base.Generator{Array{Base.Dict{K, Any} where K, 1}, typeof(REPL.LineEdit.normalize_keys)}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{Char, Any}, String})
precompile(Tuple{Type{Base.Pair{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}}, Any, Any})
precompile(Tuple{Type{Base.Pair{String, getfield(OhMyREPL, Symbol("#3#6")){REPL.LineEdit.PrefixHistoryPrompt}}}, Any, Any})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}, Base.Pair{String, getfield(OhMyREPL, Symbol("#3#6")){REPL.LineEdit.PrefixHistoryPrompt}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}, Base.Pair{String, getfield(OhMyREPL, Symbol("#3#6")){REPL.LineEdit.PrefixHistoryPrompt}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}, Base.Pair{String, getfield(OhMyREPL, Symbol("#3#6")){REPL.LineEdit.PrefixHistoryPrompt}}}})
precompile(Tuple{Type{Base.Dict{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}, Function, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}, Tuple{Base.Pair{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}, Base.Pair{String, getfield(OhMyREPL, Symbol("#3#6")){REPL.LineEdit.PrefixHistoryPrompt}}}, Int64})
precompile(Tuple{Type{Base.Dict{String, Function}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}, Type{String}, Type{Function}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Function}, Base.Dict{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Function}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Function}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Function}, Function, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Function}, Tuple{Base.Pair{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}, Base.Pair{String, getfield(OhMyREPL, Symbol("#3#6")){REPL.LineEdit.PrefixHistoryPrompt}}}, Int64})
precompile(Tuple{typeof(Base.vect), Base.Dict{String, Function}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Dict{String, Function}, Base.Dict{Char, Any}})
precompile(Tuple{Type{Array{Base.Dict{K, V} where V where K, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Dict{K, V} where V where K, 1}, Tuple{Base.Dict{String, Function}, Base.Dict{Char, Any}}})
precompile(Tuple{typeof(Base.reverse), Array{Base.Dict{K, V} where V where K, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.reverse), Array{Base.Dict{K, V} where V where K, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{Base.Dict{K, V} where V where K, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(REPL.LineEdit.normalize_keys), Array{Base.Dict{K, V} where V where K, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Dict{Any, Any}, 1}, Base.Dict{Any, Any}, Base.Generator{Array{Base.Dict{K, V} where V where K, 1}, typeof(REPL.LineEdit.normalize_keys)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Base.Dict{K, V} where V where K, 1}, Base.Generator{Array{Base.Dict{K, V} where V where K, 1}, typeof(REPL.LineEdit.normalize_keys)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.Dict{K, V} where V where K, 1}, Base.Generator{Array{Base.Dict{K, V} where V where K, 1}, typeof(REPL.LineEdit.normalize_keys)}})
precompile(Tuple{typeof(Base._iterate), Base.Dict{String, Function}, Int64})
precompile(Tuple{getfield(Main, Symbol("#3#5")), REPL.LineEditREPL})
precompile(Tuple{typeof(Pkg.REPLMode.repl_init), REPL.LineEditREPL})
precompile(Tuple{getfield(Pkg, Symbol("#1#2")), REPL.LineEditREPL})
precompile(Tuple{typeof(Pkg.REPLMode.create_mode), REPL.LineEditREPL, REPL.LineEdit.Prompt})
precompile(Tuple{typeof(REPL.run_frontend), REPL.StreamREPL, REPL.REPLBackendRef})
precompile(Tuple{typeof(REPL.run_frontend), REPL.LineEditREPL, REPL.REPLBackendRef})
precompile(Tuple{typeof(REPL.run_frontend), REPL.BasicREPL, REPL.REPLBackendRef})
precompile(Tuple{typeof(REPL.run_repl), REPL.AbstractREPL, Any})
precompile(Tuple{typeof(REPL.Terminals.raw!), REPL.Terminals.TTYTerminal, Bool})
precompile(Tuple{typeof(REPL.LineEdit.prompt!), REPL.Terminals.TextTerminal, REPL.LineEdit.ModalInterface, REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.run_interface), REPL.Terminals.TextTerminal, REPL.LineEdit.ModalInterface, REPL.LineEdit.MIState})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Nothing}}, Ptr{Nothing}})
precompile(Tuple{typeof(Revise.wait_steal_repl_backend)})
precompile(Tuple{getfield(Main, Symbol("#4#6"))})
precompile(Tuple{getfield(Revise, Symbol("#84#86")){REPL.REPLBackend}})
precompile(Tuple{typeof(REPL.LineEdit.activate), REPL.LineEdit.TextInterface, REPL.LineEdit.ModeState, Any, REPL.Terminals.TextTerminal})
precompile(Tuple{typeof(REPL.LineEdit.refresh_line), Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#17")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Union{REPL.LineEdit.PrefixSearchState, REPL.LineEdit.PromptState}})
precompile(Tuple{typeof(REPL.LineEdit.cancel_beep), REPL.LineEdit.PromptState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#37")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Union{REPL.LineEdit.PrefixSearchState, REPL.LineEdit.PromptState}})
precompile(Tuple{typeof(REPL.LineEdit.match_input), Base.Dict{K, V} where V where K, Any})
precompile(Tuple{typeof(Base.read), Base.Filesystem.File, Type{Char}})
precompile(Tuple{typeof(REPL.LineEdit.match_input), Base.Dict{K, V} where V where K, Any, Any, Any, Any})
precompile(Tuple{typeof(Revise.add_definitions_from_repl), String})
precompile(Tuple{typeof(Revise.read_from_cache), Revise.PkgData, String})
precompile(Tuple{typeof(Revise.maybe_parse_from_cache!), Revise.PkgData, String})
precompile(Tuple{typeof(Revise.delete_missing!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{typeof(Revise.handle_deletions), Revise.PkgData, String})
precompile(Tuple{typeof(Base.push!), Array{OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, 1}, Nothing})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Tuple{Revise.PkgData, String}, Tuple{Exception, Any}}, Tuple{Revise.PkgData, String}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Tuple{Exception, Any}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Tuple{Revise.PkgData, String}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Tuple{Revise.PkgData, String}, Tuple{Exception, Any}}, Int64})
precompile(Tuple{typeof(Revise.init_watching), Revise.PkgData, Tuple{String}})
precompile(Tuple{typeof(Revise.maybe_add_includes_to_pkgdata!), Revise.PkgData, String, Array{Base.Pair{Module, Array{String, 1}}, 1}})
precompile(Tuple{typeof(Revise.errors), Array{Any, 1}})
precompile(Tuple{typeof(Revise.queue_includes), Module})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Tuple{Revise.PkgData, String}, Nothing}, Tuple{Revise.PkgData, String}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Tuple{Revise.PkgData, String}, Nothing}})
precompile(Tuple{typeof(Base.to_index), Array{Revise.FileInfo, 1}, Nothing})
precompile(Tuple{typeof(Revise.revise)})
precompile(Tuple{typeof(Revise.run_backend), REPL.REPLBackend})
precompile(Tuple{getfield(Revise, Symbol("#85#87")){REPL.REPLBackend}})
precompile(Tuple{typeof(Base.uv_alloc_buf), Ptr{Nothing}, UInt64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.uv_readcb), Ptr{Nothing}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.read), REPL.Terminals.TTYTerminal, Type{Char}})
precompile(Tuple{typeof(Base.:(==)), Array{Char, 1}, WeakRef})
precompile(Tuple{typeof(REPL.LineEdit.update_key_repeats), REPL.LineEdit.MIState, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#27#28")){getfield(OhMyREPL.Prompt, Symbol("#2#27")), String}, Any, Any})
precompile(Tuple{Type{Base.Val{3}}})
precompile(Tuple{typeof(OhMyREPL.Prompt.get_prompt), Any})
precompile(Tuple{typeof(Base.fill!), Array{Crayons.Crayon, 1}, Crayons.Crayon})
precompile(Tuple{typeof(OhMyREPL.apply_passes!), OhMyREPL.PassHandler, Array{Tokenize.Tokens.Token, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.map), getfield(Crayons, Symbol("#4#6")), Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.map), getfield(Crayons, Symbol("#5#7")), Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Crayons.to_256_colors), Crayons.ANSIColor})
precompile(Tuple{typeof(Crayons._print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Crayons.Crayon})
precompile(Tuple{typeof(Crayons.to_system_colors), Crayons.ANSIColor})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Crayons.Crayon})
precompile(Tuple{typeof(Tokenize.Tokens.untokenize), Tokenize.Tokens.Token})
precompile(Tuple{typeof(OhMyREPL.untokenize_with_ANSI), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(OhMyREPL.Prompt.rewrite_with_ANSI), Any, Bool})
precompile(Tuple{getfield(OhMyREPL.Prompt, Symbol("#2#27")), Any, Any, Any})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.TTY})
precompile(Tuple{typeof(Base.write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.getindex), Array{UInt8, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.unsafe_write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.seekstart), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{Tokenize.Lexers.Lexer{IO_t, T} where T<:Tokenize.Tokens.AbstractToken where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Type{Tokenize.Tokens.Token}})
precompile(Tuple{Type{Tokenize.Lexers.Lexer{IO_t, T} where T<:Tokenize.Tokens.AbstractToken where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Tokenize.Lexers.readchar), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Lexers.emit), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tokenize.Tokens.Kind, Tokenize.Tokens.TokenError})
precompile(Tuple{typeof(Tokenize.Lexers.lex_comment), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Bool})
precompile(Tuple{typeof(Tokenize.Lexers.lex_prime), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Lexers.dotop2), Char, Char})
precompile(Tuple{typeof(Tokenize.Lexers.is_cat_id_start), Char, Int32})
precompile(Tuple{typeof(Tokenize.Lexers.is_identifier_start_char), Char})
precompile(Tuple{typeof(Tokenize.Lexers.is_operator_start_char), UInt32})
precompile(Tuple{typeof(Tokenize.Lexers.accept_number), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, typeof(Tokenize.Lexers.ishex)})
precompile(Tuple{typeof(Tokenize.Lexers.lex_digit), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Tokenize.Lexers.lex_dot), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Lexers.is_identifier_char), Char})
precompile(Tuple{typeof(Tokenize.Lexers.readrest), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char, Char, Char, Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char, Char, Char, Char, Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Char, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char, Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char, Char, Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.lex_identifier), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Char})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Char, Tokenize.Tokens.Kind}, Char})
precompile(Tuple{typeof(Tokenize.Lexers.next_token), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Bool})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.collect), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{OhMyREPL.Passes.SyntaxHighlighter.SyntaxHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(Base.to_index), Array{Int64, 1}, Nothing})
precompile(Tuple{typeof(Base.to_index), Array{Tokenize.Tokens.Kind, 1}, Nothing})
precompile(Tuple{typeof(OhMyREPL.Passes.BracketHighlighter.bracket_match), Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{OhMyREPL.Passes.BracketHighlighter.BracketHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(OhMyREPL.Passes.RainbowBrackets.get_color), OhMyREPL.Passes.RainbowBrackets.RainbowBracketsSettings, Tokenize.Tokens.Kind, Int64})
precompile(Tuple{OhMyREPL.Passes.RainbowBrackets.RainbowBracketsSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(OhMyREPL.Prompt.refresh_multi_line), Any, Any, Any, Any, Any})
precompile(Tuple{getfield(Base, Symbol("#kw##readline")), NamedTuple{(:keep,), Tuple{Bool}}, typeof(Base.readline), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.flush), REPL.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.print_to_string), Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64, String, Vararg{Any, N} where N})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#27#28")){getfield(OhMyREPL.BracketInserter, Symbol("#6#13")){Array{Char, 1}, Array{Char, 1}}, String}, Any, Any})
precompile(Tuple{typeof(OhMyREPL.BracketInserter.peek), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(REPL.LineEdit.edit_move_right), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(REPL.LineEdit.edit_backspace), REPL.LineEdit.PromptState})
precompile(Tuple{typeof(Base.to_index), Array{Char, 1}, Nothing})
precompile(Tuple{getfield(OhMyREPL.BracketInserter, Symbol("#6#13")){Array{Char, 1}, Array{Char, 1}}, REPL.LineEdit.MIState, REPL.LineEditREPL, String})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##edit_splice!#18")), Bool, typeof(REPL.LineEdit.edit_splice!), Any, Base.Pair{#s627, #s626} where #s626<:Integer where #s627<:Integer, AbstractString})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#27#28")){getfield(OhMyREPL.BracketInserter, Symbol("#1#8")){Array{Char, 1}, Char, Char}, String}, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.setmark), REPL.LineEdit.MIState, Bool})
precompile(Tuple{typeof(REPL.LineEdit.set_action!), REPL.LineEdit.MIState, Symbol})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert), REPL.LineEdit.MIState, Any})
precompile(Tuple{typeof(REPL.LineEdit.edit_move_left), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert), REPL.LineEdit.PromptState, Any})
precompile(Tuple{getfield(OhMyREPL.BracketInserter, Symbol("#1#8")){Array{Char, 1}, Char, Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any, N} where N})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#27#28")){getfield(OhMyREPL.BracketInserter, Symbol("#5#12")){Char}, String}, Any, Any})
precompile(Tuple{getfield(OhMyREPL.BracketInserter, Symbol("#5#12")){Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any, N} where N})
precompile(Tuple{typeof(Tokenize.Lexers.string_terminated), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Tokenize.Lexers.read_string), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Tokenize.Lexers.lex_quote), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Bool})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#27#28")){getfield(OhMyREPL.BracketInserter, Symbol("#2#9")){Char}, String}, Any, Any})
precompile(Tuple{getfield(OhMyREPL.BracketInserter, Symbol("#2#9")){Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any, N} where N})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#27#28")){getfield(OhMyREPL.Prompt, Symbol("#22#47")), String}, Any, Any})
precompile(Tuple{typeof(OhMyREPL._check_pass_name), OhMyREPL.PassHandler, String, Bool})
precompile(Tuple{typeof(OhMyREPL.enable_pass!), OhMyREPL.PassHandler, String, Bool})
precompile(Tuple{typeof(REPL.LineEdit.add_history), REPL.LineEdit.PromptState})
precompile(Tuple{typeof(REPL.LineEdit.add_history), REPL.LineEdit.MIState})
precompile(Tuple{typeof(OhMyREPL.Prompt._commit_line), Any, Any, Any})
precompile(Tuple{getfield(OhMyREPL.Prompt, Symbol("#22#47")), Any, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.add_history), REPL.REPLHistoryProvider, Any})
precompile(Tuple{typeof(REPL.reset), REPL.LineEditREPL})
precompile(Tuple{getfield(REPL, Symbol("#do_respond#38")){Bool, getfield(REPL, Symbol("#48#57")){REPL.LineEditREPL, REPL.REPLHistoryProvider}, REPL.LineEditREPL, REPL.LineEdit.Prompt}, Any, Any, Any})
precompile(Tuple{typeof(Base.println), Base.TTY, String})
precompile(Tuple{typeof(REPL.ends_with_semicolon), AbstractString})
precompile(Tuple{typeof(REPL.print_response), REPL.AbstractREPL, Any, Bool, Bool})
precompile(Tuple{typeof(REPL.LineEdit.cancel_beep), REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.transition), Function, REPL.LineEdit.MIState, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#14")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Tokenize.Tokens.Kind, Symbol}, Tokenize.Tokens.Kind})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#27#28")){getfield(OhMyREPL.Prompt, Symbol("#25#50")), String}, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.complete_line), REPL.LineEdit.MIState})
precompile(Tuple{getfield(OhMyREPL.Prompt, Symbol("#25#50")), Any, Any, Any})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), Expr, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{typeof(REPL.LineEdit.show_completions), REPL.LineEdit.PromptState, Any})
precompile(Tuple{typeof(REPL.LineEdit.common_prefix), Any})
precompile(Tuple{typeof(REPL.LineEdit.complete_line), REPL.LineEdit.PromptState, Any})
precompile(Tuple{typeof(REPL.REPLCompletions.completions), String, Int64})
precompile(Tuple{typeof(Base._collect), Array{REPL.REPLCompletions.Completion, 1}, Base.Generator{Array{REPL.REPLCompletions.Completion, 1}, typeof(REPL.REPLCompletions.completion_text)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(REPL.LineEdit.complete_line), REPL.REPLCompletionProvider, Any})
precompile(Tuple{typeof(Base.incomplete_tag), Expr})
precompile(Tuple{typeof(REPL.REPLCompletions.complete_methods), Expr, Module})
precompile(Tuple{typeof(REPL.REPLCompletions.complete_symbol), String, getfield(REPL.REPLCompletions, Symbol("#21#25")), Module})
precompile(Tuple{typeof(Base.unique), Array{REPL.REPLCompletions.Completion, 1}})
precompile(Tuple{typeof(REPL.REPLCompletions.complete_symbol), String, getfield(REPL.REPLCompletions, Symbol("#22#26")), Module})
precompile(Tuple{typeof(REPL.REPLCompletions.completions), String, Int64, Module})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Array{REPL.REPLCompletions.Completion, 1}, typeof(REPL.REPLCompletions.completion_text)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{REPL.REPLCompletions.Completion, 1}, typeof(REPL.REPLCompletions.completion_text)}, Int64})
precompile(Tuple{typeof(REPL.LineEdit.edit_splice!), Any, Base.Pair{#s627, #s626} where #s626<:Integer where #s627<:Integer, AbstractString})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.ModeState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#13")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.ModeState})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{Unitful.FreeUnits{(Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}, Bool}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{Unitful.FreeUnits{(Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}, Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Unitful.FreeUnits{(Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Unitful.FreeUnits{(Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Unitful.FreeUnits{(Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, Any})
precompile(Tuple{typeof(Base.allocatedinline), Type{Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}}})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Unitful.FreeUnits{(Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, REPL.Terminals.TTYTerminal, Base.Pair{Symbol, Bool}})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#145#149")), Tuple{Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}}}, getfield(Unitful, Symbol("#144#148"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#145#149")), Tuple{Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}}}, getfield(Unitful, Symbol("#144#148"))}})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#147#151")), Tuple{Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}}}, getfield(Unitful, Symbol("#146#150"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Unitful, Symbol("#147#151")), Tuple{Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}}}, getfield(Unitful, Symbol("#146#150"))}})
precompile(Tuple{typeof(Base.vcat), Array{Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}, 1}, Array{Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Int64, String}, Int64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.print_to_string), Base.Rational{Int64}})
precompile(Tuple{typeof(Unitful.superscript), Base.Rational{Int64}})
precompile(Tuple{typeof(Unitful.showrep), Base.IOContext{REPL.Terminals.TTYTerminal}, Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}})
precompile(Tuple{getfield(Unitful, Symbol("#142#143")){Base.IOContext{REPL.Terminals.TTYTerminal}, String}, Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Unitful.FreeUnits{(Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Multimedia.MIME{Symbol("text/plain")}, Unitful.FreeUnits{(Unitful.Unit{:ReducedPlanckConstant, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=2, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-1, den=1)))}(), nothing}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_whitespace), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_colon), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{getfield(DanUtils, Symbol("#@AutoParm")), LineNumberNode, Module, Any})
precompile(Tuple{typeof(MacroTools.block), Expr})
precompile(Tuple{typeof(DanUtils.iterflatten), Expr})
precompile(Tuple{typeof(Base.map), Function, Array{Any, 1}})
precompile(Tuple{typeof(MacroTools.walk), Expr, Function, typeof(DanUtils.my_flatten1)})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}, Array{Any, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}})
precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}})
precompile(Tuple{getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}, Expr})
precompile(Tuple{getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}, Bool})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Bool}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Bool, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Int64})
precompile(Tuple{getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}, Symbol})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Bool, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Bool, 1}, Symbol, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Int64, Int64})
precompile(Tuple{getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}, LineNumberNode})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{LineNumberNode}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{LineNumberNode, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{LineNumberNode, 1}, LineNumberNode, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Symbol}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Int64})
precompile(Tuple{typeof(DanUtils.my_flatten1), Expr})
precompile(Tuple{typeof(MacroTools.isexpr), LineNumberNode, Symbol})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Expr}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(DanUtils.my_flatten1)}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DanUtils, Symbol("#91#98")), Array{Any, 1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Expr}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Array{Any, 1}, getfield(DanUtils, Symbol("#91#98"))}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(DanUtils, Symbol("#91#98"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(DanUtils, Symbol("#91#98"))}})
precompile(Tuple{typeof(Base.filter), getfield(MacroTools, Symbol("#15#17")), Array{Any, 1}})
precompile(Tuple{typeof(Base.filter), getfield(MacroTools, Symbol("#16#18")), Array{Any, 1}})
precompile(Tuple{typeof(MacroTools.rmlines), Expr})
precompile(Tuple{typeof(MacroTools.unblock), Expr})
precompile(Tuple{typeof(MacroTools.normalise), Expr})
precompile(Tuple{typeof(MacroTools.bname), Symbol})
precompile(Tuple{typeof(Base.:(==)), WeakRef, Expr})
precompile(Tuple{typeof(MacroTools.nomatch), Symbol, Expr})
precompile(Tuple{typeof(Base.isequal), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(MacroTools.store!), Base.Dict{Any, Any}, Symbol, Expr})
precompile(Tuple{typeof(MacroTools.isslurp), Symbol})
precompile(Tuple{typeof(Base.:(==)), WeakRef, Array{Any, 1}})
precompile(Tuple{typeof(MacroTools.nomatch), Symbol, Array{Any, 1}})
precompile(Tuple{typeof(MacroTools.store!), Base.Dict{Any, Any}, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(MacroTools.match), Expr, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.trymatch), Expr, Expr})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.esc), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Any, 1}, Array{Any, 1}}}, getfield(DanUtils, Symbol("#93#100"))}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Any, 1}, Array{Any, 1}}}, getfield(DanUtils, Symbol("#93#100"))}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Expr, 1}, Array{Any, 1}}}, getfield(DanUtils, Symbol("#94#101"))}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Expr, 1}, Array{Any, 1}}}, getfield(DanUtils, Symbol("#94#101"))}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.esc), Tuple{Base.Broadcast.Extruded{Array{Expr, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.findprev), getfield(DanUtils, Symbol("#95#102")), Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Any, 1}, Base.IndexLinear, Array{Expr, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(DanUtils, Symbol("#97#104")), Base.Iterators.Zip{Tuple{Array{Any, 1}, Array{Any, 1}}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(DanUtils, Symbol("#97#104")), Base.Iterators.Zip{Tuple{Array{Any, 1}, Array{Any, 1}}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.grow_to!), Array{Expr, 1}, Base.Generator{Base.Iterators.Filter{getfield(DanUtils, Symbol("#97#104")), Base.Iterators.Zip{Tuple{Array{Any, 1}, Array{Any, 1}}}}, getfield(DanUtils, Symbol("#96#103"))}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.grow_to!), Array{Expr, 1}, Base.Generator{Base.Iterators.Filter{getfield(DanUtils, Symbol("#97#104")), Base.Iterators.Zip{Tuple{Array{Any, 1}, Array{Any, 1}}}}, getfield(DanUtils, Symbol("#96#103"))}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Expr, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Expr, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(<)), Nothing, Int64})
precompile(Tuple{getfield(DanUtils, Symbol("#91#98")), Expr})
precompile(Tuple{typeof(Base.:(==)), Expr, Symbol})
precompile(Tuple{typeof(MacroTools.isbinding), Expr})
precompile(Tuple{typeof(MacroTools.blockunify), Expr, Expr})
precompile(Tuple{typeof(MacroTools.normalise), Symbol})
precompile(Tuple{typeof(MacroTools.nomatch), Symbol, Symbol})
precompile(Tuple{typeof(MacroTools.store!), Base.Dict{Any, Any}, Symbol, Symbol})
precompile(Tuple{typeof(MacroTools.match), Symbol, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.match_inner), Expr, Expr, Base.Dict{Any, Any}})
precompile(Tuple{getfield(MacroTools, Symbol("#16#18")), Bool})
precompile(Tuple{getfield(MacroTools, Symbol("#16#18")), Symbol})
precompile(Tuple{getfield(MacroTools, Symbol("#16#18")), Expr})
precompile(Tuple{typeof(Base.filter), typeof(MacroTools.isslurp), Array{Any, 1}})
precompile(Tuple{typeof(MacroTools.slurprange), Array{Any, 1}})
precompile(Tuple{typeof(MacroTools.isslurp), Bool})
precompile(Tuple{typeof(MacroTools.inrange), Int64, Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(MacroTools.normalise), Bool})
precompile(Tuple{typeof(MacroTools.blockunify), Bool, Bool})
precompile(Tuple{typeof(MacroTools.nomatch), Bool, Bool})
precompile(Tuple{typeof(MacroTools.match), Bool, Bool, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Symbol, Symbol})
precompile(Tuple{getfield(MacroTools, Symbol("#16#18")), LineNumberNode})
precompile(Tuple{typeof(MacroTools.unblock), Symbol})
precompile(Tuple{typeof(MacroTools.isexpr), Symbol, Symbol})
precompile(Tuple{typeof(Base.:(==)), Symbol, Symbol})
precompile(Tuple{typeof(MacroTools.blockunify), Symbol, Expr})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{Any, Any}, Nothing})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, Symbol, Nothing})
precompile(Tuple{typeof(MacroTools.trymatch), MacroTools.OrBind, Symbol})
precompile(Tuple{typeof(MacroTools.normalise), MacroTools.OrBind})
precompile(Tuple{typeof(MacroTools.match), MacroTools.OrBind, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.match_inner), MacroTools.OrBind, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.match), Expr, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.trymatch), Expr, Symbol})
precompile(Tuple{typeof(MacroTools.blockunify), Expr, Symbol})
precompile(Tuple{typeof(MacroTools.nomatch), Expr, Symbol})
precompile(Tuple{typeof(MacroTools.match_inner), Expr, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.map), Function, Base.Iterators.Enumerate{Array{Any, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DanUtils, Symbol("#92#99")){Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}}, Base.Iterators.Enumerate{Array{Any, 1}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, getfield(DanUtils, Symbol("#92#99")){Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, getfield(DanUtils, Symbol("#92#99")){Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}}}})
precompile(Tuple{typeof(MacroTools.trymatch), MacroTools.OrBind, Expr})
precompile(Tuple{typeof(Base.map), typeof(Base.Unicode.uppercase), String})
precompile(Tuple{getfield(DanUtils, Symbol("#92#99")){Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}}, Tuple{Int64, Expr}})
precompile(Tuple{typeof(MacroTools.match), MacroTools.OrBind, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.blockunify), MacroTools.OrBind, Expr})
precompile(Tuple{typeof(MacroTools.match_inner), MacroTools.OrBind, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Symbol}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Tuple{Symbol}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.esc), Tuple{Tuple{Symbol}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.esc), Tuple{Tuple{Symbol}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.esc), Tuple{Tuple{Symbol}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.esc), Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.esc), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.esc), Tuple{Array{Any, 1}}}})
precompile(Tuple{getfield(DanUtils, Symbol("#94#101")), Tuple{Expr, Nothing}})
precompile(Tuple{getfield(DanUtils, Symbol("#95#102")), Nothing})
precompile(Tuple{getfield(DanUtils, Symbol("#97#104")), Tuple{Symbol, Nothing}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Expr, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.esc), Tuple{Array{Expr, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.esc), Tuple{Array{Expr, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.esc), Tuple{Array{Expr, 1}}}})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{Base.Dict{Symbol, Any}, Bool}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{Base.Dict{Symbol, Any}, Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Base.Dict{Symbol, Any}, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Dict{Symbol, Any}, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Dict{Symbol, Any}, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Multimedia.MIME{Symbol("text/plain")}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.show_type_name), Base.IOContext{REPL.Terminals.TTYTerminal}, Core.TypeName})
precompile(Tuple{typeof(Base.show_datatype), Base.IOContext{REPL.Terminals.TTYTerminal}, DataType})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Type{T} where T})
precompile(Tuple{typeof(Base.print), Base.IOContext{REPL.Terminals.TTYTerminal}, String, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Tokenize.Lexers.lex_equal), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{getfield(AndExport, Symbol("#@AndExport")), LineNumberNode, Module, Expr})
precompile(Tuple{typeof(Base.getindex), Type{Expr}})
precompile(Tuple{typeof(AndExport.iterflatten), Expr})
precompile(Tuple{typeof(MacroTools.walk), Expr, Function, typeof(AndExport.my_flatten1)})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}, Array{Any, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}}})
precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}}})
precompile(Tuple{getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}, Expr})
precompile(Tuple{getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}, Symbol})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Symbol}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}}, Int64})
precompile(Tuple{typeof(AndExport.my_flatten1), Expr})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Expr}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}}, Int64})
precompile(Tuple{getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}, LineNumberNode})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{LineNumberNode}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{LineNumberNode, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{LineNumberNode, 1}, LineNumberNode, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}}, Int64})
precompile(Tuple{getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(MacroTools, Symbol("#19#20")){typeof(AndExport.my_flatten1)}}, Int64, Int64})
precompile(Tuple{typeof(Base.push!), Array{Expr, 1}, Expr})
precompile(Tuple{typeof(Base.isempty), Array{Expr, 1}})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{typeof(Main.a), Bool}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{typeof(Main.a), Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{typeof(Main.a), Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{typeof(Main.a), Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{typeof(Main.a), Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Function})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Multimedia.MIME{Symbol("text/plain")}, Function})
precompile(Tuple{typeof(Base.methods), Any})
precompile(Tuple{typeof(Base.methods), Any, Any})
precompile(Tuple{typeof(Main.a), Int64})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{Main.A{Int64}, Bool}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{Main.A{Int64}, Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Main.A{Int64}, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Main.A{Int64}, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Main.A{Int64}, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Main.A{Int64}})
precompile(Tuple{typeof(Base._show_default), Base.IOContext{REPL.Terminals.TTYTerminal}, Any})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Multimedia.MIME{Symbol("text/plain")}, Main.A{Int64}})
precompile(Tuple{typeof(Base.sizeof), Main.A{Int64}})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#27#28")){getfield(OhMyREPL.Prompt, Symbol("#21#46")), String}, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.edit_delete), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(OhMyREPL.Prompt, Symbol("#21#46")), Any, Any, Any})
precompile(Tuple{typeof(FileWatching.uvfinalize), FileWatching.FileMonitor})
